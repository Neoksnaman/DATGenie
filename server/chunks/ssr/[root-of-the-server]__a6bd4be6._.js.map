{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/schemas.ts"],"sourcesContent":["/**\n * @fileOverview Shared Zod schemas and TypeScript types for AI flows.\n */\nimport {z} from 'genkit';\n\nexport const ExcelErrorDetectionInputSchema = z.object({\n  excelDataUri: z\n    .string()\n    .describe(\n      \"The Excel file data as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ExcelErrorDetectionInput = z.infer<typeof ExcelErrorDetectionInputSchema>;\n\nexport const ExcelErrorDetectionOutputSchema = z.object({\n  errors: z\n    .array(z.string())\n    .describe('A list of potential errors and inconsistencies found in the Excel file.'),\n  suggestions: z\n    .array(z.string())\n    .describe('A list of suggestions to fix the errors and inconsistencies.'),\n});\nexport type ExcelErrorDetectionOutput = z.infer<typeof ExcelErrorDetectionOutputSchema>;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;AACD;AAAA;;AAEO,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGO,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,QAAQ,uIAAA,CAAA,IAAC,CACN,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CACX,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;AACd","debugId":null}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/excel-error-detection.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Analyzes an Excel file for potential errors and inconsistencies using AI.\n *\n * - excelErrorDetection - A function that handles the Excel file analysis process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport type { ExcelErrorDetectionInput } from '@/ai/schemas';\nimport { ExcelErrorDetectionInputSchema, ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\n\n\nexport async function excelErrorDetection(input: ExcelErrorDetectionInput): Promise<ExcelErrorDetectionOutput> {\n  return excelErrorDetectionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'excelErrorDetectionPrompt',\n  input: {schema: ExcelErrorDetectionInputSchema},\n  output: {schema: ExcelErrorDetectionOutputSchema},\n  prompt: `You are an AI assistant that analyzes Excel files for potential errors and inconsistencies.\n\nYou will receive the Excel file data as a data URI.\n\nAnalyze the Excel data and identify any potential errors, inconsistencies, or formatting issues that might cause problems during conversion to .DAT or PDF formats.\n\nProvide a list of errors and a list of suggestions to fix them.\n\nExcel Data: {{media url=excelDataUri}}\n\nErrors:\n{{errors}}\n\nSuggestions:\n{{suggestions}}`,\n});\n\nconst excelErrorDetectionFlow = ai.defineFlow(\n  {\n    name: 'excelErrorDetectionFlow',\n    inputSchema: ExcelErrorDetectionInputSchema,\n    outputSchema: ExcelErrorDetectionOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;CAIC,GAED;AAEA;;;;;;AAIO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,iCAA8B;IAAA;IAC9C,QAAQ;QAAC,QAAQ,oHAAA,CAAA,kCAA+B;IAAA;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;eAcI,CAAC;AAChB;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,iCAA8B;IAC3C,cAAc,oHAAA,CAAA,kCAA+B;AAC/C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/drive-oauth.ts"],"sourcesContent":["\nimport { google } from 'googleapis';\n\nconst {\n  GOOGLE_OAUTH_CLIENT_ID,\n  GOOGLE_OAUTH_CLIENT_SECRET,\n  GOOGLE_OAUTH_REFRESH_TOKEN,\n} = process.env;\n\nif (!GOOGLE_OAUTH_CLIENT_ID || !GOOGLE_OAUTH_CLIENT_SECRET || !GOOGLE_OAUTH_REFRESH_TOKEN) {\n  // This check is important but shouldn't throw an error that crashes the server on startup,\n  // as the credentials might not be used on every page load.\n  // We will let the functions that use it handle the error.\n  console.warn('Google OAuth credentials are not fully configured in .env. Some Drive/Sheets features may not work.');\n}\n\n// This is a fixed value for web applications\nconst GOOGLE_OAUTH_REDIRECT_URI = 'https://developers.google.com/oauthplayground';\n\nlet oauth2Client: import('google-auth-library').OAuth2Client | null = null;\n\nexport async function getOAuth2Client() {\n  // Add the check here to provide a clear error when the credentials are used.\n  if (!GOOGLE_OAUTH_CLIENT_ID || !GOOGLE_OAUTH_CLIENT_SECRET || !GOOGLE_OAUTH_REFRESH_TOKEN) {\n    throw new Error('Google OAuth credentials (CLIENT_ID, CLIENT_SECRET, REFRESH_TOKEN) must be configured in your .env file.');\n  }\n  \n  if (oauth2Client) {\n    // Check if the token is about to expire (within 60 seconds) and refresh if needed\n    if (oauth2Client.credentials.expiry_date && oauth2Client.credentials.expiry_date < (Date.now() + 60 * 1000)) {\n        console.log('[OAuth] Access token expiring soon, refreshing...');\n        await oauth2Client.refreshAccessToken();\n        console.log('[OAuth] Access token refreshed.');\n    }\n    return oauth2Client;\n  }\n\n  const client = new google.auth.OAuth2(\n    GOOGLE_OAUTH_CLIENT_ID,\n    GOOGLE_OAUTH_CLIENT_SECRET,\n    GOOGLE_OAUTH_REDIRECT_URI\n  );\n\n  client.setCredentials({\n    refresh_token: GOOGLE_OAUTH_REFRESH_TOKEN,\n  });\n\n  // Do an initial token refresh to get the access token\n  try {\n    console.log('[OAuth] Initializing and refreshing access token...');\n    await client.refreshAccessToken();\n    console.log('[OAuth] Initial token refreshed successfully.');\n  } catch (error) {\n    console.error('[OAuth] Failed to refresh access token:', error);\n    throw new Error('Failed to refresh access token. Check your refresh token and credentials.');\n  }\n\n  oauth2Client = client;\n  return oauth2Client;\n}\n\nexport async function getSheetsClient() {\n    const oauth2Client = await getOAuth2Client();\n    return google.sheets({ version: 'v4', auth: oauth2Client });\n}\n"],"names":[],"mappings":";;;;AACA;;AAEA,MAAM,EACJ,sBAAsB,EACtB,0BAA0B,EAC1B,0BAA0B,EAC3B,GAAG,QAAQ,GAAG;AAEf,IAAI,CAAC,0BAA0B,CAAC,8BAA8B,CAAC,4BAA4B;IACzF,2FAA2F;IAC3F,2DAA2D;IAC3D,0DAA0D;IAC1D,QAAQ,IAAI,CAAC;AACf;AAEA,6CAA6C;AAC7C,MAAM,4BAA4B;AAElC,IAAI,eAAkE;AAE/D,eAAe;IACpB,6EAA6E;IAC7E,IAAI,CAAC,0BAA0B,CAAC,8BAA8B,CAAC,4BAA4B;QACzF,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,cAAc;QAChB,kFAAkF;QAClF,IAAI,aAAa,WAAW,CAAC,WAAW,IAAI,aAAa,WAAW,CAAC,WAAW,GAAI,KAAK,GAAG,KAAK,KAAK,MAAO;YACzG,QAAQ,GAAG,CAAC;YACZ,MAAM,aAAa,kBAAkB;YACrC,QAAQ,GAAG,CAAC;QAChB;QACA,OAAO;IACT;IAEA,MAAM,SAAS,IAAI,mJAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CACnC,wBACA,4BACA;IAGF,OAAO,cAAc,CAAC;QACpB,eAAe;IACjB;IAEA,sDAAsD;IACtD,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,OAAO,kBAAkB;QAC/B,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,MAAM,IAAI,MAAM;IAClB;IAEA,eAAe;IACf,OAAO;AACT;AAEO,eAAe;IAClB,MAAM,eAAe,MAAM;IAC3B,OAAO,mJAAA,CAAA,SAAM,CAAC,MAAM,CAAC;QAAE,SAAS;QAAM,MAAM;IAAa;AAC7D","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/googlesheets.ts"],"sourcesContent":["\nimport { z } from 'zod';\nimport type { TaxProfile } from './schemas';\nimport { getSheetsClient } from './drive-oauth';\n\nconst signupSchema = z.object({\n  userName: z.string(),\n  email: z.string().email(),\n  password: z.string(),\n  folderId: z.string(),\n});\n\nconst loginSchema = z.object({\n  userName: z.string(),\n  password: z.string(),\n});\n\nexport type SignupData = z.infer<typeof signupSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\n\n\nconst {\n  GOOGLE_SHEETS_SHEET_ID,\n} = process.env;\n\nif (!GOOGLE_SHEETS_SHEET_ID) {\n  throw new Error('GOOGLE_SHEETS_SHEET_ID is not configured in .env');\n}\n\nconst SPREADSHEET_ID = GOOGLE_SHEETS_SHEET_ID;\nconst SHEET_NAME = 'credentials';\n\nexport async function appendUserToSheet(userData: SignupData) {\n  const { email, userName, password, folderId } = userData;\n  const timestamp = new Date().toISOString();\n  const sheets = await getSheetsClient();\n\n  // Mapping to sheet headers: emailAddress, userName, pwd, databaseID, folderID, status, lastLogin, runtime\n  const values = [[email, userName, password, '', folderId, 'active', timestamp, '']];\n\n  const request = {\n    spreadsheetId: SPREADSHEET_ID,\n    range: `${SHEET_NAME}!A1`, // Appends to the first empty row of the sheet\n    valueInputOption: 'USER_ENTERED',\n    resource: {\n      values,\n    },\n  };\n\n  try {\n    const response = await sheets.spreadsheets.values.append(request);\n    console.log('Appended to sheet:', response.data);\n    return response.data;\n  } catch (err) {\n    console.error('The API returned an error: ' + err);\n    throw new Error('Failed to append data to Google Sheet.');\n  }\n}\n\nexport async function getAllUsers() {\n    try {\n        const sheets = await getSheetsClient();\n        const response = await sheets.spreadsheets.values.get({\n            spreadsheetId: SPREADSHEET_ID,\n            range: SHEET_NAME,\n        });\n\n        const rows = response.data.values;\n        if (!rows || rows.length === 0) {\n            return [];\n        }\n\n        const header = rows[0];\n        const emailIndex = header.indexOf('emailAddress');\n        const userNameIndex = header.indexOf('userName');\n        const pwdIndex = header.indexOf('pwd');\n        const databaseIdIndex = header.indexOf('databaseID');\n        const folderIdIndex = header.indexOf('folderID');\n\n        if (userNameIndex === -1 || pwdIndex === -1 || emailIndex === -1 || databaseIdIndex === -1 || folderIdIndex === -1) {\n            throw new Error('Could not find required columns in the credentials sheet.');\n        }\n\n        return rows.slice(1).map(row => ({\n            emailAddress: row[emailIndex] || '',\n            userName: row[userNameIndex] || '',\n            pwd: row[pwdIndex] || '',\n            databaseId: row[databaseIdIndex] || '',\n            folderId: row[folderIdIndex] || '',\n        }));\n\n    } catch (err) {\n        console.error('The API returned an error: ' + err);\n        throw new Error('Failed to retrieve data from Google Sheet.');\n    }\n}\n\nexport async function updateUserFolderId(userName: string, folderId: string) {\n    const sheets = await getSheetsClient();\n    const range = `${SHEET_NAME}!A:H`; // Adjust range to cover all columns\n    const response = await sheets.spreadsheets.values.get({\n        spreadsheetId: SPREADSHEET_ID,\n        range,\n    });\n\n    const rows = response.data.values;\n    if (!rows || rows.length === 0) {\n        throw new Error('No users found in credentials sheet.');\n    }\n\n    const header = rows[0];\n    const userNameIndex = header.indexOf('userName');\n    const folderIdIndex = header.indexOf('folderID');\n\n    if (userNameIndex === -1 || folderIdIndex === -1) {\n        throw new Error('userName or folderID column not found.');\n    }\n\n    const userRowIndex = rows.findIndex(row => row[userNameIndex] === userName);\n    if (userRowIndex === -1) {\n        throw new Error(`User ${userName} not found.`);\n    }\n\n    const rowToUpdate = userRowIndex + 1;\n    const columnToUpdate = String.fromCharCode('A'.charCodeAt(0) + folderIdIndex);\n\n    await sheets.spreadsheets.values.update({\n        spreadsheetId: SPREADSHEET_ID,\n        range: `${SHEET_NAME}!${columnToUpdate}${rowToUpdate}`,\n        valueInputOption: 'RAW',\n        resource: {\n            values: [[folderId]],\n        },\n    });\n}\n\n\nexport async function getAllHeaderDataFromSheet(databaseId: string): Promise<TaxProfile[]> {\n  try {\n    const sheets = await getSheetsClient();\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId: databaseId,\n      range: 'tpList!A:Q',\n    });\n\n    const rows = response.data.values;\n    if (!rows || rows.length < 2) {\n      return [];\n    }\n\n    const header = rows[0];\n    const dataRows = rows.slice(1);\n    \n    const objects = dataRows\n        .map(row => {\n            const rowData: { [key: string]: any } = {};\n            header.forEach((key, headerIndex) => {\n                rowData[key] = row[headerIndex] || '';\n            });\n            return rowData as TaxProfile;\n        })\n        .filter(profile => profile.tpTIN && typeof profile.tpTIN === 'string' && profile.tpTIN.trim() !== '');\n\n    return objects;\n\n  } catch (err) {\n    console.error(`The API returned an error for spreadsheet ${databaseId}: ` + err);\n    throw new Error('Failed to retrieve header data from Google Sheet.');\n  }\n}\n\nexport async function appendHeaderDataToSheet(profileData: TaxProfile, databaseId: string) {\n  const sheets = await getSheetsClient();\n  const headerResponse = await sheets.spreadsheets.values.get({\n    spreadsheetId: databaseId,\n    range: 'tpList!A1:Q1',\n  });\n  \n  const headers = headerResponse.data.values?.[0];\n  if (!headers) {\n    throw new Error('Could not retrieve headers from tpList sheet.');\n  }\n\n  const values = [headers.map(header => profileData[header as keyof TaxProfile] || '')];\n\n  const request = {\n    spreadsheetId: databaseId,\n    range: `tpList!A1`,\n    valueInputOption: 'USER_ENTERED',\n    resource: {\n      values,\n    },\n  };\n\n  try {\n    const response = await sheets.spreadsheets.values.append(request);\n    console.log('Appended to sheet:', response.data);\n    return response.data;\n  } catch (err) {\n    console.error('The API returned an error: ' + err);\n    throw new Error('Failed to append data to Google Sheet.');\n  }\n}\n\nexport async function updateHeaderDataInSheet(profileData: TaxProfile, databaseId: string) {\n  const sheets = await getSheetsClient();\n  const range = 'tpList!A:Q';\n  const getResponse = await sheets.spreadsheets.values.get({\n    spreadsheetId: databaseId,\n    range,\n  });\n\n  const rows = getResponse.data.values;\n  if (!rows || rows.length === 0) {\n    throw new Error('No data found in the sheet.');\n  }\n\n  const headers = rows[0];\n  const tinIndex = headers.indexOf('tpTIN');\n  if (tinIndex === -1) {\n    throw new Error('TIN column not found in the sheet.');\n  }\n  \n  const rowIndex = rows.findIndex(row => row[tinIndex] === profileData.tpTIN);\n\n  if (rowIndex === -1) {\n    throw new Error('Profile with the specified TIN not found.');\n  }\n  \n  const rowToUpdate = rowIndex + 1;\n  const values = [headers.map(header => profileData[header as keyof TaxProfile] || '')];\n\n  const request = {\n    spreadsheetId: databaseId,\n    range: `tpList!A${rowToUpdate}`,\n    valueInputOption: 'USER_ENTERED',\n    resource: {\n      values,\n    },\n  };\n\n  try {\n    const response = await sheets.spreadsheets.values.update(request);\n    console.log('Updated sheet:', response.data);\n    return response.data;\n  } catch (err) {\n    console.error('The API returned an error: ' + err);\n    throw new Error('Failed to update data in Google Sheet.');\n  }\n}\n\nasync function getSheetId(spreadsheetId: string, sheetName: string): Promise<number | null> {\n    const sheets = await getSheetsClient();\n    const response = await sheets.spreadsheets.get({\n        spreadsheetId,\n    });\n    const sheet = response.data.sheets?.find(s => s.properties?.title === sheetName);\n    return sheet?.properties?.sheetId ?? null;\n}\n\nexport async function deleteHeaderDataRowInSheet(tpTIN: string, databaseId: string) {\n  const sheets = await getSheetsClient();\n  const sheetName = 'tpList';\n  const range = `${sheetName}!A:Q`;\n\n  // 1. Get all data to find the row index\n  const getResponse = await sheets.spreadsheets.values.get({\n    spreadsheetId: databaseId,\n    range,\n  });\n\n  const rows = getResponse.data.values;\n  if (!rows || rows.length === 0) {\n    console.log('No data found in the sheet to delete.');\n    return;\n  }\n\n  const headers = rows[0];\n  const tinIndex = headers.indexOf('tpTIN');\n  if (tinIndex === -1) {\n    throw new Error('TIN column not found in the sheet.');\n  }\n\n  const rowIndex = rows.findIndex(row => row[tinIndex] === tpTIN);\n\n  if (rowIndex === -1) {\n    console.log(`Profile with TIN ${tpTIN} not found for deletion.`);\n    return; // Profile not found, so nothing to delete\n  }\n\n  // 2. Get the sheetId required for batchUpdate\n  const sheetId = await getSheetId(databaseId, sheetName);\n  if (sheetId === null) {\n      throw new Error(`Sheet with name \"${sheetName}\" not found.`);\n  }\n\n  // 3. Perform batch update to delete the row and add a blank one\n  const batchUpdateRequest = {\n    spreadsheetId: databaseId,\n    resource: {\n      requests: [\n        {\n          deleteDimension: {\n            range: {\n              sheetId: sheetId,\n              dimension: 'ROWS',\n              startIndex: rowIndex, // The 0-based index of the row to delete.\n              endIndex: rowIndex + 1\n            }\n          }\n        },\n        {\n          appendDimension: {\n            sheetId: sheetId,\n            dimension: \"ROWS\",\n            length: 1\n          }\n        }\n      ]\n    }\n  };\n\n  try {\n    await sheets.spreadsheets.batchUpdate(batchUpdateRequest);\n    console.log(`Successfully deleted row at index ${rowIndex} and added a new one.`);\n  } catch (err) {\n    console.error('The API returned an error during batch update: ' + err);\n    throw new Error('Failed to delete row from Google Sheet.');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 731, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/schemas.ts"],"sourcesContent":["import { z } from 'zod';\n\nconst alphanumericWithSpaces = (name: string, length: number, required = true) => {\n  const schema = z.string()\n   .max(length, `${name} must be ${length} characters or less.`)\n   .regex(/^[a-zA-Z0-9\\s]*$/, `${name} must only contain letters, numbers, and spaces.`);\n  \n  if (required) {\n    return schema.min(1, `${name} is required.`);\n  }\n  return schema.optional().or(z.literal(''));\n};\n\nexport const TaxProfileSchema = z.object({\n  tpTIN: z.string().regex(/^[0-9]{9}$/, 'TIN must be 9 digits.'),\n  branchCode: z.string().regex(/^[0-9]{4}$/, 'Branch code must be 4 digits.'),\n  rdoCode: z.string().min(1, 'RDO Code is required.'),\n  entityType: z.string(),\n  cycleType: z.string(),\n  monthSelect: z.string().min(1, 'Month is required.'),\n  companyName: alphanumericWithSpaces('Company Name', 50, false),\n  lastName: alphanumericWithSpaces('Last Name', 30, false),\n  firstName: alphanumericWithSpaces('First Name', 30, false),\n  middleName: alphanumericWithSpaces('Middle Name', 30, false),\n  tradeName: alphanumericWithSpaces('Trade Name', 50),\n  subStreet: z.string().max(30, 'Unit/Floor/Substreet must be 30 characters or less.').optional().or(z.literal('')),\n  street: z.string().max(30, 'Street must be 30 characters or less.').min(1, 'Street is required.'),\n  barangay: z.string().max(30, 'Barangay must be 30 characters or less.').min(1, 'Barangay is required.'),\n  cityMunicipality: z.string().max(30, 'City/Municipality must be 30 characters or less.').min(1, 'City/Municipality is required.'),\n  province: z.string().max(30, 'Province must be 30 characters or less.').min(1, 'Province is required.'),\n  zipCode: z.string().regex(/^[0-9]{4}$/, 'Zip code must be 4 digits.'),\n}).passthrough().refine(data => {\n    if (data.entityType === 'Individual') {\n        return !!data.lastName && !!data.firstName && !!data.middleName;\n    }\n    return true;\n}, {\n    message: \"First, Middle, and Last name are required for individuals.\",\n    path: [\"lastName\"], \n}).refine(data => {\n    if (data.entityType === 'Non-Individual') {\n        return !!data.companyName;\n    }\n    return true;\n}, {\n    message: \"Company name is required for non-individuals.\",\n    path: [\"companyName\"],\n});\n\n\nexport type TaxProfile = z.infer<typeof TaxProfileSchema>;\n\n\nexport const MutationResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    data: TaxProfileSchema.nullable(),\n});\n\nexport const DatFileSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  path: z.string(),\n  modifiedTime: z.string(),\n});\nexport type DatFile = z.infer<typeof DatFileSchema>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 801, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/drive.ts"],"sourcesContent":["\n'use server';\n\nimport { google } from 'googleapis';\nimport type { drive_v3 } from 'googleapis';\nimport { getOAuth2Client } from './drive-oauth';\n\n\nasync function getDriveClient(): Promise<drive_v3.Drive> {\n    const oauth2Client = await getOAuth2Client();\n    return google.drive({ version: 'v3', auth: oauth2Client });\n}\n\n/**\n * Creates a root folder for a user.\n * @param name The name of the folder to create.\n * @returns The ID of the created folder.\n */\nexport async function createFolderInDrive(name: string): Promise<string> {\n    const drive = await getDriveClient();\n    const fileMetadata = {\n        name,\n        mimeType: 'application/vnd.google-apps.folder',\n    };\n    try {\n        const file = await drive.files.create({\n            resource: fileMetadata,\n            fields: 'id',\n        });\n        console.log(`[Drive] Created root folder \"${name}\" with ID: ${file.data.id}`);\n        return file.data.id!;\n    } catch (error) {\n        console.error(`[Drive] Error creating root folder \"${name}\":`, error);\n        throw error;\n    }\n}\n\nasync function findFolder(drive: drive_v3.Drive, name: string, parentId: string): Promise<string | null> {\n    const query = `mimeType='application/vnd.google-apps.folder' and name='${name.replace(/'/g, \"\\\\'\")}' and '${parentId}' in parents and trashed=false`;\n    try {\n        const res = await drive.files.list({\n            q: query,\n            fields: 'files(id)',\n            spaces: 'drive',\n            pageSize: 1,\n        });\n        if (res.data.files && res.data.files.length > 0 && res.data.files[0].id) {\n            return res.data.files[0].id;\n        }\n        return null;\n    } catch (error) {\n        console.error(`[Drive] Error finding folder \"${name}\" in parent \"${parentId}\":`, error);\n        return null;\n    }\n}\n\nasync function createFolder(drive: drive_v3.Drive, name: string, parentId: string): Promise<string> {\n    const fileMetadata = {\n        name: name,\n        mimeType: 'application/vnd.google-apps.folder',\n        parents: [parentId],\n    };\n    const folder = await drive.files.create({\n        resource: fileMetadata,\n        fields: 'id',\n    });\n    if (!folder.data.id) throw new Error(`Failed to create folder \"${name}\"`);\n    console.log(`[Drive] Created folder \"${name}\" with ID: ${folder.data.id}.`);\n    return folder.data.id;\n}\n\n\nasync function getOrCreateFolderByPath(drive: drive_v3.Drive, rootFolderId: string, path: string[]): Promise<string> {\n    let currentParentId = rootFolderId;\n    \n    const datFilesFolderName = 'DATFiles';\n    let datFilesFolderId = await findFolder(drive, datFilesFolderName, currentParentId);\n    if (!datFilesFolderId) {\n        datFilesFolderId = await createFolder(drive, datFilesFolderName, currentParentId);\n    }\n    currentParentId = datFilesFolderId;\n\n    for (const folderName of path) {\n        let nextFolderId = await findFolder(drive, folderName, currentParentId);\n        if (!nextFolderId) {\n            nextFolderId = await createFolder(drive, folderName, currentParentId);\n        }\n        currentParentId = nextFolderId;\n    }\n    return currentParentId;\n}\n\nexport async function checkFileExists(fileName: string, rootFolderId: string, path: string[]): Promise<boolean> {\n    try {\n        const drive = await getDriveClient();\n        const finalFolderId = await getOrCreateFolderByPath(drive, rootFolderId, path);\n        const query = `name='${fileName.replace(/'/g, \"\\\\'\")}' and '${finalFolderId}' in parents and trashed=false`;\n        \n        const res = await drive.files.list({\n            q: query,\n            fields: 'files(id)',\n            pageSize: 1,\n        });\n\n        return !!(res.data.files && res.data.files.length > 0);\n    } catch (error) {\n        console.error(`[Drive] Error checking if file '${fileName}' exists:`, error);\n        return false;\n    }\n}\n\n/**\n * Uploads or updates a file in a specific Google Drive folder path.\n * @param fileName The name of the file.\n * @param fileContent The content of the file.\n * @param rootFolderId The ID of the user's root folder in Drive.\n * @param path An array representing the folder path inside \"DATFiles\".\n * @param overwrite If true, will update the existing file. If false, will not upload if file exists.\n * @returns The ID of the created or updated file.\n */\nexport async function uploadFileToDrive(fileName: string, fileContent: string, rootFolderId: string, path: string[], overwrite: boolean = false): Promise<string> {\n  try {\n    const drive = await getDriveClient();\n    const finalFolderId = await getOrCreateFolderByPath(drive, rootFolderId, path);\n    console.log(`[Drive] Final folder for upload is '${finalFolderId}'.`);\n\n    const media = {\n        mimeType: 'text/plain',\n        body: fileContent,\n    };\n\n    if (overwrite) {\n        const query = `name='${fileName.replace(/'/g, \"\\\\'\")}' and '${finalFolderId}' in parents and trashed=false`;\n        const res = await drive.files.list({ q: query, fields: 'files(id)', pageSize: 1 });\n\n        if (res.data.files && res.data.files.length > 0 && res.data.files[0].id) {\n            const fileId = res.data.files[0].id;\n            console.log(`[Drive] Overwriting existing file '${fileName}' with ID: ${fileId}`);\n            const updatedFile = await drive.files.update({\n                fileId: fileId,\n                media: media,\n                fields: 'id',\n            });\n            if (!updatedFile.data.id) throw new Error('File update did not return an ID.');\n            return updatedFile.data.id;\n        }\n    }\n    \n    // If not overwriting or file doesn't exist, create a new one.\n    const fileMetadata = {\n      name: fileName,\n      parents: [finalFolderId],\n    };\n\n    const file = await drive.files.create({\n      requestBody: fileMetadata,\n      media: media,\n      fields: 'id',\n    });\n\n    if (!file.data.id) throw new Error('File creation did not return an ID.');\n    console.log(`[Drive] Successfully uploaded new file '${fileName}', File ID: ${file.data.id}`);\n    return file.data.id;\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    console.error(`[Drive] Failed to upload file '${fileName}':`, errorMessage);\n    throw new Error(`Failed to upload file to Google Drive: ${errorMessage}`);\n  }\n}\n\n/**\n * Lists all .DAT files within a user's DATFiles directory structure.\n * @param rootFolderId The root folder ID for the user.\n * @returns A list of file details including id, name, path, and modifiedTime.\n */\nexport async function listDatFiles(rootFolderId: string): Promise<{ id: string; name: string; path: string; modifiedTime: string }[]> {\n    const drive = await getDriveClient();\n    const allFiles: { id: string; name: string; path: string; modifiedTime: string }[] = [];\n\n    // Find the main \"DATFiles\" folder first\n    const datFilesFolderId = await findFolder(drive, 'DATFiles', rootFolderId);\n    if (!datFilesFolderId) {\n        console.log('[Drive] \"DATFiles\" folder not found, returning empty list.');\n        return []; // No DATFiles folder, so no files to list\n    }\n\n    async function searchRecursively(folderId: string, currentPath: string[]) {\n        let pageToken: string | undefined = undefined;\n        do {\n            const res: any = await drive.files.list({\n                q: `'${folderId}' in parents and trashed=false`,\n                fields: 'nextPageToken, files(id, name, mimeType, modifiedTime)',\n                spaces: 'drive',\n                pageToken: pageToken,\n            });\n\n            for (const file of res.data.files) {\n                if (file.mimeType === 'application/vnd.google-apps.folder') {\n                    await searchRecursively(file.id!, [...currentPath, file.name!]);\n                } else if (file.name?.toUpperCase().endsWith('.DAT')) {\n                    allFiles.push({\n                        id: file.id!,\n                        name: file.name!,\n                        path: currentPath.join(' / '),\n                        modifiedTime: file.modifiedTime!,\n                    });\n                }\n            }\n            pageToken = res.data.nextPageToken;\n        } while (pageToken);\n    }\n\n    await searchRecursively(datFilesFolderId, []);\n    return allFiles;\n}\n\n/**\n * Downloads the content of a file from Google Drive.\n * @param fileId The ID of the file to download.\n * @returns The content of the file as a string.\n */\nexport async function downloadFileFromDrive(fileId: string): Promise<string> {\n    const drive = await getDriveClient();\n    try {\n        const response = await drive.files.get(\n            { fileId: fileId, alt: 'media' },\n            { responseType: 'stream' }\n        );\n\n        return new Promise((resolve, reject) => {\n            let buf: any[] = [];\n            response.data\n                .on('data', (chunk) => buf.push(chunk))\n                .on('end', () => {\n                    const content = Buffer.concat(buf).toString();\n                    resolve(content);\n                })\n                .on('error', (err) => {\n                    console.error(`[Drive] Error downloading file ${fileId}:`, err);\n                    reject(err);\n                });\n        });\n\n    } catch (error) {\n        console.error(`[Drive] API error on download for file ${fileId}:`, error);\n        throw error;\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1040, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive } from './drive';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" has no data to process.`] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\",\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            processedData: null\n        };\n    }\n    \n    const datFileName = `${tin}S${month}${year}.DAT`;\n    const reportTypeShort = \"Sales\";\n    const drivePath = [tin, reportTypeShort, year];\n\n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName,\n                datContent: null, error: null, errors: null,\n                totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n                totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n                processedData: null,\n            };\n        }\n    }\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).catch(console.error);\n            \n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, processedData: null\n    };\n}\n\nconst atcRatesSched1: { [key: string]: number } = {\n  'WI010': 5, 'WI011': 10, 'WI020': 5, 'WI021': 10, 'WI030': 5, 'WI031': 10, 'WI040': 5, 'WI041': 10, 'WI050': 5, 'WI051': 10,\n  'WI060': 5, 'WI061': 10, 'WI070': 5, 'WI071': 10, 'WI080': 5, 'WI081': 10, 'WI090': 5, 'WI091': 10, 'WI100': 5, 'WI110': 5,\n  'WI120': 2, 'WI130': 15, 'WI139': 5, 'WI140': 10, 'WI151': 5, 'WI150': 10, 'WI152': 10, 'WI153': 15, 'WI156': 0.5, 'WI159': 15,\n  'WI640': 1, 'WI157': 2, 'WI158': 1, 'WI160': 2, 'WI515': 5, 'WI516': 10, 'WI530': 1, 'WI535': 1, 'WI540': 5, 'WI610': 1,\n  'WI630': 5, 'WI632': 1, 'WI650': 15, 'WI651': 15, 'WI660': 10, 'WI661': 15, 'WI662': 10, 'WI663': 15, 'WI680': 5, 'WI710': 15,\n  'WI720': 1, 'WI770': 1, 'WI780': 2, 'WI820': 0.5, 'WI830': 0.5, 'WC010': 10, 'WC011': 15, 'WC020': 10, 'WC021': 15,\n  'WC030': 10, 'WC031': 15, 'WC040': 10, 'WC041': 15, 'WC050': 10, 'WC051': 15, 'WC060': 10, 'WC061': 15, 'WC070': 10,\n  'WC071': 15, 'WC080': 10, 'WC081': 15, 'WC100': 5, 'WC110': 5, 'WC120': 2, 'WC139': 10, 'WC140': 15, 'WC151': 10, 'WC150': 15,\n  'WC156': 0.5, 'WC640': 1, 'WC157': 2, 'WC158': 1, 'WC160': 2, 'WC535': 1, 'WC540': 5, 'WC610': 1, 'WC630': 5, 'WC632': 1,\n  'WC650': 15, 'WC651': 15, 'WC660': 10, 'WC661': 15, 'WC662': 10, 'WC663': 15, 'WC680': 5, 'WC690': 1, 'WC710': 15, 'WC720': 1,\n  'WC770': 1, 'WC780': 2, 'WC790': 15, 'WC820': 0.5, 'WC830': 0.5\n};\n\n\nasync function generate1601EQSched1DatFile(file: File): Promise<DatFileResult> {\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n    \n    const validationErrors: string[] = [];\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== '')) // Skip fully blank rows\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            // 1. TIN\n            if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                 if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n            }\n            \n            // 2. Branch Code\n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            if (!branchCode) {\n                branchCode = \"0000\";\n            } else {\n                if (branchCode.length > 4) {\n                    branchCode = branchCode.slice(-4);\n                }\n                branchCode = branchCode.padStart(4, '0');\n            }\n            processedRow[1] = branchCode;\n            \n            // 3-6. Name fields\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const hasFirstName = String(processedRow[4] || '').trim().length > 0;\n            const hasLastName = String(processedRow[3] || '').trim().length > 0;\n            const hasMiddleName = String(processedRow[5] || '').trim().length > 0;\n            if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n            if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n            // 7. ATC\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            // 8-10. Numeric fields\n            const numericFields = [\n                { name: 'Rate', index: 7 },\n                { name: 'Income Payment', index: 8 },\n                { name: 'Withholding Tax', index: 9 },\n            ];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            // ATC and Rate validation\n            if (atc) {\n                if (atcRatesSched1.hasOwnProperty(atc)) {\n                    const expectedRate = atcRatesSched1[atc];\n                    const actualRate = parseFloat(processedRow[7]);\n                    if (actualRate !== expectedRate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${expectedRate}%, but got ${actualRate}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for this schedule.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n\n\n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    const datContent = processedData\n        .map(row => row.slice(0, 10).join(','))\n        .join('\\n');\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: '1601EQ_sched1.DAT',\n    };\n}\n\n\nexport async function convertExcelToDat(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null,\n    };\n\n    if (!file || !reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for conversion.' };\n    }\n\n    try {\n        const profile: TaxProfile = JSON.parse(profileString);\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            return await validateExcelForPurchases(formData);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n            return await generate1601EQSched1DatFile(file);\n        }\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during conversion.';\n        console.error('[convertExcelToDat] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Conversion failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function overwriteDatFile(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const processedDataString = formData.get('processedData') as string | null;\n    const nonCreditableTaxString = formData.get('nonCreditableInputTax') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null,\n    };\n\n    if (!reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for overwrite.' };\n    }\n     const profile: TaxProfile = JSON.parse(profileString);\n\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n            return await generateSalesDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedDataString || nonCreditableTaxString === null) return { ...defaultErrorResult, error: 'Missing processed data for overwrite.' };\n            const processedData = JSON.parse(processedDataString);\n            const nonCreditableInputTax = parseFloat(nonCreditableTaxString);\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, true);\n        }\n\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported for overwrite.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Overwrite failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number,\n    folderId: string,\n    overwrite: boolean = false\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    const reportTypeShort = \"Purchases\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName,\n                datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null,\n                totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null,\n                totalOtherGoods: null, totalInputTax: null, processedData: null\n            };\n        }\n    }\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).catch(console.error);\n\n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null, processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(formData: FormData): Promise<DatFileResult> {\n    const processedDataString = formData.get('processedData') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const nonCreditableInputTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null\n    };\n    \n    if (!processedDataString || !profileString || !month || !year || nonCreditableInputTaxString === null || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for purchase file creation.' };\n    }\n    \n    try {\n        const processedData = JSON.parse(processedDataString);\n        const profile: TaxProfile = JSON.parse(profileString);\n        const nonCreditableInputTax = parseFloat(nonCreditableInputTaxString);\n\n        return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, false);\n\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during DAT file creation.';\n        console.error('[createPurchasesDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Creation failed: ${errorMessage}` };\n    }\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const files = await listDatFiles(folderId);\n        return { success: true, files, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2400, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/home/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getUserHeaderData as '40b2e571cd0cb75ab827e90db3316b90dd461882f2'} from 'ACTIONS_MODULE0'\nexport {createPurchasesDatFile as '405c07508d183d72b5368850183fd267f67971612c'} from 'ACTIONS_MODULE0'\nexport {convertExcelToDat as '40895842e07ef2f9872e21c8c7ad22133d33c8c849'} from 'ACTIONS_MODULE0'\nexport {validateExcelForPurchases as '405640ada876955278e1ad2e9d85009c459c46777d'} from 'ACTIONS_MODULE0'\nexport {overwriteDatFile as '401ce1a9d271208095f87042b1ec2b335fce067d9a'} from 'ACTIONS_MODULE0'\nexport {addTaxProfile as '6043bcb009bc6aa9b83327467834f75494fa1f00b7'} from 'ACTIONS_MODULE0'\nexport {updateTaxProfile as '60c03a02cedce74d6fc9664d1879a50f2ea48706fa'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 2476, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/home/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/home/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/home/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","debugId":null}},
    {"offset": {"line": 2490, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/home/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/home/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/home/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","debugId":null}},
    {"offset": {"line": 2504, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}