{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/schemas.ts"],"sourcesContent":["/**\n * @fileOverview Shared Zod schemas and TypeScript types for AI flows.\n */\nimport {z} from 'zod';\n\nexport const ExcelErrorDetectionInputSchema = z.object({\n  excelDataUri: z\n    .string()\n    .describe(\n      \"The Excel file data as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ExcelErrorDetectionInput = z.infer<typeof ExcelErrorDetectionInputSchema>;\n\nexport const ExcelErrorDetectionOutputSchema = z.object({\n  errors: z\n    .array(z.string())\n    .describe('A list of potential errors and inconsistencies found in the Excel file.'),\n  suggestions: z\n    .array(z.string())\n    .describe('A list of suggestions to fix the errors and inconsistencies.'),\n});\nexport type ExcelErrorDetectionOutput = z.infer<typeof ExcelErrorDetectionOutputSchema>;\n\n\nexport const HeaderDataSchema = z.object({\n  tpTIN: z.string().optional(),\n  branchCode: z.string().optional(),\n  rdoCode: z.string().optional(),\n  entityType: z.string().optional(),\n  cycleType: z.string().optional(),\n  monthSelect: z.string().optional(),\n  companyName: z.string().optional(),\n  lastName: z.string().optional(),\n  firstName: z.string().optional(),\n  middleName: z.string().optional(),\n  tradeName: z.string().optional(),\n  subStreet: z.string().optional(),\n  street: z.string().optional(),\n  barangay: z.string().optional(),\n  cityMunicipality: z.string().optional(),\n  province: z.string().optional(),\n  zipCode: z.string().optional(),\n});\nexport type HeaderData = z.infer<typeof HeaderDataSchema>;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;AACD;;AAEO,MAAM,iCAAiC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,cAAc,oIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGO,MAAM,kCAAkC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,QAAQ,oIAAA,CAAA,IAAC,CACN,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,aAAa,oIAAA,CAAA,IAAC,CACX,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;AACd;AAIO,MAAM,mBAAmB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAChC,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAChC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,kBAAkB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACrC,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC9B","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/excel-error-detection.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Analyzes an Excel file for potential errors and inconsistencies using AI.\n *\n * - excelErrorDetection - A function that handles the Excel file analysis process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport type { ExcelErrorDetectionInput } from '@/ai/schemas';\nimport { ExcelErrorDetectionInputSchema, ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\n\n\nexport async function excelErrorDetection(input: ExcelErrorDetectionInput): Promise<ExcelErrorDetectionOutput> {\n  return excelErrorDetectionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'excelErrorDetectionPrompt',\n  input: {schema: ExcelErrorDetectionInputSchema},\n  output: {schema: ExcelErrorDetectionOutputSchema},\n  prompt: `You are an AI assistant that analyzes Excel files for potential errors and inconsistencies.\n\nYou will receive the Excel file data as a data URI.\n\nAnalyze the Excel data and identify any potential errors, inconsistencies, or formatting issues that might cause problems during conversion to .DAT or PDF formats.\n\nProvide a list of errors and a list of suggestions to fix them.\n\nExcel Data: {{media url=excelDataUri}}\n\nErrors:\n{{errors}}\n\nSuggestions:\n{{suggestions}}`,\n});\n\nconst excelErrorDetectionFlow = ai.defineFlow(\n  {\n    name: 'excelErrorDetectionFlow',\n    inputSchema: ExcelErrorDetectionInputSchema,\n    outputSchema: ExcelErrorDetectionOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;CAIC,GAED;AAEA;;;;;;AAIO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,iCAA8B;IAAA;IAC9C,QAAQ;QAAC,QAAQ,oHAAA,CAAA,kCAA+B;IAAA;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;eAcI,CAAC;AAChB;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,iCAA8B;IAC3C,cAAc,oHAAA,CAAA,kCAA+B;AAC/C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/googlesheets.ts"],"sourcesContent":["'use server';\n\nimport { google } from 'googleapis';\nimport { z } from 'zod';\nimport { HeaderDataSchema, type HeaderData } from '@/ai/schemas';\n\nconst signupSchema = z.object({\n  userName: z.string(),\n  email: z.string().email(),\n  password: z.string(),\n});\n\nconst loginSchema = z.object({\n  userName: z.string(),\n  password: z.string(),\n});\n\nexport type SignupData = z.infer<typeof signupSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\n\n\nconst {\n  GOOGLE_SHEETS_CLIENT_EMAIL,\n  GOOGLE_SHEETS_PRIVATE_KEY,\n  GOOGLE_SHEETS_SHEET_ID,\n} = process.env;\n\nif (!GOOGLE_SHEETS_CLIENT_EMAIL || !GOOGLE_SHEETS_PRIVATE_KEY || !GOOGLE_SHEETS_SHEET_ID) {\n  throw new Error('Google Sheets API credentials are not configured in .env');\n}\n\nconst auth = new google.auth.GoogleAuth({\n  credentials: {\n    client_email: GOOGLE_SHEETS_CLIENT_EMAIL,\n    private_key: GOOGLE_SHEETS_PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n  },\n  scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n});\n\nconst sheets = google.sheets({ version: 'v4', auth });\nconst SPREADSHEET_ID = GOOGLE_SHEETS_SHEET_ID;\nconst SHEET_NAME = 'credentials';\n\nexport async function appendUserToSheet(userData: SignupData) {\n  const { email, userName, password } = userData;\n  const timestamp = new Date().toISOString();\n\n  // Mapping to sheet headers: emailAddress, userName, pwd, databaseID, folderID, status, lastLogin, runtime\n  const values = [[email, userName, password, '', '', 'active', timestamp, '']];\n\n  const request = {\n    spreadsheetId: SPREADSHEET_ID,\n    range: `${SHEET_NAME}!A1`, // Appends to the first empty row of the sheet\n    valueInputOption: 'USER_ENTERED',\n    resource: {\n      values,\n    },\n  };\n\n  try {\n    const response = await sheets.spreadsheets.values.append(request);\n    console.log('Appended to sheet:', response.data);\n    return response.data;\n  } catch (err) {\n    console.error('The API returned an error: ' + err);\n    throw new Error('Failed to append data to Google Sheet.');\n  }\n}\n\nexport async function getAllUsers() {\n    try {\n        const response = await sheets.spreadsheets.values.get({\n            spreadsheetId: SPREADSHEET_ID,\n            range: SHEET_NAME,\n        });\n\n        const rows = response.data.values;\n        if (!rows || rows.length === 0) {\n            return [];\n        }\n\n        const header = rows[0];\n        const emailIndex = header.indexOf('emailAddress');\n        const userNameIndex = header.indexOf('userName');\n        const pwdIndex = header.indexOf('pwd');\n        const databaseIDIndex = header.indexOf('databaseID');\n\n        if (userNameIndex === -1 || pwdIndex === -1 || databaseIDIndex === -1) {\n            throw new Error('Could not find required columns (userName, pwd, databaseID) in the sheet.');\n        }\n\n        return rows.slice(1).map(row => ({\n            emailAddress: row[emailIndex],\n            userName: row[userNameIndex],\n            password: row[pwdIndex],\n            databaseID: row[databaseIDIndex],\n        }));\n\n    } catch (err) {\n        console.error('The API returned an error: ' + err);\n        throw new Error('Failed to retrieve data from Google Sheet.');\n    }\n}\n\n\nexport async function getAllHeaderDataFromSheet(databaseId: string): Promise<HeaderData[]> {\n  try {\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId: databaseId,\n      range: 'tpList!A:Q', // Fetch all rows in the specified columns\n    });\n\n    const rows = response.data.values;\n    if (!rows || rows.length < 2) {\n      console.log('No data found in the user sheet.');\n      return [];\n    }\n\n    const header = rows[0];\n    const dataRows = rows.slice(1);\n\n    const parsedData = dataRows.map(dataRow => {\n       const data = header.reduce((obj, key, index) => {\n        const lowerCaseKey = key.charAt(0).toLowerCase() + key.slice(1);\n        obj[lowerCaseKey] = dataRow[index] || ''; // Ensure empty string for missing cells\n        return obj;\n      }, {} as {[key: string]: string});\n      \n      return HeaderDataSchema.parse(data);\n    });\n    \n    return parsedData;\n  } catch (err) {\n    console.error(`API returned an error for sheet ${databaseId}: ` + err);\n    throw new Error(`Failed to retrieve data from Google Sheet ID: ${databaseId}. Ensure it's shared with the service account.`);\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport { ExcelErrorDetectionOutputSchema, type ExcelErrorDetectionOutput, type HeaderData } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, type SignupData, type LoginData } from './googlesheets';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    databaseId: z.string().nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    await appendUserToSheet(userData);\n    return { success: true, error: null, databaseId: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, databaseId: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.password === credentials.password);\n\n        if (user && user.databaseID) {\n            return { success: true, error: null, databaseId: user.databaseID };\n        } else if (user && !user.databaseID) {\n            return { success: false, error: 'User does not have a database configured.', databaseId: null };\n        }\n        \n        else {\n            return { success: false, error: 'Invalid username or password.', databaseId: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, databaseId: null };\n    }\n}\n\n\nconst HeaderDataResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(z.custom<HeaderData>()).nullable(),\n  error: z.string().nullable(),\n});\n\ntype HeaderDataResult = z.infer<typeof HeaderDataResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<HeaderDataResult> {\n  if (!databaseId) {\n    return { success: false, data: null, error: 'Database ID is required.' };\n  }\n\n  try {\n    const data = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data, error: null };\n  } catch (e) {\n    console.error(`Error fetching header data for db ${databaseId}:`, e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 701, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/header/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getUserHeaderData as '40b2e571cd0cb75ab827e90db3316b90dd461882f2'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 759, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/header/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/header/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/header/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 773, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/header/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/header/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/header/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","debugId":null}},
    {"offset": {"line": 787, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}