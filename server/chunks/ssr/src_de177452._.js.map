{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,mKAAA,CAAA,OAAqB;AAErC,MAAM,iBAAiB,mKAAA,CAAA,UAAwB;AAE/C,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC,mKAAA,CAAA,SAAuB;kBACtB,cAAA,8OAAC,mKAAA,CAAA,UAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,mKAAA,CAAA,UAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/command.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAEA;AAEA;AACA;AAEA;AACA;AARA;;;;;;;AAUA,MAAM,wBAAU,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG7B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sIAAA,CAAA,UAAgB;QACf,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,6FACA;QAED,GAAG,KAAK;;;;;;AAGb,QAAQ,WAAW,GAAG,sIAAA,CAAA,UAAgB,CAAC,WAAW;AAIlD,MAAM,gBAAgB,CAAC,EAAE,QAAQ,EAAE,GAAG,OAA2B;IAC/D,qBACE,8OAAC,kIAAA,CAAA,SAAM;QAAE,GAAG,KAAK;kBACf,cAAA,8OAAC,kIAAA,CAAA,gBAAa;YAAC,WAAU;sBACvB,cAAA,8OAAC;gBAAQ,WAAU;0BAChB;;;;;;;;;;;;;;;;AAKX;AAEA,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;QAAkC,sBAAmB;;0BAClE,8OAAC,sMAAA,CAAA,SAAM;gBAAC,WAAU;;;;;;0BAClB,8OAAC,sIAAA,CAAA,UAAgB,CAAC,KAAK;gBACrB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;gBAED,GAAG,KAAK;;;;;;;;;;;;AAKf,aAAa,WAAW,GAAG,sIAAA,CAAA,UAAgB,CAAC,KAAK,CAAC,WAAW;AAE7D,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sIAAA,CAAA,UAAgB,CAAC,IAAI;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mDAAmD;QAChE,GAAG,KAAK;;;;;;AAIb,YAAY,WAAW,GAAG,sIAAA,CAAA,UAAgB,CAAC,IAAI,CAAC,WAAW;AAE3D,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,OAAO,oBACR,8OAAC,sIAAA,CAAA,UAAgB,CAAC,KAAK;QACrB,KAAK;QACL,WAAU;QACT,GAAG,KAAK;;;;;;AAIb,aAAa,WAAW,GAAG,sIAAA,CAAA,UAAgB,CAAC,KAAK,CAAC,WAAW;AAE7D,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sIAAA,CAAA,UAAgB,CAAC,KAAK;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0NACA;QAED,GAAG,KAAK;;;;;;AAIb,aAAa,WAAW,GAAG,sIAAA,CAAA,UAAgB,CAAC,KAAK,CAAC,WAAW;AAE7D,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sIAAA,CAAA,UAAgB,CAAC,SAAS;QACzB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,wBAAwB;QACrC,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG,sIAAA,CAAA,UAAgB,CAAC,SAAS,CAAC,WAAW;AAErE,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sIAAA,CAAA,UAAgB,CAAC,IAAI;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2OACA;QAED,GAAG,KAAK;;;;;;AAIb,YAAY,WAAW,GAAG,sIAAA,CAAA,UAAgB,CAAC,IAAI,CAAC,WAAW;AAE3D,MAAM,kBAAkB,CAAC,EACvB,SAAS,EACT,GAAG,OACmC;IACtC,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;AAGf;AACA,gBAAgB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/profile-selector.tsx"],"sourcesContent":["\n'use client';\n\nimport * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport type { TaxProfile } from '@/lib/schemas';\nimport { PlusCircle, Check, ChevronsUpDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface ProfileSelectorProps {\n  profiles: TaxProfile[];\n  onProfileSelect: (tin: string) => void;\n  onNewProfile: () => void;\n  selectedProfile: string;\n}\n\nexport function ProfileSelector({ profiles, onProfileSelect, onNewProfile, selectedProfile }: ProfileSelectorProps) {\n  const [open, setOpen] = React.useState(false);\n\n  const getDisplayName = (profile: TaxProfile) => {\n    return profile.entityType === 'Individual' ? profile.tradeName : profile.companyName;\n  };\n\n  const sortedProfiles = React.useMemo(() => {\n    return [...profiles].sort((a, b) => {\n        const nameA = getDisplayName(a)?.toLowerCase() || '';\n        const nameB = getDisplayName(b)?.toLowerCase() || '';\n        if (nameA < nameB) return -1;\n        if (nameA > nameB) return 1;\n        return 0;\n    });\n  }, [profiles]);\n\n  const selectedValue = selectedProfile\n    ? `${getDisplayName(profiles.find(p => p.tpTIN === selectedProfile)!)} (${selectedProfile})`\n    : \"Select a profile...\";\n\n  return (\n    <div className=\"flex flex-col sm:flex-row items-center gap-4\">\n      <div className=\"w-full sm:w-auto sm:flex-1\">\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              role=\"combobox\"\n              aria-expanded={open}\n              className=\"w-full justify-between h-auto min-h-[2.5rem]\"\n            >\n              <span className=\"text-left whitespace-normal\">{selectedValue}</span>\n              <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent align=\"start\" className=\"w-[--radix-popover-trigger-width] p-0\">\n            <Command>\n              <CommandInput placeholder=\"Search profile by name or TIN...\" />\n              <CommandList>\n                <CommandEmpty>No profile found.</CommandEmpty>\n                <CommandGroup>\n                  {sortedProfiles.map((profile) => (\n                    <CommandItem\n                      key={profile.tpTIN}\n                      value={`${getDisplayName(profile)} ${profile.tpTIN}`}\n                      onSelect={() => {\n                        onProfileSelect(profile.tpTIN);\n                        setOpen(false);\n                      }}\n                      className=\"flex items-start\"\n                    >\n                      <Check\n                        className={cn(\n                          \"mr-2 h-4 w-4 mt-1 shrink-0\",\n                          selectedProfile === profile.tpTIN ? \"opacity-100\" : \"opacity-0\"\n                        )}\n                      />\n                      <div>\n                        {getDisplayName(profile)} ({profile.tpTIN})\n                      </div>\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n      </div>\n      <Button onClick={onNewProfile} variant=\"outline\" className=\"w-full sm:w-auto\">\n        <PlusCircle className=\"mr-2 h-4 w-4\" />\n        New Profile\n      </Button>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AARA;;;;;;;;AAiBO,SAAS,gBAAgB,EAAE,QAAQ,EAAE,eAAe,EAAE,YAAY,EAAE,eAAe,EAAwB;IAChH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAc,AAAD,EAAE;IAEvC,MAAM,iBAAiB,CAAC;QACtB,OAAO,QAAQ,UAAU,KAAK,eAAe,QAAQ,SAAS,GAAG,QAAQ,WAAW;IACtF;IAEA,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,UAAa,AAAD,EAAE;QACnC,OAAO;eAAI;SAAS,CAAC,IAAI,CAAC,CAAC,GAAG;YAC1B,MAAM,QAAQ,eAAe,IAAI,iBAAiB;YAClD,MAAM,QAAQ,eAAe,IAAI,iBAAiB;YAClD,IAAI,QAAQ,OAAO,OAAO,CAAC;YAC3B,IAAI,QAAQ,OAAO,OAAO;YAC1B,OAAO;QACX;IACF,GAAG;QAAC;KAAS;IAEb,MAAM,gBAAgB,kBAClB,GAAG,eAAe,SAAS,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,kBAAmB,EAAE,EAAE,gBAAgB,CAAC,CAAC,GAC1F;IAEJ,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,mIAAA,CAAA,UAAO;oBAAC,MAAM;oBAAM,cAAc;;sCACjC,8OAAC,mIAAA,CAAA,iBAAc;4BAAC,OAAO;sCACrB,cAAA,8OAAC,kIAAA,CAAA,SAAM;gCACL,SAAQ;gCACR,MAAK;gCACL,iBAAe;gCACf,WAAU;;kDAEV,8OAAC;wCAAK,WAAU;kDAA+B;;;;;;kDAC/C,8OAAC,8NAAA,CAAA,iBAAc;wCAAC,WAAU;;;;;;;;;;;;;;;;;sCAG9B,8OAAC,mIAAA,CAAA,iBAAc;4BAAC,OAAM;4BAAQ,WAAU;sCACtC,cAAA,8OAAC,mIAAA,CAAA,UAAO;;kDACN,8OAAC,mIAAA,CAAA,eAAY;wCAAC,aAAY;;;;;;kDAC1B,8OAAC,mIAAA,CAAA,cAAW;;0DACV,8OAAC,mIAAA,CAAA,eAAY;0DAAC;;;;;;0DACd,8OAAC,mIAAA,CAAA,eAAY;0DACV,eAAe,GAAG,CAAC,CAAC,wBACnB,8OAAC,mIAAA,CAAA,cAAW;wDAEV,OAAO,GAAG,eAAe,SAAS,CAAC,EAAE,QAAQ,KAAK,EAAE;wDACpD,UAAU;4DACR,gBAAgB,QAAQ,KAAK;4DAC7B,QAAQ;wDACV;wDACA,WAAU;;0EAEV,8OAAC,oMAAA,CAAA,QAAK;gEACJ,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8BACA,oBAAoB,QAAQ,KAAK,GAAG,gBAAgB;;;;;;0EAGxD,8OAAC;;oEACE,eAAe;oEAAS;oEAAG,QAAQ,KAAK;oEAAC;;;;;;;;uDAfvC,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAyBlC,8OAAC,kIAAA,CAAA,SAAM;gBAAC,SAAS;gBAAc,SAAQ;gBAAU,WAAU;;kCACzD,8OAAC,kNAAA,CAAA,aAAU;wBAAC,WAAU;;;;;;oBAAiB;;;;;;;;;;;;;AAK/C","debugId":null}},
    {"offset": {"line": 616, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 648, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 840, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/accordion.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,YAAY,qKAAA,CAAA,OAAuB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,qKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QACzB,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG;AAE5B,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,qKAAA,CAAA,SAAyB;QAAC,WAAU;kBACnC,cAAA,8OAAC,qKAAA,CAAA,UAA0B;YACzB,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,gIACA;YAED,GAAG,KAAK;;gBAER;8BACD,8OAAC,oNAAA,CAAA,cAAW;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI7B,iBAAiB,WAAW,GAAG,qKAAA,CAAA,UAA0B,CAAC,WAAW;AAErE,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,qKAAA,CAAA,UAA0B;QACzB,KAAK;QACL,WAAU;QACT,GAAG,KAAK;kBAET,cAAA,8OAAC;YAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,aAAa;sBAAa;;;;;;;;;;;AAIjD,iBAAiB,WAAW,GAAG,qKAAA,CAAA,UAA0B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 920, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/radio-group.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC,0KAAA,CAAA,OAAwB;QACvB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;QAC3B,GAAG,KAAK;QACT,KAAK;;;;;;AAGX;AACA,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4OACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,YAA6B;YAAC,WAAU;sBACvC,cAAA,8OAAC,sMAAA,CAAA,SAAM;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI1B;AACA,eAAe,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 980, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/generation-card.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useCallback, type ChangeEvent, type DragEvent } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { UploadCloud, File as FileIcon, X, Loader2, AlertTriangle, FileUp, Upload } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useToast } from '@/hooks/use-toast';\nimport { Label } from './ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from './ui/accordion';\nimport { RadioGroup, RadioGroupItem } from './ui/radio-group';\nimport { Input } from './ui/input';\n\ninterface GenerationCardProps {\n  title: string;\n  description: string;\n  buttonText: string;\n  onGenerate: (file: File, ...args: any[]) => Promise<void>;\n  icon: React.ReactNode;\n  isDatGeneration: boolean;\n  reminders?: string[];\n}\n\nconst months = [\n    { name: \"January\", value: \"01\" },\n    { name: \"February\", value: \"02\" },\n    { name: \"March\", value: \"03\" },\n    { name: \"April\", value: \"04\" },\n    { name: \"May\", value: \"05\" },\n    { name: \"June\", value: \"06\" },\n    { name: \"July\", value: \"07\" },\n    { name: \"August\", value: \"08\" },\n    { name: \"September\", value: \"09\" },\n    { name: \"October\", value: \"10\" },\n    { name: \"November\", value: \"11\" },\n    { name: \"December\", value: \"12\" }\n];\n\nconst reportTypes = [\n    \"Summary of Sales (SLS)\",\n    \"Summary of Purchases (SLP)\",\n    \"Summary of Importations (SLI)\",\n    \"Summary Alphalist of Withholding Tax (SAWT)\",\n    \"1601-EQ (Schedule 1 and 2)\",\n    \"1601-FQ (Schedule 1, 2, and 3)\",\n    \"1604-CF (Schedule 3 and 4)\",\n    \"1604-E (Schedule 4)\",\n    \"1604-F (Schedule 5, 6, and 7)\",\n];\n\nconst sawtSchedules = [\n    \"1700\", \"1702\", \"2550Q\",\n    \"1701\", \"1702Q\", \"2551M\",\n    \"1701Q\", \"2550M\", \"2553\"\n];\n\nconst currentYear = new Date().getFullYear();\nconst years = Array.from({ length: currentYear - 1999 }, (_, i) => (currentYear - i).toString());\n\nexport function GenerationCard({ title, description, buttonText, onGenerate, icon, isDatGeneration, reminders }: GenerationCardProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const { toast } = useToast();\n\n  // DAT Gen State\n  const [month, setMonth] = useState(months[0].value);\n  const [year, setYear] = useState(currentYear.toString());\n  const [reportType, setReportType] = useState(reportTypes[0]);\n  const [sawtSchedule, setSawtSchedule] = useState(sawtSchedules[0]);\n\n  // Cert Gen State\n  const [signatoryName, setSignatoryName] = useState('');\n  const [signatoryTIN, setSignatoryTIN] = useState('');\n  const [signatoryPosition, setSignatoryPosition] = useState('');\n  const [signatureFile, setSignatureFile] = useState<File | null>(null);\n\n\n  const handleFileChange = (files: FileList | null) => {\n    const file = files?.[0];\n    if (file) {\n      if (file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || file.type === 'application/vnd.ms-excel') {\n        setSelectedFile(file);\n      } else {\n        toast({\n          title: 'Invalid File Type',\n          description: 'Please upload a valid Excel file (.xlsx, .xls).',\n          variant: 'destructive',\n        });\n      }\n    }\n  };\n  \n  const handleInputElementChange = (e: ChangeEvent<HTMLInputElement>) => {\n    handleFileChange(e.target.files);\n    e.target.value = ''; // Allow re-uploading the same file\n  };\n\n  const handleSignatureFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n        if (file.type.startsWith('image/')) {\n            setSignatureFile(file);\n        } else {\n            toast({\n                title: 'Invalid File Type',\n                description: 'Please upload a valid image file for the signature.',\n                variant: 'destructive',\n            });\n        }\n    }\n    e.target.value = '';\n  };\n\n\n  const handleDragEnter = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = (e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(false);\n  };\n\n  const handleDrop = useCallback((e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(false);\n    handleFileChange(e.dataTransfer.files);\n  }, []);\n\n  const handleGenerateClick = async () => {\n    if (!selectedFile) {\n        toast({ title: 'No file selected', description: 'Please upload a file to generate.', variant: 'destructive'});\n        return;\n    };\n    setIsGenerating(true);\n    \n    try {\n        if (isDatGeneration) {\n            await onGenerate(selectedFile, month, year, reportType, sawtSchedule);\n        } else {\n            await onGenerate(selectedFile, signatoryName, signatoryTIN, signatoryPosition, signatureFile);\n        }\n    } catch (error) {\n         // Toast is handled by the calling component\n    } finally {\n        setIsGenerating(false);\n    }\n  }\n\n  const clearFile = () => {\n    setSelectedFile(null);\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex-shrink-0 w-10 h-10 bg-primary/10 text-primary rounded-lg flex items-center justify-center\">\n            {icon}\n          </div>\n          <div>\n            <CardTitle>{title}</CardTitle>\n            <CardDescription>{description}</CardDescription>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {isDatGeneration ? (\n            <div className=\"space-y-4\">\n                 <div className=\"space-y-2\">\n                    <Label>Reporting Period</Label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                        <Select value={month} onValueChange={setMonth}>\n                            <SelectTrigger><SelectValue /></SelectTrigger>\n                            <SelectContent>\n                                {months.map(m => <SelectItem key={m.value} value={m.value}>{m.name}</SelectItem>)}\n                            </SelectContent>\n                        </Select>\n                        <Select value={year} onValueChange={setYear}>\n                            <SelectTrigger><SelectValue /></SelectTrigger>\n                            <SelectContent>\n                                {years.map(y => <SelectItem key={y} value={y}>{y}</SelectItem>)}\n                            </SelectContent>\n                        </Select>\n                    </div>\n                </div>\n                 <div className=\"space-y-2\">\n                    <Label>Reporting Type</Label>\n                    <Select value={reportType} onValueChange={setReportType}>\n                        <SelectTrigger><SelectValue /></SelectTrigger>\n                        <SelectContent>\n                            {reportTypes.map(rt => <SelectItem key={rt} value={rt}>{rt}</SelectItem>)}\n                        </SelectContent>\n                    </Select>\n                </div>\n                {reportType === \"Summary Alphalist of Withholding Tax (SAWT)\" && (\n                  <div className=\"space-y-2 animate-in fade-in-50 duration-300\">\n                    <Label>Schedules</Label>\n                     <div className=\"pl-8\">\n                        <RadioGroup \n                            value={sawtSchedule} \n                            onValueChange={setSawtSchedule}\n                            className=\"grid grid-cols-3 gap-x-4 gap-y-2\"\n                        >\n                            {sawtSchedules.map(schedule => (\n                                <div key={schedule} className=\"flex items-center space-x-2\">\n                                    <RadioGroupItem value={schedule} id={`r-${schedule}`} />\n                                    <Label htmlFor={`r-${schedule}`} className=\"font-normal\">{schedule}</Label>\n                                </div>\n                            ))}\n                        </RadioGroup>\n                    </div>\n                  </div>\n                )}\n            </div>\n        ) : (\n            <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"signatory-name\">Name</Label>\n                        <Input id=\"signatory-name\" value={signatoryName} onChange={e => setSignatoryName(e.target.value)} maxLength={30} />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"signatory-tin\">TIN</Label>\n                        <Input \n                          id=\"signatory-tin\" \n                          value={signatoryTIN} \n                          onChange={e => setSignatoryTIN(e.target.value.replace(/[^0-9]/g, ''))} \n                          maxLength={9}\n                          pattern=\"[0-9]*\"\n                        />\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"signatory-position\">Position</Label>\n                        <Input id=\"signatory-position\" value={signatoryPosition} onChange={e => setSignatoryPosition(e.target.value)} maxLength={30} />\n                    </div>\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"signature-file\">Signature</Label>\n                        <div className=\"relative\">\n                            <Input id=\"signature-file\" type=\"file\" accept=\"image/*\" onChange={handleSignatureFileChange} className=\"hidden\" />\n                            <label htmlFor=\"signature-file\" className={cn(\n                                \"cursor-pointer h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background\",\n                                \"flex items-center gap-2 text-muted-foreground\",\n                                \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\"\n                            )}>\n                                {!signatureFile ? (\n                                    <>\n                                        <Upload className=\"h-4 w-4\" />\n                                        <span>Upload Signature</span>\n                                    </>\n                                ) : (\n                                    <div className=\"flex items-center gap-2 w-full\">\n                                        <FileIcon className=\"h-4 w-4 flex-shrink-0\" />\n                                        <span className=\"flex-1 truncate\">{signatureFile.name}</span>\n                                        <Button\n                                            variant=\"ghost\"\n                                            size=\"icon\"\n                                            className=\"h-6 w-6 shrink-0\"\n                                            onClick={(e) => {\n                                                e.preventDefault();\n                                                e.stopPropagation();\n                                                setSignatureFile(null)\n                                            }}\n                                        >\n                                            <X className=\"h-4 w-4\" />\n                                            <span className=\"sr-only\">Clear signature</span>\n                                        </Button>\n                                    </div>\n                                )}\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )}\n\n\n        {selectedFile ? (\n            <div className=\"relative flex items-center p-3 border-2 border-dashed rounded-lg border-primary/50 bg-primary/10\">\n                <FileIcon className=\"w-8 h-8 mr-3 text-primary flex-shrink-0\" />\n                <div className=\"flex-grow overflow-hidden\">\n                    <p className=\"font-semibold truncate\">{selectedFile.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                    {(selectedFile.size / 1024).toFixed(2)} KB\n                    </p>\n                </div>\n                <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={clearFile}\n                    className=\"flex-shrink-0 w-8 h-8\"\n                    disabled={isGenerating}\n                >\n                    <X className=\"w-5 h-5\" />\n                    <span className=\"sr-only\">Clear file</span>\n                </Button>\n            </div>\n        ) : (\n            <div\n                className={cn(\n                    'w-full p-6 border-2 border-dashed rounded-lg text-center transition-colors duration-300',\n                    isDragging ? 'border-primary bg-primary/10' : 'border-border hover:border-primary/50'\n                )}\n                onDragEnter={handleDragEnter}\n                onDragOver={handleDragEnter}\n                onDragLeave={handleDragLeave}\n                onDrop={handleDrop}\n            >\n                <input\n                    type=\"file\"\n                    id={`file-upload-${title.replace(/\\s+/g, '-')}`}\n                    className=\"hidden\"\n                    onChange={handleInputElementChange}\n                    accept=\".xlsx, .xls\"\n                    disabled={isGenerating}\n                />\n                <label htmlFor={`file-upload-${title.replace(/\\s+/g, '-')}`} className=\"cursor-pointer space-y-2 flex flex-col items-center\">\n                    <UploadCloud className=\"w-10 h-10 text-muted-foreground\" />\n                     <div className=\"space-y-1\">\n                        <p className=\"font-semibold\">Drag & drop or <span className=\"text-primary\">browse</span></p>\n                        <p className=\"text-xs text-muted-foreground\">Supports .xlsx, .xls</p>\n                    </div>\n                </label>\n            </div>\n        )}\n\n        <Button className=\"w-full\" onClick={handleGenerateClick} disabled={isGenerating || !selectedFile}>\n          {isGenerating && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n          {buttonText}\n        </Button>\n        \n        {reminders && reminders.length > 0 && (\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            <AccordionItem value=\"reminders\">\n              <AccordionTrigger className=\"text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"h-4 w-4 text-primary\" />\n                  Important Reminders\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <ol className=\"space-y-3 list-decimal list-outside pl-5 text-xs text-muted-foreground\">\n                  {reminders.map((reminder, index) => (\n                    <li key={index} className=\"pl-1\">{reminder}</li>\n                  ))}\n                </ol>\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1916, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/tax-profiles-skeleton.tsx"],"sourcesContent":["\n'use client';\n\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nexport function TaxProfilesSkeleton() {\n  return (\n    <div className=\"space-y-2\">\n      <Skeleton className=\"h-10 w-full\" />\n      <Skeleton className=\"h-10 w-24\" />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAFA;;;AAKO,SAAS;IACd,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,oIAAA,CAAA,WAAQ;gBAAC,WAAU;;;;;;0BACpB,8OAAC,oIAAA,CAAA,WAAQ;gBAAC,WAAU;;;;;;;;;;;;AAG1B","debugId":null}},
    {"offset": {"line": 1955, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert.tsx"],"sourcesContent":["\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2019, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, getFileMetadata } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\",\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    const datFileName = `${tin}S${month}${year}.DAT`;\n            \n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string): Promise<DatFileResult> {\n    const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    // Determine filename first to check for existence\n    let datFileName = '';\n    let reportTypeShort = '';\n    if (reportType.includes('Sales')) {\n        datFileName = `${profile.tpTIN}S${month}${year}.DAT`;\n        reportTypeShort = 'Sales';\n    } else if (reportType.includes('Purchases')) {\n        datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n        reportTypeShort = 'Purchases';\n    } else if (reportType.includes('1601-EQ')) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n        reportTypeShort = '1601EQ';\n    } else if (reportType.includes('SAWT') && schedule) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n        reportTypeShort = `SAWT_${schedule}`;\n    } else {\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    const fileExists = await checkFileExists(datFileName, folderId, [profile.tpTIN, reportTypeShort, year]);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    // If file doesn't exist, proceed with generation\n    if (reportType === \"Summary of Sales (SLS)\") {\n        return await generateSalesDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary of Purchases (SLP)\") {\n         const formData = new FormData();\n         formData.append('file', file);\n         formData.append('profile', JSON.stringify(profile));\n         return await validateExcelForPurchases(formData);\n    }\n    if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n        return await generate1601EQDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n         if (!schedule) {\n            return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n        }\n        return await validateAndProcessSAWT(file, schedule, profile, month, year);\n    }\n    \n    return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n}\n\nexport async function uploadDatFileAndUpdateCache(\n    fileName: string, \n    fileContent: string, \n    folderId: string, \n    profile: TaxProfile,\n    reportTypeShort: string,\n    year: string,\n    overwrite: boolean\n) {\n    'use server';\n    try {\n        const drivePath = [profile.tpTIN, reportTypeShort, year];\n        console.log(`[BG WORK] Starting upload for ${fileName} to path: ${drivePath.join('/')}`);\n        await uploadFileToDrive(fileName, fileContent, folderId, drivePath, overwrite);\n        console.log(`[BG WORK] Finished upload for ${fileName}.`);\n        // The cache is not updated here directly. The client should poll or re-fetch.\n    } catch (error) {\n        console.error(`[BG WORK] Error in background upload for ${fileName}:`, error);\n    }\n}\n\n\nexport async function overwriteDatFile(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string, processedData?: any[][], nonCreditableInputTax?: number): Promise<DatFileResult> {\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year);\n        }\n         if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedData || nonCreditableInputTax === undefined) {\n                return { success: false, error: 'Processed data is missing for purchase overwrite.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             return await generate1601EQDatFile(file, profile, month, year);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                 return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await validateAndProcessSAWT(file, schedule, profile, month, year);\n        }\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported for overwrite.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { success: false, error: `Overwrite failed: ${errorMessage}`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n\n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(processedData: any[][], profile: TaxProfile, month: string, year: string, nonCreditableInputTax: number): Promise<DatFileResult> {\n     const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    const datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n    const reportTypeShort = 'Purchases';\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const files = await listDatFiles(folderId);\n        return { success: true, files, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(file: File, schedule: string, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    \n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    \n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n"],"names":[],"mappings":";;;;;;IAsyBsB,yBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2032, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, getFileMetadata } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\",\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    const datFileName = `${tin}S${month}${year}.DAT`;\n            \n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string): Promise<DatFileResult> {\n    const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    // Determine filename first to check for existence\n    let datFileName = '';\n    let reportTypeShort = '';\n    if (reportType.includes('Sales')) {\n        datFileName = `${profile.tpTIN}S${month}${year}.DAT`;\n        reportTypeShort = 'Sales';\n    } else if (reportType.includes('Purchases')) {\n        datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n        reportTypeShort = 'Purchases';\n    } else if (reportType.includes('1601-EQ')) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n        reportTypeShort = '1601EQ';\n    } else if (reportType.includes('SAWT') && schedule) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n        reportTypeShort = `SAWT_${schedule}`;\n    } else {\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    const fileExists = await checkFileExists(datFileName, folderId, [profile.tpTIN, reportTypeShort, year]);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    // If file doesn't exist, proceed with generation\n    if (reportType === \"Summary of Sales (SLS)\") {\n        return await generateSalesDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary of Purchases (SLP)\") {\n         const formData = new FormData();\n         formData.append('file', file);\n         formData.append('profile', JSON.stringify(profile));\n         return await validateExcelForPurchases(formData);\n    }\n    if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n        return await generate1601EQDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n         if (!schedule) {\n            return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n        }\n        return await validateAndProcessSAWT(file, schedule, profile, month, year);\n    }\n    \n    return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n}\n\nexport async function uploadDatFileAndUpdateCache(\n    fileName: string, \n    fileContent: string, \n    folderId: string, \n    profile: TaxProfile,\n    reportTypeShort: string,\n    year: string,\n    overwrite: boolean\n) {\n    'use server';\n    try {\n        const drivePath = [profile.tpTIN, reportTypeShort, year];\n        console.log(`[BG WORK] Starting upload for ${fileName} to path: ${drivePath.join('/')}`);\n        await uploadFileToDrive(fileName, fileContent, folderId, drivePath, overwrite);\n        console.log(`[BG WORK] Finished upload for ${fileName}.`);\n        // The cache is not updated here directly. The client should poll or re-fetch.\n    } catch (error) {\n        console.error(`[BG WORK] Error in background upload for ${fileName}:`, error);\n    }\n}\n\n\nexport async function overwriteDatFile(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string, processedData?: any[][], nonCreditableInputTax?: number): Promise<DatFileResult> {\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year);\n        }\n         if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedData || nonCreditableInputTax === undefined) {\n                return { success: false, error: 'Processed data is missing for purchase overwrite.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             return await generate1601EQDatFile(file, profile, month, year);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                 return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await validateAndProcessSAWT(file, schedule, profile, month, year);\n        }\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported for overwrite.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { success: false, error: `Overwrite failed: ${errorMessage}`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n\n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(processedData: any[][], profile: TaxProfile, month: string, year: string, nonCreditableInputTax: number): Promise<DatFileResult> {\n     const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    const datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n    const reportTypeShort = 'Purchases';\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const files = await listDatFiles(folderId);\n        return { success: true, files, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(file: File, schedule: string, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    \n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    \n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n"],"names":[],"mappings":";;;;;;IAskBsB,oBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2045, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, getFileMetadata } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\",\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    const datFileName = `${tin}S${month}${year}.DAT`;\n            \n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string): Promise<DatFileResult> {\n    const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    // Determine filename first to check for existence\n    let datFileName = '';\n    let reportTypeShort = '';\n    if (reportType.includes('Sales')) {\n        datFileName = `${profile.tpTIN}S${month}${year}.DAT`;\n        reportTypeShort = 'Sales';\n    } else if (reportType.includes('Purchases')) {\n        datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n        reportTypeShort = 'Purchases';\n    } else if (reportType.includes('1601-EQ')) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n        reportTypeShort = '1601EQ';\n    } else if (reportType.includes('SAWT') && schedule) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n        reportTypeShort = `SAWT_${schedule}`;\n    } else {\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    const fileExists = await checkFileExists(datFileName, folderId, [profile.tpTIN, reportTypeShort, year]);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    // If file doesn't exist, proceed with generation\n    if (reportType === \"Summary of Sales (SLS)\") {\n        return await generateSalesDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary of Purchases (SLP)\") {\n         const formData = new FormData();\n         formData.append('file', file);\n         formData.append('profile', JSON.stringify(profile));\n         return await validateExcelForPurchases(formData);\n    }\n    if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n        return await generate1601EQDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n         if (!schedule) {\n            return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n        }\n        return await validateAndProcessSAWT(file, schedule, profile, month, year);\n    }\n    \n    return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n}\n\nexport async function uploadDatFileAndUpdateCache(\n    fileName: string, \n    fileContent: string, \n    folderId: string, \n    profile: TaxProfile,\n    reportTypeShort: string,\n    year: string,\n    overwrite: boolean\n) {\n    'use server';\n    try {\n        const drivePath = [profile.tpTIN, reportTypeShort, year];\n        console.log(`[BG WORK] Starting upload for ${fileName} to path: ${drivePath.join('/')}`);\n        await uploadFileToDrive(fileName, fileContent, folderId, drivePath, overwrite);\n        console.log(`[BG WORK] Finished upload for ${fileName}.`);\n        // The cache is not updated here directly. The client should poll or re-fetch.\n    } catch (error) {\n        console.error(`[BG WORK] Error in background upload for ${fileName}:`, error);\n    }\n}\n\n\nexport async function overwriteDatFile(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string, processedData?: any[][], nonCreditableInputTax?: number): Promise<DatFileResult> {\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year);\n        }\n         if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedData || nonCreditableInputTax === undefined) {\n                return { success: false, error: 'Processed data is missing for purchase overwrite.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             return await generate1601EQDatFile(file, profile, month, year);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                 return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await validateAndProcessSAWT(file, schedule, profile, month, year);\n        }\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported for overwrite.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { success: false, error: `Overwrite failed: ${errorMessage}`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n\n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(processedData: any[][], profile: TaxProfile, month: string, year: string, nonCreditableInputTax: number): Promise<DatFileResult> {\n     const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    const datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n    const reportTypeShort = 'Purchases';\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const files = await listDatFiles(folderId);\n        return { success: true, files, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(file: File, schedule: string, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    \n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    \n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n"],"names":[],"mappings":";;;;;;IA8qBsB,4BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2058, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, getFileMetadata } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\",\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    const datFileName = `${tin}S${month}${year}.DAT`;\n            \n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string): Promise<DatFileResult> {\n    const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    // Determine filename first to check for existence\n    let datFileName = '';\n    let reportTypeShort = '';\n    if (reportType.includes('Sales')) {\n        datFileName = `${profile.tpTIN}S${month}${year}.DAT`;\n        reportTypeShort = 'Sales';\n    } else if (reportType.includes('Purchases')) {\n        datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n        reportTypeShort = 'Purchases';\n    } else if (reportType.includes('1601-EQ')) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n        reportTypeShort = '1601EQ';\n    } else if (reportType.includes('SAWT') && schedule) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n        reportTypeShort = `SAWT_${schedule}`;\n    } else {\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    const fileExists = await checkFileExists(datFileName, folderId, [profile.tpTIN, reportTypeShort, year]);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    // If file doesn't exist, proceed with generation\n    if (reportType === \"Summary of Sales (SLS)\") {\n        return await generateSalesDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary of Purchases (SLP)\") {\n         const formData = new FormData();\n         formData.append('file', file);\n         formData.append('profile', JSON.stringify(profile));\n         return await validateExcelForPurchases(formData);\n    }\n    if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n        return await generate1601EQDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n         if (!schedule) {\n            return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n        }\n        return await validateAndProcessSAWT(file, schedule, profile, month, year);\n    }\n    \n    return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n}\n\nexport async function uploadDatFileAndUpdateCache(\n    fileName: string, \n    fileContent: string, \n    folderId: string, \n    profile: TaxProfile,\n    reportTypeShort: string,\n    year: string,\n    overwrite: boolean\n) {\n    'use server';\n    try {\n        const drivePath = [profile.tpTIN, reportTypeShort, year];\n        console.log(`[BG WORK] Starting upload for ${fileName} to path: ${drivePath.join('/')}`);\n        await uploadFileToDrive(fileName, fileContent, folderId, drivePath, overwrite);\n        console.log(`[BG WORK] Finished upload for ${fileName}.`);\n        // The cache is not updated here directly. The client should poll or re-fetch.\n    } catch (error) {\n        console.error(`[BG WORK] Error in background upload for ${fileName}:`, error);\n    }\n}\n\n\nexport async function overwriteDatFile(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string, processedData?: any[][], nonCreditableInputTax?: number): Promise<DatFileResult> {\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year);\n        }\n         if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedData || nonCreditableInputTax === undefined) {\n                return { success: false, error: 'Processed data is missing for purchase overwrite.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             return await generate1601EQDatFile(file, profile, month, year);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                 return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await validateAndProcessSAWT(file, schedule, profile, month, year);\n        }\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported for overwrite.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { success: false, error: `Overwrite failed: ${errorMessage}`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n\n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(processedData: any[][], profile: TaxProfile, month: string, year: string, nonCreditableInputTax: number): Promise<DatFileResult> {\n     const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    const datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n    const reportTypeShort = 'Purchases';\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const files = await listDatFiles(folderId);\n        return { success: true, files, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(file: File, schedule: string, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    \n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    \n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n"],"names":[],"mappings":";;;;;;IAipBsB,mBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2071, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, getFileMetadata } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\",\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    const datFileName = `${tin}S${month}${year}.DAT`;\n            \n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string): Promise<DatFileResult> {\n    const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    // Determine filename first to check for existence\n    let datFileName = '';\n    let reportTypeShort = '';\n    if (reportType.includes('Sales')) {\n        datFileName = `${profile.tpTIN}S${month}${year}.DAT`;\n        reportTypeShort = 'Sales';\n    } else if (reportType.includes('Purchases')) {\n        datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n        reportTypeShort = 'Purchases';\n    } else if (reportType.includes('1601-EQ')) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n        reportTypeShort = '1601EQ';\n    } else if (reportType.includes('SAWT') && schedule) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n        reportTypeShort = `SAWT_${schedule}`;\n    } else {\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    const fileExists = await checkFileExists(datFileName, folderId, [profile.tpTIN, reportTypeShort, year]);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    // If file doesn't exist, proceed with generation\n    if (reportType === \"Summary of Sales (SLS)\") {\n        return await generateSalesDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary of Purchases (SLP)\") {\n         const formData = new FormData();\n         formData.append('file', file);\n         formData.append('profile', JSON.stringify(profile));\n         return await validateExcelForPurchases(formData);\n    }\n    if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n        return await generate1601EQDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n         if (!schedule) {\n            return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n        }\n        return await validateAndProcessSAWT(file, schedule, profile, month, year);\n    }\n    \n    return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n}\n\nexport async function uploadDatFileAndUpdateCache(\n    fileName: string, \n    fileContent: string, \n    folderId: string, \n    profile: TaxProfile,\n    reportTypeShort: string,\n    year: string,\n    overwrite: boolean\n) {\n    'use server';\n    try {\n        const drivePath = [profile.tpTIN, reportTypeShort, year];\n        console.log(`[BG WORK] Starting upload for ${fileName} to path: ${drivePath.join('/')}`);\n        await uploadFileToDrive(fileName, fileContent, folderId, drivePath, overwrite);\n        console.log(`[BG WORK] Finished upload for ${fileName}.`);\n        // The cache is not updated here directly. The client should poll or re-fetch.\n    } catch (error) {\n        console.error(`[BG WORK] Error in background upload for ${fileName}:`, error);\n    }\n}\n\n\nexport async function overwriteDatFile(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string, processedData?: any[][], nonCreditableInputTax?: number): Promise<DatFileResult> {\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year);\n        }\n         if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedData || nonCreditableInputTax === undefined) {\n                return { success: false, error: 'Processed data is missing for purchase overwrite.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             return await generate1601EQDatFile(file, profile, month, year);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                 return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await validateAndProcessSAWT(file, schedule, profile, month, year);\n        }\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported for overwrite.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { success: false, error: `Overwrite failed: ${errorMessage}`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n\n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(processedData: any[][], profile: TaxProfile, month: string, year: string, nonCreditableInputTax: number): Promise<DatFileResult> {\n     const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    const datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n    const reportTypeShort = 'Purchases';\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const files = await listDatFiles(folderId);\n        return { success: true, files, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(file: File, schedule: string, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    \n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    \n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n"],"names":[],"mappings":";;;;;;IA2nBsB,8BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2084, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollBar orientation=\"horizontal\" />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,8OAAC,0KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,8OAAC;;;;;0BACD,8OAAC;gBAAU,aAAY;;;;;;0BACvB,8OAAC,0KAAA,CAAA,SAA0B;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC,0KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;AAGnD,UAAU,WAAW,GAAG,0KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2159, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dat-preview-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from './ui/button';\nimport { Download, CheckCircle, Eye } from 'lucide-react';\nimport { ScrollArea, ScrollBar } from './ui/scroll-area';\n\ninterface Totals {\n    exempt?: number;\n    zeroRated?: number;\n    vatable?: number;\n    outputVat?: number;\n    services?: number;\n    capitalGoods?: number;\n    otherGoods?: number;\n    inputTax?: number;\n    taxableIncome?: number;\n    exemptIncome?: number;\n    withholdingTax?: number;\n}\n\nexport interface DatPreviewState {\n    fileName: string;\n    content: string;\n    isViewing?: boolean;\n    reportType?: 'sales' | 'purchases' | '1601eq' | 'sawt' | 'none';\n    totals?: Totals;\n}\n\ninterface DatPreviewDialogProps extends DatPreviewState {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n\nexport function DatPreviewDialog({\n  isOpen,\n  onOpenChange,\n  fileName,\n  content,\n  isViewing = false,\n  reportType = 'none',\n  totals = {},\n}: DatPreviewDialogProps) {\n\n  const handleDownload = () => {\n    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n  \n  const formatCurrency = (value: number | undefined) => {\n    if (value === undefined) return '0.00';\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value);\n  }\n\n  const showDownload = !isViewing || (isViewing && reportType !== 'none');\n\n  const title = isViewing ? \"DAT File Preview\" : \"Conversion Successful\";\n  const description = isViewing \n        ? \"Review the content of the DAT file below.\"\n        : \"Your DAT file is ready. Please review the content below before downloading.\";\n  const icon = isViewing ? <Eye className=\"w-6 h-6 text-primary\" /> : <CheckCircle className=\"w-6 h-6 text-accent-foreground\" />;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl w-full h-[80vh] flex flex-col p-0 bg-white text-black\">\n        <DialogHeader className=\"p-6 pb-4 shrink-0\">\n            <div className=\"flex items-center gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                    {icon}\n                </div>\n                <div>\n                    <DialogTitle className=\"text-xl text-black\">{title}</DialogTitle>\n                    <DialogDescription className=\"text-slate-600\">\n                        {description}\n                    </DialogDescription>\n                </div>\n            </div>\n        </DialogHeader>\n        <div className=\"flex-1 px-6 pb-4 flex flex-col gap-4 min-h-0\">\n            <div className=\"font-mono text-sm space-y-1 shrink-0\">\n                <p><span className=\"font-semibold\">Filename:</span> {fileName}</p>\n                {reportType === 'sales' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Exempt:</span> {formatCurrency(totals.exempt)}</p>\n                        <p><span className=\"font-semibold\">Total Zero-Rated:</span> {formatCurrency(totals.zeroRated)}</p>\n                        <p><span className=\"font-semibold\">Total Vatable:</span> {formatCurrency(totals.vatable)}</p>\n                        <p><span className=\"font-semibold\">Total Output VAT:</span> {formatCurrency(totals.outputVat)}</p>\n                    </>\n                )}\n                {reportType === 'purchases' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Exempt Purchases:</span> {formatCurrency(totals.exempt)}</p>\n                        <p><span className=\"font-semibold\">Total Zero-Rated Purchases:</span> {formatCurrency(totals.zeroRated)}</p>\n                        <p><span className=\"font-semibold\">Total Purchases of Services:</span> {formatCurrency(totals.services)}</p>\n                        <p><span className=\"font-semibold\">Total Purchases of Capital Goods:</span> {formatCurrency(totals.capitalGoods)}</p>\n                        <p><span className=\"font-semibold\">Total Purchases of Other Goods:</span> {formatCurrency(totals.otherGoods)}</p>\n                        <p><span className=\"font-semibold\">Total Input Tax:</span> {formatCurrency(totals.inputTax)}</p>\n                    </>\n                )}\n                {reportType === '1601eq' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Taxable Income Payment:</span> {formatCurrency(totals.taxableIncome)}</p>\n                        <p><span className=\"font-semibold\">Total Exempt Income Payment:</span> {formatCurrency(totals.exemptIncome)}</p>\n                        <p><span className=\"font-semibold\">Total Withholding Tax:</span> {formatCurrency(totals.withholdingTax)}</p>\n                    </>\n                )}\n                 {reportType === 'sawt' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Income Payment:</span> {formatCurrency(totals.taxableIncome)}</p>\n                        <p><span className=\"font-semibold\">Total Tax Withheld:</span> {formatCurrency(totals.withholdingTax)}</p>\n                    </>\n                )}\n            </div>\n            <ScrollArea className=\"flex-1 border rounded-md\">\n                <pre className=\"p-4 text-xs font-mono whitespace-pre\">{content}</pre>\n                <ScrollBar orientation=\"horizontal\" />\n            </ScrollArea>\n        </div>\n        <DialogFooter className=\"p-4 border-t shrink-0\">\n          {showDownload && (\n              <Button onClick={handleDownload}>\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download\n              </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAQA;AACA;AAAA;AAAA;AACA;AAZA;;;;;;AA0CO,SAAS,iBAAiB,EAC/B,MAAM,EACN,YAAY,EACZ,QAAQ,EACR,OAAO,EACP,YAAY,KAAK,EACjB,aAAa,MAAM,EACnB,SAAS,CAAC,CAAC,EACW;IAEtB,MAAM,iBAAiB;QACrB,MAAM,OAAO,IAAI,KAAK;YAAC;SAAQ,EAAE;YAAE,MAAM;QAA2B;QACpE,MAAM,MAAM,IAAI,eAAe,CAAC;QAChC,MAAM,OAAO,SAAS,aAAa,CAAC;QACpC,KAAK,IAAI,GAAG;QACZ,KAAK,QAAQ,GAAG;QAChB,SAAS,IAAI,CAAC,WAAW,CAAC;QAC1B,KAAK,KAAK;QACV,SAAS,IAAI,CAAC,WAAW,CAAC;QAC1B,IAAI,eAAe,CAAC;IACtB;IAEA,MAAM,iBAAiB,CAAC;QACtB,IAAI,UAAU,WAAW,OAAO;QAChC,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;YACpC,uBAAuB;YACvB,uBAAuB;QACzB,GAAG,MAAM,CAAC;IACZ;IAEA,MAAM,eAAe,CAAC,aAAc,aAAa,eAAe;IAEhE,MAAM,QAAQ,YAAY,qBAAqB;IAC/C,MAAM,cAAc,YACZ,8CACA;IACR,MAAM,OAAO,0BAAY,8OAAC,gMAAA,CAAA,MAAG;QAAC,WAAU;;;;;6BAA4B,8OAAC,2NAAA,CAAA,cAAW;QAAC,WAAU;;;;;;IAE3F,qBACE,8OAAC,kIAAA,CAAA,SAAM;QAAC,MAAM;QAAQ,cAAc;kBAClC,cAAA,8OAAC,kIAAA,CAAA,gBAAa;YAAC,WAAU;;8BACvB,8OAAC,kIAAA,CAAA,eAAY;oBAAC,WAAU;8BACpB,cAAA,8OAAC;wBAAI,WAAU;;0CACX,8OAAC;gCAAI,WAAU;0CACV;;;;;;0CAEL,8OAAC;;kDACG,8OAAC,kIAAA,CAAA,cAAW;wCAAC,WAAU;kDAAsB;;;;;;kDAC7C,8OAAC,kIAAA,CAAA,oBAAiB;wCAAC,WAAU;kDACxB;;;;;;;;;;;;;;;;;;;;;;;8BAKjB,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;;sDAAE,8OAAC;4CAAK,WAAU;sDAAgB;;;;;;wCAAgB;wCAAE;;;;;;;gCACpD,eAAe,yBACZ;;sDACI,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAoB;gDAAE,eAAe,OAAO,MAAM;;;;;;;sDACrF,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAwB;gDAAE,eAAe,OAAO,SAAS;;;;;;;sDAC5F,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAqB;gDAAE,eAAe,OAAO,OAAO;;;;;;;sDACvF,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAwB;gDAAE,eAAe,OAAO,SAAS;;;;;;;;;gCAGnG,eAAe,6BACZ;;sDACI,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAA8B;gDAAE,eAAe,OAAO,MAAM;;;;;;;sDAC/F,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAkC;gDAAE,eAAe,OAAO,SAAS;;;;;;;sDACtG,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAmC;gDAAE,eAAe,OAAO,QAAQ;;;;;;;sDACtG,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAwC;gDAAE,eAAe,OAAO,YAAY;;;;;;;sDAC/G,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAsC;gDAAE,eAAe,OAAO,UAAU;;;;;;;sDAC3G,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAuB;gDAAE,eAAe,OAAO,QAAQ;;;;;;;;;gCAGjG,eAAe,0BACZ;;sDACI,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAoC;gDAAE,eAAe,OAAO,aAAa;;;;;;;sDAC5G,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAAmC;gDAAE,eAAe,OAAO,YAAY;;;;;;;sDAC1G,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAA6B;gDAAE,eAAe,OAAO,cAAc;;;;;;;;;gCAG5G,eAAe,wBACb;;sDACI,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAA4B;gDAAE,eAAe,OAAO,aAAa;;;;;;;sDACpG,8OAAC;;8DAAE,8OAAC;oDAAK,WAAU;8DAAgB;;;;;;gDAA0B;gDAAE,eAAe,OAAO,cAAc;;;;;;;;;;;;;;;sCAI/G,8OAAC,0IAAA,CAAA,aAAU;4BAAC,WAAU;;8CAClB,8OAAC;oCAAI,WAAU;8CAAwC;;;;;;8CACvD,8OAAC,0IAAA,CAAA,YAAS;oCAAC,aAAY;;;;;;;;;;;;;;;;;;8BAG/B,8OAAC,kIAAA,CAAA,eAAY;oBAAC,WAAU;8BACrB,8BACG,8OAAC,kIAAA,CAAA,SAAM;wBAAC,SAAS;;0CACf,8OAAC,0MAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;;;;;;;;;;;;;;;;;AAQrD","debugId":null}},
    {"offset": {"line": 2656, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/error-summary-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from './ui/button';\nimport { AlertTriangle } from 'lucide-react';\nimport { ScrollArea } from './ui/scroll-area';\nimport { Card, CardContent, CardHeader } from './ui/card';\n\ninterface ErrorSummaryDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  errors: string[];\n}\n\nexport function ErrorSummaryDialog({\n  isOpen,\n  onOpenChange,\n  errors,\n}: ErrorSummaryDialogProps) {\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl w-full flex flex-col p-0 bg-white text-black\">\n        <DialogHeader className=\"p-6\">\n            <div className=\"flex items-center gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-destructive/10 flex items-center justify-center\">\n                    <AlertTriangle className=\"w-6 h-6 text-destructive\" />\n                </div>\n                <div>\n                    <DialogTitle className=\"text-xl text-black\">Validation Errors Found</DialogTitle>\n                    <DialogDescription className=\"text-slate-600\">\n                        Please correct the following issues in your Excel file and upload it again.\n                    </DialogDescription>\n                </div>\n            </div>\n        </DialogHeader>\n        <div className=\"px-6 pb-6 flex-1 overflow-hidden\">\n            <ScrollArea className=\"h-full max-h-[50vh] pr-4 -mr-4\">\n                <div className=\"space-y-2 font-mono text-sm\">\n                    {errors.map((error, index) => (\n                        <div key={index} className=\"p-3 rounded-md border bg-slate-50 text-slate-700 text-xs\">\n                           {error}\n                        </div>\n                    ))}\n                </div>\n            </ScrollArea>\n        </div>\n        <DialogFooter className=\"p-4 border-t\">\n          <Button onClick={() => onOpenChange(false)}>\n            Close\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAQA;AACA;AACA;AAZA;;;;;;AAqBO,SAAS,mBAAmB,EACjC,MAAM,EACN,YAAY,EACZ,MAAM,EACkB;IAExB,qBACE,8OAAC,kIAAA,CAAA,SAAM;QAAC,MAAM;QAAQ,cAAc;kBAClC,cAAA,8OAAC,kIAAA,CAAA,gBAAa;YAAC,WAAU;;8BACvB,8OAAC,kIAAA,CAAA,eAAY;oBAAC,WAAU;8BACpB,cAAA,8OAAC;wBAAI,WAAU;;0CACX,8OAAC;gCAAI,WAAU;0CACX,cAAA,8OAAC,wNAAA,CAAA,gBAAa;oCAAC,WAAU;;;;;;;;;;;0CAE7B,8OAAC;;kDACG,8OAAC,kIAAA,CAAA,cAAW;wCAAC,WAAU;kDAAqB;;;;;;kDAC5C,8OAAC,kIAAA,CAAA,oBAAiB;wCAAC,WAAU;kDAAiB;;;;;;;;;;;;;;;;;;;;;;;8BAM1D,8OAAC;oBAAI,WAAU;8BACX,cAAA,8OAAC,0IAAA,CAAA,aAAU;wBAAC,WAAU;kCAClB,cAAA,8OAAC;4BAAI,WAAU;sCACV,OAAO,GAAG,CAAC,CAAC,OAAO,sBAChB,8OAAC;oCAAgB,WAAU;8CACvB;mCADM;;;;;;;;;;;;;;;;;;;;8BAO1B,8OAAC,kIAAA,CAAA,eAAY;oBAAC,WAAU;8BACtB,cAAA,8OAAC,kIAAA,CAAA,SAAM;wBAAC,SAAS,IAAM,aAAa;kCAAQ;;;;;;;;;;;;;;;;;;;;;;AAOtD","debugId":null}},
    {"offset": {"line": 2793, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/non-creditable-tax-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface NonCreditableTaxDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  totalInputTax: number;\n  onContinue: (nonCreditableTax: number) => void;\n  isCreating: boolean;\n}\n\nconst formatCurrency = (value: number | undefined) => {\n    if (value === undefined || isNaN(value)) return '0.00';\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value);\n};\n\nconst formatInputValue = (value: string): string => {\n    if (!value) return '';\n    const parts = value.split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    return parts.join('.');\n};\n\n\nexport function NonCreditableTaxDialog({\n  isOpen,\n  onOpenChange,\n  totalInputTax,\n  onContinue,\n  isCreating,\n}: NonCreditableTaxDialogProps) {\n  const [nonCreditableTax, setNonCreditableTax] = useState(0);\n  const [inputValue, setInputValue] = useState('0.00');\n  const [error, setError] = useState<string | null>(null);\n  const creditableTax = totalInputTax - nonCreditableTax;\n\n  useEffect(() => {\n    // Reset when dialog opens\n    if (isOpen) {\n      setNonCreditableTax(0);\n      setInputValue('0.00');\n      setError(null);\n    }\n  }, [isOpen]);\n\n  const handleContinueClick = () => {\n    if (!error) {\n      onContinue(nonCreditableTax);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const rawValue = e.target.value;\n    const sanitizedValue = rawValue.replace(/[^0-9.]/g, '');\n    const parts = sanitizedValue.split('.');\n    \n    // Ensure only one decimal point\n    if (parts.length > 2) {\n      return; \n    }\n\n    const numericValue = parseFloat(sanitizedValue);\n\n    if (isNaN(numericValue)) {\n        setNonCreditableTax(0);\n        setError(null);\n        setInputValue('');\n        return;\n    }\n    \n    setNonCreditableTax(numericValue);\n\n    if (numericValue > totalInputTax) {\n        setError('Amount cannot exceed Total Input Tax.');\n    } else {\n        setError(null);\n    }\n\n    // Format for display\n    const formattedValue = formatInputValue(sanitizedValue);\n    setInputValue(formattedValue);\n  };\n  \n  const handleBlur = () => {\n     let numericValue = parseFloat(inputValue.replace(/,/g, ''));\n      if (isNaN(numericValue)) {\n        numericValue = 0;\n      }\n      setInputValue(formatCurrency(numericValue));\n  };\n\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md bg-white text-black\">\n        <DialogHeader>\n          <DialogTitle className=\"text-black\">Enter Value</DialogTitle>\n          <DialogDescription className=\"text-slate-600\">\n            Please provide the non-creditable input tax amount.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"non-creditable\" className=\"text-black\">\n              Non-Creditable Input Tax\n            </Label>\n            <Input\n              id=\"non-creditable\"\n              type=\"text\"\n              inputMode=\"decimal\"\n              value={inputValue}\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              className={cn(\"bg-slate-100\", error && 'border-destructive focus-visible:ring-destructive')}\n              disabled={isCreating}\n            />\n            {error && <p className=\"text-sm text-destructive mt-1\">{error}</p>}\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"total-input\" className=\"text-black\">\n              Total Input Tax\n            </Label>\n            <Input\n              id=\"total-input\"\n              value={formatCurrency(totalInputTax)}\n              disabled\n              className=\"bg-slate-200\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"creditable\" className=\"text-black\">\n              Creditable Input Tax\n            </Label>\n            <Input\n              id=\"creditable\"\n              value={formatCurrency(error ? 0 : creditableTax)}\n              disabled\n              className=\"bg-slate-200\"\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button onClick={handleContinueClick} disabled={isCreating || !!error}>\n            {isCreating && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Continue\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3055, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AANA;;;;;;AAQA,MAAM,cAAc,2KAAA,CAAA,OAAyB;AAE7C,MAAM,qBAAqB,2KAAA,CAAA,UAA4B;AAEvD,MAAM,oBAAoB,2KAAA,CAAA,SAA2B;AAErD,MAAM,mCAAqB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAA,CAAA,UAA4B;QAC3B,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2JACA;QAED,GAAG,KAAK;QACT,KAAK;;;;;;AAGT,mBAAmB,WAAW,GAAG,2KAAA,CAAA,UAA4B,CAAC,WAAW;AAEzE,MAAM,mCAAqB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,2KAAA,CAAA,UAA4B;gBAC3B,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;;;;;;;;;;;AAIf,mBAAmB,WAAW,GAAG,2KAAA,CAAA,UAA4B,CAAC,WAAW;AAEzE,MAAM,oBAAoB,CAAC,EACzB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oDACA;QAED,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG;AAEhC,MAAM,oBAAoB,CAAC,EACzB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG;AAEhC,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAA,CAAA,QAA0B;QACzB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,yBAAyB;QACtC,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG,2KAAA,CAAA,QAA0B,CAAC,WAAW;AAErE,MAAM,uCAAyB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG5C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAA,CAAA,cAAgC;QAC/B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,uBAAuB,WAAW,GAChC,2KAAA,CAAA,cAAgC,CAAC,WAAW;AAE9C,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAA,CAAA,SAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,KAAK;QAC/B,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,2KAAA,CAAA,SAA2B,CAAC,WAAW;AAEvE,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAA,CAAA,SAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,CAAA,GAAA,kIAAA,CAAA,iBAAc,AAAD,EAAE;YAAE,SAAS;QAAU,IACpC,gBACA;QAED,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,2KAAA,CAAA,SAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 3182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/overwrite-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { AlertTriangle, Loader2 } from 'lucide-react';\n\ninterface OverwriteDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  fileName: string;\n  transactionType: string;\n  reportingPeriod: string;\n  onConfirm: () => void;\n  isOverwriting: boolean;\n}\n\nexport function OverwriteDialog({\n  isOpen,\n  onOpenChange,\n  fileName,\n  transactionType,\n  reportingPeriod,\n  onConfirm,\n  isOverwriting,\n}: OverwriteDialogProps) {\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>\n      <AlertDialogContent className=\"bg-white text-black\">\n        <AlertDialogHeader>\n            <div className=\"flex items-center gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                    <AlertTriangle className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div>\n                    <AlertDialogTitle className=\"text-xl text-black\">Existing File Found!</AlertDialogTitle>\n                    <AlertDialogDescription className=\"text-slate-600 pt-1\">\n                        An existing file was found. Do you want to overwrite it?\n                    </AlertDialogDescription>\n                </div>\n            </div>\n        </AlertDialogHeader>\n        <div className=\"pl-16 pr-6 py-4 space-y-2 text-sm text-slate-800\">\n            <p><span className=\"font-semibold text-slate-500\">File Name:</span> {fileName}</p>\n            <p><span className=\"font-semibold text-slate-500\">Transaction Type:</span> {transactionType}</p>\n            <p><span className=\"font-semibold text-slate-500\">Reporting Period:</span> {reportingPeriod}</p>\n        </div>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isOverwriting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction asChild>\n            <Button\n              onClick={onConfirm}\n              disabled={isOverwriting}\n            >\n              {isOverwriting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Overwrite\n            </Button>\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAUA;AACA;AAAA;AAbA;;;;;AAyBO,SAAS,gBAAgB,EAC9B,MAAM,EACN,YAAY,EACZ,QAAQ,EACR,eAAe,EACf,eAAe,EACf,SAAS,EACT,aAAa,EACQ;IACrB,qBACE,8OAAC,2IAAA,CAAA,cAAW;QAAC,MAAM;QAAQ,cAAc;kBACvC,cAAA,8OAAC,2IAAA,CAAA,qBAAkB;YAAC,WAAU;;8BAC5B,8OAAC,2IAAA,CAAA,oBAAiB;8BACd,cAAA,8OAAC;wBAAI,WAAU;;0CACX,8OAAC;gCAAI,WAAU;0CACX,cAAA,8OAAC,wNAAA,CAAA,gBAAa;oCAAC,WAAU;;;;;;;;;;;0CAE7B,8OAAC;;kDACG,8OAAC,2IAAA,CAAA,mBAAgB;wCAAC,WAAU;kDAAqB;;;;;;kDACjD,8OAAC,2IAAA,CAAA,yBAAsB;wCAAC,WAAU;kDAAsB;;;;;;;;;;;;;;;;;;;;;;;8BAMpE,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;;8CAAE,8OAAC;oCAAK,WAAU;8CAA+B;;;;;;gCAAiB;gCAAE;;;;;;;sCACrE,8OAAC;;8CAAE,8OAAC;oCAAK,WAAU;8CAA+B;;;;;;gCAAwB;gCAAE;;;;;;;sCAC5E,8OAAC;;8CAAE,8OAAC;oCAAK,WAAU;8CAA+B;;;;;;gCAAwB;gCAAE;;;;;;;;;;;;;8BAEhF,8OAAC,2IAAA,CAAA,oBAAiB;;sCAChB,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,UAAU;sCAAe;;;;;;sCAC5C,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,OAAO;sCACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;gCACL,SAAS;gCACT,UAAU;;oCAET,+BAAiB,8OAAC,iNAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;oCAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQlF","debugId":null}},
    {"offset": {"line": 3377, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/home-content.tsx"],"sourcesContent":["\n'use client';\n\nimport Link from 'next/link';\nimport type { TaxProfile } from '@/lib/schemas';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ProfileSelector } from '@/components/profile-selector';\nimport { GenerationCard } from '@/components/generation-card';\nimport { FileUp, FileText, Download, Terminal, Loader2 } from 'lucide-react';\nimport { TaxProfilesSkeleton } from './tax-profiles-skeleton';\nimport { Button } from './ui/button';\nimport { Alert, AlertDescription, AlertTitle } from './ui/alert';\nimport { createPurchasesDatFile, convertExcelToDat, validateExcelForPurchases, overwriteDatFile, uploadDatFileAndUpdateCache } from '@/lib/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { DatPreviewDialog } from './dat-preview-dialog';\nimport type { DatPreviewState } from './dat-preview-dialog';\nimport { useState } from 'react';\nimport { ErrorSummaryDialog } from './error-summary-dialog';\nimport { NonCreditableTaxDialog } from './non-creditable-tax-dialog';\nimport { OverwriteDialog } from './overwrite-dialog';\n\n\ninterface HomeContentProps {\n  profiles: TaxProfile[];\n  isPending: boolean;\n  initialFetchComplete: boolean;\n  onNewProfile: () => void;\n  selectedProfile: string;\n  onProfileSelect: (tin: string) => void;\n}\n\nconst datFileReminders = [\n  \"Ensure all required data fields in the Excel template are populated accurately.\",\n  \"Specify the reporting month and reporting year. Select the reporting type you need to generate. Each reporting type has a corresponding Excel template. Verify that you are using the correct template for the chosen reporting type.\",\n  \"Before submission, validate the generated DAT File using the BIR Validation Module. This step is crucial to ensure the file complies with BIR standards. Once validated, email the DAT File to esubmission@bir.gov.ph.\"\n];\n\ninterface PurchaseTotalsState {\n    totalInputTax: number;\n    processedData: any[]; // Store the successfully processed data\n}\n\ninterface OverwriteState {\n    isOpen: boolean;\n    fileName: string;\n    transactionType: string;\n    reportingPeriod: string;\n    onConfirm: () => void;\n}\n\nexport function HomeContent({ \n  profiles, \n  isPending, \n  initialFetchComplete, \n  onNewProfile,\n  selectedProfile,\n  onProfileSelect\n}: HomeContentProps) {\n  const { toast } = useToast();\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n  const [datPreview, setDatPreview] = useState<DatPreviewState>({ \n    fileName: '', \n    content: '',\n    reportType: 'none',\n    totals: {}\n  });\n  const [isErrorsOpen, setIsErrorsOpen] = useState(false);\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\n  const [isNonCreditableDialogOpen, setIsNonCreditableDialogOpen] = useState(false);\n  const [purchaseTotals, setPurchaseTotals] = useState<PurchaseTotalsState | null>(null);\n  const [currentGenerationArgs, setCurrentGenerationArgs] = useState<any>(null);\n  const [isCreatingDat, setIsCreatingDat] = useState(false);\n  const [isOverwriting, setIsOverwriting] = useState(false);\n  const [overwriteState, setOverwriteState] = useState<OverwriteState>({\n    isOpen: false,\n    fileName: '',\n    transactionType: '',\n    reportingPeriod: '',\n    onConfirm: () => {},\n  });\n\n  const getSimpleTransactionType = (type: string, schedule?: string) => {\n      if (type.includes('Sales')) return 'Sales';\n      if (type.includes('Purchases')) return 'Purchases';\n      if (type.includes('1601-EQ')) return '1601-EQ';\n      if (type.includes('SAWT')) return `SAWT-${schedule}`;\n      return type;\n  }\n\n  const handleDatGeneration = async (file: File, month: string, year: string, type: string, schedule?: string) => {\n    const profile = profiles.find(p => p.tpTIN === selectedProfile);\n    if (!profile) {\n        toast({ title: 'Profile not found', description: 'Please select a valid profile.', variant: 'destructive'});\n        return;\n    }\n\n    const folderId = localStorage.getItem('folderId');\n    if (!folderId) {\n        toast({ title: 'User folder not found', description: 'Please log in again to sync your user folder.', variant: 'destructive'});\n        return;\n    }\n    \n    // This function will be called to actually do the overwrite\n    const doOverwrite = async () => {\n        setIsOverwriting(true);\n        const result = await overwriteDatFile(file, profile, month, year, type, schedule);\n        setOverwriteState({ isOpen: false, fileName: '', transactionType: '', reportingPeriod: '', onConfirm: () => {} });\n        setIsOverwriting(false);\n        \n        if (result.success && result.datContent && result.fileName) {\n            // Re-use the existing preview logic\n            setDatPreview({\n                fileName: result.fileName,\n                content: result.datContent,\n                reportType: getSimpleTransactionType(type, schedule) as any,\n                totals: {\n                    exempt: result.totalExempt,\n                    zeroRated: result.totalZeroRated,\n                    vatable: result.totalTaxableSales,\n                    outputVat: result.totalOutputTax,\n                    services: result.totalServices,\n                    capitalGoods: result.totalCapitalGoods,\n                    otherGoods: result.totalOtherGoods,\n                    inputTax: result.totalInputTax,\n                    taxableIncome: result.totalTaxableIncomePayment,\n                    exemptIncome: result.totalExemptIncomePayment,\n                    withholdingTax: result.totalWithholdingTax,\n                }\n            });\n            setIsPreviewOpen(true);\n            uploadDatFileAndUpdateCache(result.fileName, result.datContent, folderId, profile, getSimpleTransactionType(type, schedule), year, true);\n        } else {\n             toast({\n                title: 'Overwrite Failed',\n                description: result.error || 'An unexpected error occurred.',\n                variant: 'destructive',\n            });\n        }\n    }\n\n\n    if (type === 'Summary of Purchases (SLP)') {\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('profile', JSON.stringify(profile));\n        const validationResult = await validateExcelForPurchases(formData);\n        \n        if (validationResult.success && validationResult.totalInputTax !== null && validationResult.processedData) {\n            setPurchaseTotals({\n                totalInputTax: validationResult.totalInputTax,\n                processedData: validationResult.processedData,\n            });\n            setCurrentGenerationArgs({ file, month, year, profile, folderId, reportType: type });\n            setIsNonCreditableDialogOpen(true);\n        } else if (!validationResult.success && validationResult.errors && validationResult.errors.length > 0) {\n            setValidationErrors(validationResult.errors);\n            setIsErrorsOpen(true);\n        } else {\n             toast({\n                title: 'Validation Failed',\n                description: validationResult.error || 'An unexpected error occurred during validation.',\n                variant: 'destructive',\n            });\n        }\n        return;\n    }\n\n    const result = await convertExcelToDat(file, profile, month, year, type, schedule);\n    \n    if (result.success && result.datContent !== null && result.fileName) {\n        setDatPreview({ \n            fileName: result.fileName, \n            content: result.datContent,\n            reportType: getSimpleTransactionType(type, schedule) as any,\n            totals: {\n                exempt: result.totalExempt,\n                zeroRated: result.totalZeroRated,\n                vatable: result.totalTaxableSales,\n                outputVat: result.totalOutputTax,\n                services: result.totalServices,\n                capitalGoods: result.totalCapitalGoods,\n                otherGoods: result.totalOtherGoods,\n                inputTax: result.totalInputTax,\n                taxableIncome: result.totalTaxableIncomePayment,\n                exemptIncome: result.totalExemptIncomePayment,\n                withholdingTax: result.totalWithholdingTax,\n            }\n        });\n        setIsPreviewOpen(true);\n        // Fire-and-forget background upload\n        uploadDatFileAndUpdateCache(result.fileName, result.datContent, folderId, profile, getSimpleTransactionType(type, schedule), year, false);\n\n    } else if (!result.success && result.errors && result.errors.length > 0) {\n        setValidationErrors(result.errors);\n        setIsErrorsOpen(true);\n    } else if (!result.success && result.fileExists) {\n        const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n        setOverwriteState({\n            isOpen: true,\n            fileName: result.fileName || 'Unknown',\n            transactionType: getSimpleTransactionType(type, schedule),\n            reportingPeriod: reportingPeriod,\n            onConfirm: doOverwrite,\n        });\n    } else {\n        toast({\n            title: 'Conversion Failed',\n            description: result.error || 'An unexpected error occurred.',\n            variant: 'destructive',\n        });\n    }\n  };\n\n\n  const handleNonCreditableContinue = async (nonCreditableInputTax: number) => {\n    if (!purchaseTotals || !currentGenerationArgs) return;\n    \n    setIsCreatingDat(true);\n\n    try {\n        const { file, month, year, profile, folderId, reportType } = currentGenerationArgs;\n        \n        const doOverwrite = async () => {\n             setIsOverwriting(true);\n             const result = await overwriteDatFile(file, profile, month, year, reportType, undefined, purchaseTotals.processedData, nonCreditableInputTax);\n             setOverwriteState({ isOpen: false, fileName: '', transactionType: '', reportingPeriod: '', onConfirm: () => {} });\n             setIsOverwriting(false);\n              if (result.success && result.datContent && result.fileName) {\n                setDatPreview({\n                    fileName: result.fileName,\n                    content: result.datContent,\n                    reportType: 'purchases',\n                    totals: {\n                        exempt: result.totalExempt,\n                        zeroRated: result.totalZeroRated,\n                        services: result.totalServices,\n                        capitalGoods: result.totalCapitalGoods,\n                        otherGoods: result.totalOtherGoods,\n                        inputTax: result.totalInputTax,\n                    }\n                });\n                setIsPreviewOpen(true);\n                uploadDatFileAndUpdateCache(result.fileName, result.datContent, folderId, profile, 'Purchases', year, true);\n             } else {\n                toast({ title: 'Overwrite Failed', description: result.error || 'An unexpected error occurred.', variant: 'destructive'});\n             }\n        }\n\n        const result = await createPurchasesDatFile(purchaseTotals.processedData, profile, month, year, nonCreditableInputTax);\n\n        if (result.success && result.datContent && result.fileName) {\n             setDatPreview({\n                fileName: result.fileName,\n                content: result.datContent,\n                reportType: 'purchases',\n                totals: {\n                    exempt: result.totalExempt,\n                    zeroRated: result.totalZeroRated,\n                    services: result.totalServices,\n                    capitalGoods: result.totalCapitalGoods,\n                    otherGoods: result.totalOtherGoods,\n                    inputTax: result.totalInputTax,\n                }\n            });\n            setIsPreviewOpen(true);\n            uploadDatFileAndUpdateCache(result.fileName, result.datContent, folderId, profile, 'Purchases', year, false);\n        } else if (!result.success && result.fileExists && result.fileName) {\n             const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n             setOverwriteState({\n                isOpen: true,\n                fileName: result.fileName,\n                transactionType: getSimpleTransactionType(reportType),\n                reportingPeriod: reportingPeriod,\n                onConfirm: doOverwrite,\n            });\n        } else {\n            toast({\n                title: 'Conversion Failed',\n                description: result.error || 'An unexpected error occurred.',\n                variant: 'destructive',\n            });\n        }\n    } finally {\n        setIsCreatingDat(false);\n        setIsNonCreditableDialogOpen(false);\n        setPurchaseTotals(null);\n        setCurrentGenerationArgs(null);\n    }\n  }\n\n  const handleCertGeneration = (file: File, name: string, tin: string, position: string, signatureFile: File | null) => {\n    console.log('Generating Certificate for:', selectedProfile, 'with details:', {\n      file: file.name,\n      signatoryName: name,\n      signatoryTIN: tin,\n      signatoryPosition: position,\n      signatureFile: signatureFile?.name,\n    });\n    // Placeholder for Certificate generation logic\n  };\n\n  const showLoading = isPending || !initialFetchComplete;\n\n  return (\n    <>\n      <div className=\"flex-1 space-y-4 p-4 md:p-6\">\n        <div className=\"space-y-1\">\n          <h1 className=\"text-3xl font-bold\">Welcome to DATGenie!</h1>\n          <p className=\"text-muted-foreground\">Effortlessly convert your Excel files to DAT format and generate BIR Certificates.</p>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card className=\"w-full\">\n            <CardHeader>\n              <CardTitle>Step 1: Select a Profile</CardTitle>\n              <CardDescription>Choose the tax profile you want to work with or create a new one.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {showLoading ? (\n                <div className=\"w-full max-w-lg\">\n                    <TaxProfilesSkeleton />\n                </div>\n              ) : (\n                <ProfileSelector \n                    profiles={profiles} \n                    onProfileSelect={onProfileSelect} \n                    onNewProfile={onNewProfile}\n                    selectedProfile={selectedProfile}\n                />\n              )}\n            </CardContent>\n          </Card>\n          \n          {selectedProfile && (\n            <>\n              <Card className=\"w-full animate-in fade-in-50 duration-500\">\n                <CardHeader>\n                  <CardTitle>Step 2: Get Your Template</CardTitle>\n                  <CardDescription>If you don't have the template, download the required Excel file before proceeding.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Button asChild>\n                    <Link href=\"/template\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Download Templates\n                    </Link>\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 animate-in fade-in-50 duration-700\">\n                <GenerationCard\n                    title=\"Final Step: Generate .DAT File\"\n                    description=\"Upload the corresponding Excel file to convert it into a .DAT file.\"\n                    buttonText=\"Generate .DAT\"\n                    onGenerate={handleDatGeneration}\n                    icon={<FileUp className=\"w-6 h-6\" />}\n                    isDatGeneration={true}\n                    reminders={datFileReminders}\n                />\n                <GenerationCard\n                    title=\"Final Step: Generate BIR Certificate\"\n                    description=\"Upload the Excel file and provide signatory details to generate the certificate.\"\n                    buttonText=\"Generate Certificate\"\n                    onGenerate={handleCertGeneration}\n                    icon={<FileText className=\"w-6 h-6\" />}\n                    isDatGeneration={false}\n                />\n              </div>\n            </>\n          )}\n\n          {!showLoading && profiles.length === 0 && (\n            <Alert>\n                <Terminal className=\"h-4 w-4\" />\n                <AlertTitle>No Tax Profiles Found</AlertTitle>\n                <AlertDescription>\n                    You haven't created any tax profiles yet. Please create a new profile to begin.\n                </AlertDescription>\n            </Alert>\n          )}\n        </div>\n      </div>\n      <DatPreviewDialog\n        isOpen={isPreviewOpen}\n        onOpenChange={setIsPreviewOpen}\n        fileName={datPreview.fileName}\n        content={datPreview.content}\n        reportType={datPreview.reportType}\n        totals={datPreview.totals}\n        isViewing={datPreview.isViewing}\n      />\n      <ErrorSummaryDialog\n        isOpen={isErrorsOpen}\n        onOpenChange={setIsErrorsOpen}\n        errors={validationErrors}\n      />\n      {purchaseTotals && (\n        <NonCreditableTaxDialog\n          isOpen={isNonCreditableDialogOpen}\n          onOpenChange={(open) => {\n            if (!isCreatingDat) {\n                setIsNonCreditableDialogOpen(open);\n            }\n          }}\n          totalInputTax={purchaseTotals.totalInputTax}\n          onContinue={handleNonCreditableContinue}\n          isCreating={isCreatingDat}\n        />\n      )}\n      <OverwriteDialog\n        isOpen={overwriteState.isOpen}\n        onOpenChange={(open) => {\n            if (!isOverwriting) {\n                setOverwriteState(prev => ({...prev, isOpen: open}));\n            }\n        }}\n        fileName={overwriteState.fileName}\n        transactionType={overwriteState.transactionType}\n        reportingPeriod={overwriteState.reportingPeriod}\n        onConfirm={overwriteState.onConfirm}\n        isOverwriting={isOverwriting}\n      />\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3996, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, getFileMetadata } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\",\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    const datFileName = `${tin}S${month}${year}.DAT`;\n            \n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string): Promise<DatFileResult> {\n    const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    // Determine filename first to check for existence\n    let datFileName = '';\n    let reportTypeShort = '';\n    if (reportType.includes('Sales')) {\n        datFileName = `${profile.tpTIN}S${month}${year}.DAT`;\n        reportTypeShort = 'Sales';\n    } else if (reportType.includes('Purchases')) {\n        datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n        reportTypeShort = 'Purchases';\n    } else if (reportType.includes('1601-EQ')) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n        reportTypeShort = '1601EQ';\n    } else if (reportType.includes('SAWT') && schedule) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n        reportTypeShort = `SAWT_${schedule}`;\n    } else {\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    const fileExists = await checkFileExists(datFileName, folderId, [profile.tpTIN, reportTypeShort, year]);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    // If file doesn't exist, proceed with generation\n    if (reportType === \"Summary of Sales (SLS)\") {\n        return await generateSalesDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary of Purchases (SLP)\") {\n         const formData = new FormData();\n         formData.append('file', file);\n         formData.append('profile', JSON.stringify(profile));\n         return await validateExcelForPurchases(formData);\n    }\n    if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n        return await generate1601EQDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n         if (!schedule) {\n            return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n        }\n        return await validateAndProcessSAWT(file, schedule, profile, month, year);\n    }\n    \n    return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n}\n\nexport async function uploadDatFileAndUpdateCache(\n    fileName: string, \n    fileContent: string, \n    folderId: string, \n    profile: TaxProfile,\n    reportTypeShort: string,\n    year: string,\n    overwrite: boolean\n) {\n    'use server';\n    try {\n        const drivePath = [profile.tpTIN, reportTypeShort, year];\n        console.log(`[BG WORK] Starting upload for ${fileName} to path: ${drivePath.join('/')}`);\n        await uploadFileToDrive(fileName, fileContent, folderId, drivePath, overwrite);\n        console.log(`[BG WORK] Finished upload for ${fileName}.`);\n        // The cache is not updated here directly. The client should poll or re-fetch.\n    } catch (error) {\n        console.error(`[BG WORK] Error in background upload for ${fileName}:`, error);\n    }\n}\n\n\nexport async function overwriteDatFile(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string, processedData?: any[][], nonCreditableInputTax?: number): Promise<DatFileResult> {\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year);\n        }\n         if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedData || nonCreditableInputTax === undefined) {\n                return { success: false, error: 'Processed data is missing for purchase overwrite.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             return await generate1601EQDatFile(file, profile, month, year);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                 return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await validateAndProcessSAWT(file, schedule, profile, month, year);\n        }\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported for overwrite.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { success: false, error: `Overwrite failed: ${errorMessage}`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n\n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(processedData: any[][], profile: TaxProfile, month: string, year: string, nonCreditableInputTax: number): Promise<DatFileResult> {\n     const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    const datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n    const reportTypeShort = 'Purchases';\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const files = await listDatFiles(folderId);\n        return { success: true, files, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(file: File, schedule: string, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    \n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    \n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n"],"names":[],"mappings":";;;;;;IAwIsB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 4009, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, getFileMetadata } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\",\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    const datFileName = `${tin}S${month}${year}.DAT`;\n            \n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string): Promise<DatFileResult> {\n    const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    // Determine filename first to check for existence\n    let datFileName = '';\n    let reportTypeShort = '';\n    if (reportType.includes('Sales')) {\n        datFileName = `${profile.tpTIN}S${month}${year}.DAT`;\n        reportTypeShort = 'Sales';\n    } else if (reportType.includes('Purchases')) {\n        datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n        reportTypeShort = 'Purchases';\n    } else if (reportType.includes('1601-EQ')) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n        reportTypeShort = '1601EQ';\n    } else if (reportType.includes('SAWT') && schedule) {\n        datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n        reportTypeShort = `SAWT_${schedule}`;\n    } else {\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    const fileExists = await checkFileExists(datFileName, folderId, [profile.tpTIN, reportTypeShort, year]);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n\n    // If file doesn't exist, proceed with generation\n    if (reportType === \"Summary of Sales (SLS)\") {\n        return await generateSalesDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary of Purchases (SLP)\") {\n         const formData = new FormData();\n         formData.append('file', file);\n         formData.append('profile', JSON.stringify(profile));\n         return await validateExcelForPurchases(formData);\n    }\n    if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n        return await generate1601EQDatFile(file, profile, month, year);\n    }\n    if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n         if (!schedule) {\n            return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n        }\n        return await validateAndProcessSAWT(file, schedule, profile, month, year);\n    }\n    \n    return { success: false, error: `Report type \"${reportType}\" is not yet supported.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n}\n\nexport async function uploadDatFileAndUpdateCache(\n    fileName: string, \n    fileContent: string, \n    folderId: string, \n    profile: TaxProfile,\n    reportTypeShort: string,\n    year: string,\n    overwrite: boolean\n) {\n    'use server';\n    try {\n        const drivePath = [profile.tpTIN, reportTypeShort, year];\n        console.log(`[BG WORK] Starting upload for ${fileName} to path: ${drivePath.join('/')}`);\n        await uploadFileToDrive(fileName, fileContent, folderId, drivePath, overwrite);\n        console.log(`[BG WORK] Finished upload for ${fileName}.`);\n        // The cache is not updated here directly. The client should poll or re-fetch.\n    } catch (error) {\n        console.error(`[BG WORK] Error in background upload for ${fileName}:`, error);\n    }\n}\n\n\nexport async function overwriteDatFile(file: File, profile: TaxProfile, month: string, year: string, reportType: string, schedule?: string, processedData?: any[][], nonCreditableInputTax?: number): Promise<DatFileResult> {\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year);\n        }\n         if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedData || nonCreditableInputTax === undefined) {\n                return { success: false, error: 'Processed data is missing for purchase overwrite.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             return await generate1601EQDatFile(file, profile, month, year);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                 return { success: false, error: 'SAWT schedule is missing.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n            }\n            return await validateAndProcessSAWT(file, schedule, profile, month, year);\n        }\n        return { success: false, error: `Report type \"${reportType}\" is not yet supported for overwrite.`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { success: false, error: `Overwrite failed: ${errorMessage}`, datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n\n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(processedData: any[][], profile: TaxProfile, month: string, year: string, nonCreditableInputTax: number): Promise<DatFileResult> {\n     const folderId = localStorage.getItem('folderId'); // We need this for the check\n     if (!folderId) {\n        return { success: false, error: 'User folder not found. Please log in again.', datContent: null, fileName: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    const datFileName = `${profile.tpTIN}P${month}${year}.DAT`;\n    const reportTypeShort = 'Purchases';\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n    if (fileExists) {\n        return { success: false, fileExists: true, fileName: datFileName, datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null, processedData: null };\n    }\n    \n    return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax);\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const files = await listDatFiles(folderId);\n        return { success: true, files, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(file: File, schedule: string, profile: TaxProfile, month: string, year: string): Promise<DatFileResult> {\n    \n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    \n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n"],"names":[],"mappings":";;;;;;IAkKsB,mBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 4022, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4175, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/schemas.ts"],"sourcesContent":["import { z } from 'zod';\n\nconst alphanumericWithSpaces = (name: string, length: number, required = true) => {\n  const schema = z.string()\n   .max(length, `${name} must be ${length} characters or less.`)\n   .regex(/^[a-zA-Z0-9\\s]*$/, `${name} must only contain letters, numbers, and spaces.`);\n  \n  if (required) {\n    return schema.min(1, `${name} is required.`);\n  }\n  return schema.optional().or(z.literal(''));\n};\n\nexport const TaxProfileSchema = z.object({\n  tpTIN: z.string().regex(/^[0-9]{9}$/, 'TIN must be 9 digits.'),\n  branchCode: z.string().regex(/^[0-9]{4}$/, 'Branch code must be 4 digits.'),\n  rdoCode: z.string().min(1, 'RDO Code is required.'),\n  entityType: z.string(),\n  cycleType: z.string(),\n  monthSelect: z.string().min(1, 'Month is required.'),\n  companyName: alphanumericWithSpaces('Company Name', 50, false),\n  lastName: alphanumericWithSpaces('Last Name', 30, false),\n  firstName: alphanumericWithSpaces('First Name', 30, false),\n  middleName: alphanumericWithSpaces('Middle Name', 30, false),\n  tradeName: alphanumericWithSpaces('Trade Name', 50),\n  subStreet: z.string().max(30, 'Unit/Floor/Substreet must be 30 characters or less.').optional().or(z.literal('')),\n  street: z.string().max(30, 'Street must be 30 characters or less.').min(1, 'Street is required.'),\n  barangay: z.string().max(30, 'Barangay must be 30 characters or less.').min(1, 'Barangay is required.'),\n  cityMunicipality: z.string().max(30, 'City/Municipality must be 30 characters or less.').min(1, 'City/Municipality is required.'),\n  province: z.string().max(30, 'Province must be 30 characters or less.').min(1, 'Province is required.'),\n  zipCode: z.string().regex(/^[0-9]{4}$/, 'Zip code must be 4 digits.'),\n}).passthrough().refine(data => {\n    if (data.entityType === 'Individual') {\n        return !!data.lastName && !!data.firstName && !!data.middleName;\n    }\n    return true;\n}, {\n    message: \"First, Middle, and Last name are required for individuals.\",\n    path: [\"lastName\"], \n}).refine(data => {\n    if (data.entityType === 'Non-Individual') {\n        return !!data.companyName;\n    }\n    return true;\n}, {\n    message: \"Company name is required for non-individuals.\",\n    path: [\"companyName\"],\n});\n\n\nexport type TaxProfile = z.infer<typeof TaxProfileSchema>;\n\n\nexport const MutationResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    data: TaxProfileSchema.nullable(),\n});\n\nexport const DatFileSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  path: z.string(),\n  modifiedTime: z.string(),\n});\nexport type DatFile = z.infer<typeof DatFileSchema>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4245, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/profile-form.tsx"],"sourcesContent":["\n'use client';\n\nimport { useTransition, useEffect, useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { Check, ChevronsUpDown, Loader2 } from 'lucide-react';\nimport { addTaxProfile, updateTaxProfile } from '@/lib/actions';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport type { TaxProfile } from '@/lib/schemas';\nimport { TaxProfileSchema } from '@/lib/schemas';\nimport { RadioGroup, RadioGroupItem } from './ui/radio-group';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Popover, PopoverContent, PopoverTrigger } from './ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from './ui/command';\nimport { cn } from '@/lib/utils';\n\n\ninterface ProfileFormProps {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  profile: TaxProfile | null;\n  onSuccess: (profile: TaxProfile, isNew: boolean) => void;\n}\n\nconst months = [\n    { name: \"January\", value: \"01\" },\n    { name: \"February\", value: \"02\" },\n    { name: \"March\", value: \"03\" },\n    { name: \"April\", value: \"04\" },\n    { name: \"May\", value: \"05\" },\n    { name: \"June\", value: \"06\" },\n    { name: \"July\", value: \"07\" },\n    { name: \"August\", value: \"08\" },\n    { name: \"September\", value: \"09\" },\n    { name: \"October\", value: \"10\" },\n    { name: \"November\", value: \"11\" },\n    { name: \"December\", value: \"12\" }\n];\n\nconst rdoCodes = [\n    '001', '002', '003', '004', '005', '006', '007', '008', '009', '010',\n    '011', '012', '013', '014', '015', '016', '17A', '17B', '018', '019',\n    '020', '21A', '21B', '022', '23A', '23B', '024', '25A', '25B', '026',\n    '027', '028', '029', '030', '031', '032', '033', '034', '035', '036',\n    '037', '038', '039', '040', '041', '042', '043', '43A', '43B', '044',\n    '045', '046', '047', '048', '049', '050', '051', '052', '53A', '53B',\n    '54A', '54B', '055', '056', '057', '058', '059', '060', '061', '062',\n    '063', '064', '065', '066', '067', '068', '069', '070', '071', '072',\n    '073', '074', '075', '076', '077', '078', '079', '080', '081', '082',\n    '083', '084', '085', '086', '087', '088', '089', '090', '091', '092',\n    '93A', '93B', '094', '095', '096', '097', '098', '099', '100', '101',\n    '102', '103', '104', '105', '106', '107', '108', '109', '110', '111',\n    '112', '113', '114', '115', '116', '117', '118', '119', '120', '121',\n    '122', '123', '124', '125', '126', '127', '132'\n];\n\nconst defaultValues: TaxProfile = {\n    tpTIN: '',\n    branchCode: '0000',\n    rdoCode: '',\n    entityType: 'Individual',\n    cycleType: 'calendar',\n    monthSelect: '12',\n    companyName: '',\n    lastName: '',\n    firstName: '',\n    middleName: '',\n    tradeName: '',\n    subStreet: '',\n    street: '',\n    barangay: '',\n    cityMunicipality: '',\n    province: '',\n    zipCode: '',\n};\n\nexport function ProfileForm({ isOpen, setIsOpen, profile, onSuccess }: ProfileFormProps) {\n  const { toast } = useToast();\n  const [isPending, startTransition] = useTransition();\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  const form = useForm<TaxProfile>({\n    resolver: zodResolver(TaxProfileSchema),\n    defaultValues: profile || defaultValues,\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n        form.reset(profile || defaultValues);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [profile, isOpen]);\n\n  const entityType = form.watch('entityType');\n  const cycleType = form.watch('cycleType');\n\n  useEffect(() => {\n    if (cycleType === 'calendar') {\n        form.setValue('monthSelect', '12');\n    }\n  }, [cycleType, form]);\n\n  const onSubmit: SubmitHandler<TaxProfile> = (data) => {\n    startTransition(async () => {\n        const databaseId = localStorage.getItem('databaseId');\n        if (!databaseId) {\n            toast({ title: 'Error', description: 'User session not found. Please log in again.', variant: 'destructive' });\n            return;\n        }\n        \n        const isNew = !profile;\n        const result = isNew\n            ? await addTaxProfile(data, databaseId)\n            : await updateTaxProfile(data, databaseId);\n        \n        if (result.success && result.data) {\n            toast({\n                title: isNew ? 'Profile Created!' : 'Profile Updated!',\n                description: `Profile for ${data.entityType === 'Individual' ? `${data.firstName} ${data.lastName}` : data.companyName} has been saved.`,\n            });\n            onSuccess(result.data, isNew);\n            setIsOpen(false);\n        } else {\n            toast({\n                title: 'Operation Failed',\n                description: result.error,\n                variant: 'destructive',\n            });\n        }\n    });\n  };\n  \n  const inputStyles = \"bg-slate-100\";\n  const sanitizeAlphanumeric = (value: string) => value.replace(/[^a-zA-Z0-9\\s]/g, '');\n  const requiredMark = <span className=\"text-destructive\">*</span>;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogContent className=\"sm:max-w-[800px] bg-white text-black\">\n        <DialogHeader>\n          <DialogTitle className=\"text-black\">{profile ? 'Edit' : 'Create'} Tax Profile</DialogTitle>\n          <DialogDescription className=\"text-slate-600\">\n            Fill in the details below to {profile ? 'update the' : 'create a new'} tax profile. Click save when you're done.\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"max-h-[60vh] overflow-y-auto pr-4 pl-1 space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"entityType\"\n                render={({ field }) => (\n                  <FormItem className=\"space-y-3\">\n                    <FormLabel className=\"text-black\">Entity Type {requiredMark}</FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        className=\"flex space-x-4\"\n                      >\n                        <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                          <FormControl>\n                            <RadioGroupItem value=\"Individual\" id=\"individual\" />\n                          </FormControl>\n                          <FormLabel htmlFor=\"individual\" className=\"font-normal text-black\">Individual</FormLabel>\n                        </FormItem>\n                        <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                          <FormControl>\n                            <RadioGroupItem value=\"Non-Individual\" id=\"non-individual\"/>\n                          </FormControl>\n                          <FormLabel htmlFor=\"non-individual\" className=\"font-normal text-black\">Non-Individual</FormLabel>\n                        </FormItem>\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                 <FormField control={form.control} name=\"tpTIN\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">Taxpayer Identification Number {requiredMark}</FormLabel>\n                      <FormControl><Input placeholder=\"123456789\" {...field} className={inputStyles} readOnly={!!profile} /></FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n                 <FormField control={form.control} name=\"branchCode\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">Branch Code {requiredMark}</FormLabel>\n                      <FormControl><Input placeholder=\"0000\" {...field} className={inputStyles} /></FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n                 <FormField control={form.control} name=\"rdoCode\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">RDO Code {requiredMark}</FormLabel>\n                      <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>\n                        <PopoverTrigger asChild>\n                           <FormControl>\n                            <Button\n                              variant=\"outline\"\n                              role=\"combobox\"\n                              className={cn(\"w-full justify-between\", !field.value && \"text-muted-foreground\", inputStyles)}\n                            >\n                              {field.value\n                                ? rdoCodes.find(\n                                    (code) => code === field.value\n                                  )\n                                : \"Select an RDO code\"}\n                              <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                            </Button>\n                          </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-[200px] p-0\">\n                          <Command>\n                            <CommandInput placeholder=\"Search RDO code...\" />\n                            <CommandList>\n                              <CommandEmpty>No RDO code found.</CommandEmpty>\n                              <CommandGroup>\n                                {rdoCodes.map((code) => (\n                                  <CommandItem\n                                    value={code}\n                                    key={code}\n                                    onSelect={() => {\n                                      form.setValue(\"rdoCode\", code)\n                                      setPopoverOpen(false)\n                                    }}\n                                  >\n                                    <Check\n                                      className={cn(\n                                        \"mr-2 h-4 w-4\",\n                                        code === field.value\n                                          ? \"opacity-100\"\n                                          : \"opacity-0\"\n                                      )}\n                                    />\n                                    {code}\n                                  </CommandItem>\n                                ))}\n                              </CommandGroup>\n                            </CommandList>\n                          </Command>\n                        </PopoverContent>\n                      </Popover>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n              </div>\n\n              {entityType === 'Individual' ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField control={form.control} name=\"firstName\" render={({ field }) => (\n                    <FormItem><FormLabel className=\"text-black\">First Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                  )} />\n                  <FormField control={form.control} name=\"middleName\" render={({ field }) => (\n                    <FormItem><FormLabel className=\"text-black\">Middle Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                  )} />\n                  <FormField control={form.control} name=\"lastName\" render={({ field }) => (\n                    <FormItem><FormLabel className=\"text-black\">Last Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                  )} />\n                </div>\n              ) : (\n                <FormField control={form.control} name=\"companyName\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Company Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n              )}\n              \n              <FormField control={form.control} name=\"tradeName\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Trade Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n              )} />\n              \n              <h3 className=\"text-lg font-medium pt-4 text-black\">Registered Address</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField control={form.control} name=\"subStreet\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Unit/Floor/Substreet</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"street\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Street {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"barangay\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Barangay {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField control={form.control} name=\"cityMunicipality\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">City/Municipality {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"province\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Province {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"zipCode\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Zip Code {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n              </div>\n              \n              <h3 className=\"text-lg font-medium pt-4 text-black\">Taxpayer Type</h3>\n               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField control={form.control} name=\"cycleType\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">Cycle Type {requiredMark}</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl><SelectTrigger className={inputStyles}><SelectValue placeholder=\"Select a cycle type\" /></SelectTrigger></FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"calendar\">Calendar</SelectItem>\n                            <SelectItem value=\"fiscal\">Fiscal</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n                  <FormField control={form.control} name=\"monthSelect\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">Fiscal Year End Month {requiredMark}</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value} disabled={cycleType === 'calendar'}>\n                          <FormControl><SelectTrigger className={inputStyles}><SelectValue placeholder=\"Select a month\" /></SelectTrigger></FormControl>\n                          <SelectContent>\n                            {months.map(month => <SelectItem key={month.name} value={month.value}>{month.name}</SelectItem>)}\n                          </SelectContent>\n                        </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n              </div>\n\n            </div>\n            <DialogFooter className=\"pt-4\">\n              <DialogClose asChild>\n                <Button type=\"button\" variant=\"outline\">Cancel</Button>\n              </DialogClose>\n              <Button type=\"submit\" disabled={isPending}>\n                {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                {profile ? 'Save Changes' : 'Create Profile'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5762, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/home/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useCallback, useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { TaxProfile } from '@/lib/schemas';\nimport { HomeContent } from '@/components/home-content';\nimport { useRefresh } from '@/hooks/use-refresh';\nimport { useTaxProfiles } from '@/hooks/use-tax-profiles';\nimport { ProfileForm } from '@/components/profile-form';\n\nexport default function HomePage() {\n  const { toast } = useToast();\n  const { \n    profiles, \n    isPending, \n    initialFetchComplete, \n    fetchProfiles, \n    addProfile, \n    updateProfile,\n    selectedProfile,\n    setSelectedProfile\n  } = useTaxProfiles();\n  const { setRefreshFunction } = useRefresh();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const handleFetch = useCallback((isManualRefresh = false) => {\n    fetchProfiles(isManualRefresh);\n  }, [fetchProfiles]);\n\n  useEffect(() => {\n    // Set the refresh function for the header button to allow manual refresh\n    setRefreshFunction(() => () => handleFetch(true));\n  }, [handleFetch, setRefreshFunction]);\n\n\n  const handleProfileSuccess = (updatedProfile: TaxProfile, isNew: boolean) => {\n    if (isNew) {\n      addProfile(updatedProfile);\n    } else {\n      updateProfile(updatedProfile);\n    }\n  };\n\n  return (\n    <>\n      <HomeContent\n        profiles={profiles}\n        isPending={isPending}\n        initialFetchComplete={initialFetchComplete}\n        onNewProfile={() => setIsFormOpen(true)}\n        selectedProfile={selectedProfile}\n        onProfileSelect={setSelectedProfile}\n      />\n      <ProfileForm \n        isOpen={isFormOpen}\n        setIsOpen={setIsFormOpen}\n        profile={null}\n        onSuccess={handleProfileSuccess}\n      />\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AARA;;;;;;;;AAUe,SAAS;IACtB,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,EACJ,QAAQ,EACR,SAAS,EACT,oBAAoB,EACpB,aAAa,EACb,UAAU,EACV,aAAa,EACb,eAAe,EACf,kBAAkB,EACnB,GAAG,CAAA,GAAA,uIAAA,CAAA,iBAAc,AAAD;IACjB,MAAM,EAAE,kBAAkB,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,aAAU,AAAD;IACxC,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC,kBAAkB,KAAK;QACtD,cAAc;IAChB,GAAG;QAAC;KAAc;IAElB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,yEAAyE;QACzE,mBAAmB,IAAM,IAAM,YAAY;IAC7C,GAAG;QAAC;QAAa;KAAmB;IAGpC,MAAM,uBAAuB,CAAC,gBAA4B;QACxD,IAAI,OAAO;YACT,WAAW;QACb,OAAO;YACL,cAAc;QAChB;IACF;IAEA,qBACE;;0BACE,8OAAC,qIAAA,CAAA,cAAW;gBACV,UAAU;gBACV,WAAW;gBACX,sBAAsB;gBACtB,cAAc,IAAM,cAAc;gBAClC,iBAAiB;gBACjB,iBAAiB;;;;;;0BAEnB,8OAAC,qIAAA,CAAA,cAAW;gBACV,QAAQ;gBACR,WAAW;gBACX,SAAS;gBACT,WAAW;;;;;;;;AAInB","debugId":null}}]
}