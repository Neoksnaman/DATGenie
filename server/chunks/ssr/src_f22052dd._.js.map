{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm table-fixed\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;YAC1D,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, listDatFiles, downloadFileFromDrive, deleteFileFromDrive, getInitialPageTokenForDrive, listChangesSincePageToken, createFolderInDrive } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    datFile: DatFileSchema.nullable(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null, datFile: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    }).filter(row => row.length > 0 && row.some(cell => String(cell).trim() !== ''));\n\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\", datFile: null,\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const datFileName = `${tin}S${month}${year}.DAT`;\n    const reportTypeShort = \"Sales\";\n    const drivePath = [tin, reportTypeShort, year];\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(({ file: uploadedFile, fileExists }) => {\n        if (fileExists) {\n             console.log(`[actions] File ${datFileName} already exists. Overwrite was false.`);\n        } else if (uploadedFile) {\n            console.log(`[actions] File ${datFileName} uploaded successfully in the background.`);\n        } else {\n            console.error(`[actions] Background upload for ${datFileName} failed.`);\n        }\n    });\n\n    // Check for existing file before returning immediately\n    const { fileExists } = await uploadFileToDrive(datFileName, datContent, folderId, drivePath, false, true); // Dry run\n    if (fileExists && !overwrite) {\n        return {\n            success: false, fileExists: true, fileName: datFileName, datFile: null,\n            datContent: null, error: null, errors: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null,\n        };\n    }\n            \n    return { \n        success: true, datContent, fileName: datFileName, datFile: { id: 'temp-id', name: datFileName, path: drivePath.join(' / '), modifiedTime: new Date().toISOString()}, // Return dummy file data immediately\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    // All validations passed, now check for existing file\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n    const reportTypeShort = \"1601EQ\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    // Header Row\n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    // Schedule 1 Content\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    // Schedule 2 Content\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(({ file: uploadedFile, fileExists }) => {\n        if (fileExists) {\n             console.log(`[actions] File ${datFileName} already exists. Overwrite was false.`);\n        } else if (uploadedFile) {\n            console.log(`[actions] File ${datFileName} uploaded successfully in the background.`);\n        } else {\n            console.error(`[actions] Background upload for ${datFileName} failed.`);\n        }\n    });\n\n    const { fileExists } = await uploadFileToDrive(datFileName, datContent, folderId, drivePath, false, true); // Dry run check\n    if (fileExists && !overwrite) {\n        return { ...defaultErrorResult, success: false, fileExists: true, fileName: datFileName };\n    }\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        datFile: { id: 'temp-id', name: datFileName, path: drivePath.join(' / '), modifiedTime: new Date().toISOString()},\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!file || !reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for conversion.' };\n    }\n\n    try {\n        const profile: TaxProfile = JSON.parse(profileString);\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            return await validateExcelForPurchases(formData);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n            return await generate1601EQDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                return { ...defaultErrorResult, error: 'SAWT schedule is missing.' };\n            }\n            const result = await validateAndProcessSAWT(formData, false);\n            if (result.success) {\n                 return { ...result };\n            }\n            return result;\n        }\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during conversion.';\n        console.error('[convertExcelToDat] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Conversion failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function overwriteDatFile(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const processedDataString = formData.get('processedData') as string | null;\n    const nonCreditableTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for overwrite.' };\n    }\n     const profile: TaxProfile = JSON.parse(profileString);\n\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n            return await generateSalesDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedDataString || nonCreditableTaxString === null) return { ...defaultErrorResult, error: 'Missing processed data for overwrite.' };\n            const processedData = JSON.parse(processedDataString);\n            const nonCreditableInputTax = parseFloat(nonCreditableTaxString);\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, true);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n             return await generate1601EQDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!file || !schedule) return { ...defaultErrorResult, error: 'Missing file or schedule for SAWT overwrite.' };\n            return await validateAndProcessSAWT(formData, true);\n        }\n\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported for overwrite.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Overwrite failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    }).filter(row => row.length > 0 && row.some(cell => String(cell).trim() !== ''));\n\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number,\n    folderId: string,\n    overwrite: boolean = false\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    const reportTypeShort = \"Purchases\";\n    const drivePath = [tin, reportTypeShort, year];\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(({ file: uploadedFile, fileExists }) => {\n        if (fileExists) {\n             console.log(`[actions] File ${datFileName} already exists. Overwrite was false.`);\n        } else if (uploadedFile) {\n            console.log(`[actions] File ${datFileName} uploaded successfully in the background.`);\n        } else {\n            console.error(`[actions] Background upload for ${datFileName} failed.`);\n        }\n    });\n\n    const { fileExists } = await uploadFileToDrive(datFileName, datContent, folderId, drivePath, false, true);\n    if (fileExists && !overwrite) {\n        return {\n            success: false, fileExists: true, fileName: datFileName, datFile: null,\n            datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null,\n            totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null,\n            totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    return { \n        success: true, datContent, fileName: datFileName, datFile: { id: 'temp-id', name: datFileName, path: drivePath.join(' / '), modifiedTime: new Date().toISOString()},\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(formData: FormData): Promise<DatFileResult> {\n    const processedDataString = formData.get('processedData') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const nonCreditableInputTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    if (!processedDataString || !profileString || !month || !year || nonCreditableInputTaxString === null || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for purchase file creation.' };\n    }\n    \n    try {\n        const processedData = JSON.parse(processedDataString);\n        const profile: TaxProfile = JSON.parse(profileString);\n        const nonCreditableInputTax = parseFloat(nonCreditableInputTaxString);\n\n        return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, false);\n\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during DAT file creation.';\n        console.error('[createPurchasesDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Creation failed: ${errorMessage}` };\n    }\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  folderIds: z.array(z.string()).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, folderIds: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const { files, folderIds } = await listDatFiles(folderId);\n        return { success: true, files, folderIds, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, folderIds: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, content: null, error: 'File not found.' };\n        }\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function deleteDatFile(fileId: string): Promise<SimpleResult> {\n    try {\n        if (!fileId) {\n            return { success: false, error: 'File ID is required.' };\n        }\n        await deleteFileFromDrive(fileId);\n        return { success: true, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, error: 'File not found.' };\n        }\n        console.error(`[deleteDatFile] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, error: `Failed to delete file: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(formData: FormData, overwrite: boolean = false): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const schedule = formData.get('schedule') as string;\n    const profileString = formData.get('profile') as string;\n    const month = formData.get('month') as string;\n    const year = formData.get('year') as string;\n    const folderId = formData.get('folderId') as string;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const profile: TaxProfile = JSON.parse(profileString);\n\n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    const reportTypeShort = `SAWT_${schedule}`;\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(({ file: uploadedFile, fileExists }) => {\n        if (fileExists) {\n             console.log(`[actions] File ${datFileName} already exists. Overwrite was false.`);\n        } else if (uploadedFile) {\n            console.log(`[actions] File ${datFileName} uploaded successfully in the background.`);\n        } else {\n            console.error(`[actions] Background upload for ${datFileName} failed.`);\n        }\n    });\n\n    const { fileExists } = await uploadFileToDrive(datFileName, datContent, folderId, drivePath, false, true); // Dry run check\n    if (fileExists && !overwrite) {\n        return { ...defaultErrorResult, success: false, fileExists: true, fileName: datFileName };\n    }\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        datFile: { id: 'temp-id', name: datFileName, path: drivePath.join(' / '), modifiedTime: new Date().toISOString()},\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nconst PageTokenResultSchema = z.object({\n  success: z.boolean(),\n  token: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype PageTokenResult = z.infer<typeof PageTokenResultSchema>;\n\nexport async function getInitialPageToken(): Promise<PageTokenResult> {\n    try {\n        const token = await getInitialPageTokenForDrive();\n        return { success: true, token, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, token: null, error: `Failed to get initial page token: ${errorMessage}` };\n    }\n}\n\nconst ChangesResultSchema = z.object({\n  success: z.boolean(),\n  hasChanges: z.boolean(),\n  newToken: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype ChangesResult = z.infer<typeof ChangesResultSchema>;\n\nexport async function checkForDatFileChanges(allFolderIds: string[], pageToken: string): Promise<ChangesResult> {\n    if (!allFolderIds || allFolderIds.length === 0 || !pageToken) {\n        return { success: false, hasChanges: false, newToken: null, error: 'Folder IDs and page token are required.' };\n    }\n    try {\n        const { hasChanges, newPageToken } = await listChangesSincePageToken(allFolderIds, pageToken);\n        return { success: true, hasChanges, newToken: newPageToken, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, hasChanges: false, newToken: pageToken, error: `Failed to check for changes: ${errorMessage}` };\n    }\n}\n\n    "],"names":[],"mappings":";;;;;;IAu7BsB,oBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, listDatFiles, downloadFileFromDrive, deleteFileFromDrive, getInitialPageTokenForDrive, listChangesSincePageToken, createFolderInDrive } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    datFile: DatFileSchema.nullable(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null, datFile: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    }).filter(row => row.length > 0 && row.some(cell => String(cell).trim() !== ''));\n\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\", datFile: null,\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const datFileName = `${tin}S${month}${year}.DAT`;\n    const reportTypeShort = \"Sales\";\n    const drivePath = [tin, reportTypeShort, year];\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(({ file: uploadedFile, fileExists }) => {\n        if (fileExists) {\n             console.log(`[actions] File ${datFileName} already exists. Overwrite was false.`);\n        } else if (uploadedFile) {\n            console.log(`[actions] File ${datFileName} uploaded successfully in the background.`);\n        } else {\n            console.error(`[actions] Background upload for ${datFileName} failed.`);\n        }\n    });\n\n    // Check for existing file before returning immediately\n    const { fileExists } = await uploadFileToDrive(datFileName, datContent, folderId, drivePath, false, true); // Dry run\n    if (fileExists && !overwrite) {\n        return {\n            success: false, fileExists: true, fileName: datFileName, datFile: null,\n            datContent: null, error: null, errors: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null,\n        };\n    }\n            \n    return { \n        success: true, datContent, fileName: datFileName, datFile: { id: 'temp-id', name: datFileName, path: drivePath.join(' / '), modifiedTime: new Date().toISOString()}, // Return dummy file data immediately\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    // All validations passed, now check for existing file\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n    const reportTypeShort = \"1601EQ\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    // Header Row\n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    // Schedule 1 Content\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    // Schedule 2 Content\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(({ file: uploadedFile, fileExists }) => {\n        if (fileExists) {\n             console.log(`[actions] File ${datFileName} already exists. Overwrite was false.`);\n        } else if (uploadedFile) {\n            console.log(`[actions] File ${datFileName} uploaded successfully in the background.`);\n        } else {\n            console.error(`[actions] Background upload for ${datFileName} failed.`);\n        }\n    });\n\n    const { fileExists } = await uploadFileToDrive(datFileName, datContent, folderId, drivePath, false, true); // Dry run check\n    if (fileExists && !overwrite) {\n        return { ...defaultErrorResult, success: false, fileExists: true, fileName: datFileName };\n    }\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        datFile: { id: 'temp-id', name: datFileName, path: drivePath.join(' / '), modifiedTime: new Date().toISOString()},\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!file || !reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for conversion.' };\n    }\n\n    try {\n        const profile: TaxProfile = JSON.parse(profileString);\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            return await validateExcelForPurchases(formData);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n            return await generate1601EQDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                return { ...defaultErrorResult, error: 'SAWT schedule is missing.' };\n            }\n            const result = await validateAndProcessSAWT(formData, false);\n            if (result.success) {\n                 return { ...result };\n            }\n            return result;\n        }\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during conversion.';\n        console.error('[convertExcelToDat] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Conversion failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function overwriteDatFile(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const processedDataString = formData.get('processedData') as string | null;\n    const nonCreditableTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for overwrite.' };\n    }\n     const profile: TaxProfile = JSON.parse(profileString);\n\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n            return await generateSalesDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedDataString || nonCreditableTaxString === null) return { ...defaultErrorResult, error: 'Missing processed data for overwrite.' };\n            const processedData = JSON.parse(processedDataString);\n            const nonCreditableInputTax = parseFloat(nonCreditableTaxString);\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, true);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n             return await generate1601EQDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!file || !schedule) return { ...defaultErrorResult, error: 'Missing file or schedule for SAWT overwrite.' };\n            return await validateAndProcessSAWT(formData, true);\n        }\n\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported for overwrite.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Overwrite failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    }).filter(row => row.length > 0 && row.some(cell => String(cell).trim() !== ''));\n\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number,\n    folderId: string,\n    overwrite: boolean = false\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    const reportTypeShort = \"Purchases\";\n    const drivePath = [tin, reportTypeShort, year];\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(({ file: uploadedFile, fileExists }) => {\n        if (fileExists) {\n             console.log(`[actions] File ${datFileName} already exists. Overwrite was false.`);\n        } else if (uploadedFile) {\n            console.log(`[actions] File ${datFileName} uploaded successfully in the background.`);\n        } else {\n            console.error(`[actions] Background upload for ${datFileName} failed.`);\n        }\n    });\n\n    const { fileExists } = await uploadFileToDrive(datFileName, datContent, folderId, drivePath, false, true);\n    if (fileExists && !overwrite) {\n        return {\n            success: false, fileExists: true, fileName: datFileName, datFile: null,\n            datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null,\n            totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null,\n            totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    return { \n        success: true, datContent, fileName: datFileName, datFile: { id: 'temp-id', name: datFileName, path: drivePath.join(' / '), modifiedTime: new Date().toISOString()},\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(formData: FormData): Promise<DatFileResult> {\n    const processedDataString = formData.get('processedData') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const nonCreditableInputTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    if (!processedDataString || !profileString || !month || !year || nonCreditableInputTaxString === null || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for purchase file creation.' };\n    }\n    \n    try {\n        const processedData = JSON.parse(processedDataString);\n        const profile: TaxProfile = JSON.parse(profileString);\n        const nonCreditableInputTax = parseFloat(nonCreditableInputTaxString);\n\n        return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, false);\n\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during DAT file creation.';\n        console.error('[createPurchasesDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Creation failed: ${errorMessage}` };\n    }\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  folderIds: z.array(z.string()).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, folderIds: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const { files, folderIds } = await listDatFiles(folderId);\n        return { success: true, files, folderIds, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, folderIds: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, content: null, error: 'File not found.' };\n        }\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function deleteDatFile(fileId: string): Promise<SimpleResult> {\n    try {\n        if (!fileId) {\n            return { success: false, error: 'File ID is required.' };\n        }\n        await deleteFileFromDrive(fileId);\n        return { success: true, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, error: 'File not found.' };\n        }\n        console.error(`[deleteDatFile] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, error: `Failed to delete file: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(formData: FormData, overwrite: boolean = false): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const schedule = formData.get('schedule') as string;\n    const profileString = formData.get('profile') as string;\n    const month = formData.get('month') as string;\n    const year = formData.get('year') as string;\n    const folderId = formData.get('folderId') as string;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const profile: TaxProfile = JSON.parse(profileString);\n\n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    const reportTypeShort = `SAWT_${schedule}`;\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(({ file: uploadedFile, fileExists }) => {\n        if (fileExists) {\n             console.log(`[actions] File ${datFileName} already exists. Overwrite was false.`);\n        } else if (uploadedFile) {\n            console.log(`[actions] File ${datFileName} uploaded successfully in the background.`);\n        } else {\n            console.error(`[actions] Background upload for ${datFileName} failed.`);\n        }\n    });\n\n    const { fileExists } = await uploadFileToDrive(datFileName, datContent, folderId, drivePath, false, true); // Dry run check\n    if (fileExists && !overwrite) {\n        return { ...defaultErrorResult, success: false, fileExists: true, fileName: datFileName };\n    }\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        datFile: { id: 'temp-id', name: datFileName, path: drivePath.join(' / '), modifiedTime: new Date().toISOString()},\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nconst PageTokenResultSchema = z.object({\n  success: z.boolean(),\n  token: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype PageTokenResult = z.infer<typeof PageTokenResultSchema>;\n\nexport async function getInitialPageToken(): Promise<PageTokenResult> {\n    try {\n        const token = await getInitialPageTokenForDrive();\n        return { success: true, token, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, token: null, error: `Failed to get initial page token: ${errorMessage}` };\n    }\n}\n\nconst ChangesResultSchema = z.object({\n  success: z.boolean(),\n  hasChanges: z.boolean(),\n  newToken: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype ChangesResult = z.infer<typeof ChangesResultSchema>;\n\nexport async function checkForDatFileChanges(allFolderIds: string[], pageToken: string): Promise<ChangesResult> {\n    if (!allFolderIds || allFolderIds.length === 0 || !pageToken) {\n        return { success: false, hasChanges: false, newToken: null, error: 'Folder IDs and page token are required.' };\n    }\n    try {\n        const { hasChanges, newPageToken } = await listChangesSincePageToken(allFolderIds, pageToken);\n        return { success: true, hasChanges, newToken: newPageToken, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, hasChanges: false, newToken: pageToken, error: `Failed to check for changes: ${errorMessage}` };\n    }\n}\n\n    "],"names":[],"mappings":";;;;;;IAw8BsB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/checkbox.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,oKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kTACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,oKAAA,CAAA,YAA2B;YAC1B,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE;sBAEd,cAAA,8OAAC,oMAAA,CAAA,QAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,oKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollBar orientation=\"horizontal\" />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,8OAAC,0KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,8OAAC;;;;;0BACD,8OAAC;gBAAU,aAAY;;;;;;0BACvB,8OAAC,0KAAA,CAAA,SAA0B;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC,0KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;AAGnD,UAAU,WAAW,GAAG,0KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 476, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dat-preview-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from './ui/button';\nimport { Download, CheckCircle, Eye } from 'lucide-react';\nimport { ScrollArea, ScrollBar } from './ui/scroll-area';\n\ninterface Totals {\n    exempt?: number;\n    zeroRated?: number;\n    vatable?: number;\n    outputVat?: number;\n    services?: number;\n    capitalGoods?: number;\n    otherGoods?: number;\n    inputTax?: number;\n    taxableIncome?: number;\n    exemptIncome?: number;\n    withholdingTax?: number;\n}\n\nexport interface DatPreviewState {\n    fileName: string;\n    content: string;\n    isViewing?: boolean;\n    reportType?: 'sales' | 'purchases' | '1601eq' | 'sawt' | 'none';\n    totals?: Totals;\n}\n\ninterface DatPreviewDialogProps extends DatPreviewState {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n\nexport function DatPreviewDialog({\n  isOpen,\n  onOpenChange,\n  fileName,\n  content,\n  isViewing = false,\n  reportType = 'none',\n  totals = {},\n}: DatPreviewDialogProps) {\n\n  const handleDownload = () => {\n    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n  \n  const formatCurrency = (value: number | undefined) => {\n    if (value === undefined) return '0.00';\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value);\n  }\n\n  const showDownload = !isViewing || (isViewing && reportType !== 'none');\n\n  const title = isViewing ? \"DAT File Preview\" : \"Conversion Successful\";\n  const description = isViewing \n        ? \"Review the content of the DAT file below.\"\n        : \"Your DAT file is ready. Please review the content below before downloading.\";\n  const icon = isViewing ? <Eye className=\"w-6 h-6 text-primary\" /> : <CheckCircle className=\"w-6 h-6 text-accent-foreground\" />;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl w-full h-[80vh] flex flex-col p-0 bg-white text-black\">\n        <DialogHeader className=\"p-6 pb-4 shrink-0\">\n            <div className=\"flex items-center gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                    {icon}\n                </div>\n                <div>\n                    <DialogTitle className=\"text-xl text-black\">{title}</DialogTitle>\n                    <DialogDescription className=\"text-slate-600\">\n                        {description}\n                    </DialogDescription>\n                </div>\n            </div>\n        </DialogHeader>\n        <div className=\"flex-1 px-6 pb-4 flex flex-col gap-4 min-h-0\">\n            <div className=\"font-mono text-sm space-y-1 shrink-0\">\n                <p><span className=\"font-semibold\">Filename:</span> {fileName}</p>\n                {reportType === 'sales' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Exempt:</span> {formatCurrency(totals.exempt)}</p>\n                        <p><span className=\"font-semibold\">Total Zero-Rated:</span> {formatCurrency(totals.zeroRated)}</p>\n                        <p><span className=\"font-semibold\">Total Vatable:</span> {formatCurrency(totals.vatable)}</p>\n                        <p><span className=\"font-semibold\">Total Output VAT:</span> {formatCurrency(totals.outputVat)}</p>\n                    </>\n                )}\n                {reportType === 'purchases' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Exempt Purchases:</span> {formatCurrency(totals.exempt)}</p>\n                        <p><span className=\"font-semibold\">Total Zero-Rated Purchases:</span> {formatCurrency(totals.zeroRated)}</p>\n                        <p><span className=\"font-semibold\">Total Purchases of Services:</span> {formatCurrency(totals.services)}</p>\n                        <p><span className=\"font-semibold\">Total Purchases of Capital Goods:</span> {formatCurrency(totals.capitalGoods)}</p>\n                        <p><span className=\"font-semibold\">Total Purchases of Other Goods:</span> {formatCurrency(totals.otherGoods)}</p>\n                        <p><span className=\"font-semibold\">Total Input Tax:</span> {formatCurrency(totals.inputTax)}</p>\n                    </>\n                )}\n                {reportType === '1601eq' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Taxable Income Payment:</span> {formatCurrency(totals.taxableIncome)}</p>\n                        <p><span className=\"font-semibold\">Total Exempt Income Payment:</span> {formatCurrency(totals.exemptIncome)}</p>\n                        <p><span className=\"font-semibold\">Total Withholding Tax:</span> {formatCurrency(totals.withholdingTax)}</p>\n                    </>\n                )}\n                 {reportType === 'sawt' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Income Payment:</span> {formatCurrency(totals.taxableIncome)}</p>\n                        <p><span className=\"font-semibold\">Total Tax Withheld:</span> {formatCurrency(totals.withholdingTax)}</p>\n                    </>\n                )}\n            </div>\n            <ScrollArea className=\"flex-1 border rounded-md\">\n                <pre className=\"p-4 text-xs font-mono whitespace-pre\">{content}</pre>\n                <ScrollBar orientation=\"horizontal\" />\n            </ScrollArea>\n        </div>\n        <DialogFooter className=\"p-4 border-t shrink-0\">\n          {showDownload && (\n              <Button onClick={handleDownload}>\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download\n              </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 973, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1100, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/delete-confirmation-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { Loader2 } from 'lucide-react';\n\ninterface DeleteConfirmationDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => void;\n  isDeleting: boolean;\n  itemName?: string | null;\n  itemType?: string;\n}\n\nexport function DeleteConfirmationDialog({\n  isOpen,\n  onOpenChange,\n  onConfirm,\n  isDeleting,\n  itemName,\n  itemType = 'item'\n}: DeleteConfirmationDialogProps) {\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete the {itemType}\n            {itemName && <> for <span className=\"font-semibold\">{itemName}</span></>}\n            .\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction asChild>\n            <Button\n              onClick={onConfirm}\n              disabled={isDeleting}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {isDeleting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Delete\n            </Button>\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAUA;AACA;AAbA;;;;;AAwBO,SAAS,yBAAyB,EACvC,MAAM,EACN,YAAY,EACZ,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,MAAM,EACa;IAC9B,qBACE,8OAAC,2IAAA,CAAA,cAAW;QAAC,MAAM;QAAQ,cAAc;kBACvC,cAAA,8OAAC,2IAAA,CAAA,qBAAkB;;8BACjB,8OAAC,2IAAA,CAAA,oBAAiB;;sCAChB,8OAAC,2IAAA,CAAA,mBAAgB;sCAAC;;;;;;sCAClB,8OAAC,2IAAA,CAAA,yBAAsB;;gCAAC;gCAC0C;gCAC/D,0BAAY;;wCAAE;sDAAK,8OAAC;4CAAK,WAAU;sDAAiB;;;;;;;;gCAAoB;;;;;;;;;;;;;8BAI7E,8OAAC,2IAAA,CAAA,oBAAiB;;sCAChB,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,UAAU;sCAAY;;;;;;sCACzC,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,OAAO;sCACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;gCACL,SAAS;gCACT,UAAU;gCACV,WAAU;;oCAET,4BAAc,8OAAC,iNAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;oCAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ/E","debugId":null}},
    {"offset": {"line": 1217, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/dat-files/page.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useEffect, useState, useTransition, useCallback } from 'react';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Search, Trash, Loader2, SearchX, FileDown, Eye } from 'lucide-react';\nimport { getDatFileContent, deleteDatFile } from '@/lib/actions';\nimport type { DatFile } from '@/lib/schemas';\nimport { useToast } from '@/hooks/use-toast';\nimport { format } from 'date-fns';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { DatPreviewDialog } from '@/components/dat-preview-dialog';\nimport type { DatPreviewState } from '@/components/dat-preview-dialog';\nimport { DeleteConfirmationDialog } from '@/components/delete-confirmation-dialog';\nimport { useDatFiles } from '@/hooks/use-dat-files';\nimport { useRefresh } from '@/hooks/use-refresh';\n\n\nfunction DatFilesContent() {\n    const { files, isPending, initialFetchComplete, removeFile, fetchFiles } = useDatFiles();\n    const { setRefreshFunction } = useRefresh();\n    const [isViewing, startViewingTransition] = useTransition();\n    const [isDownloading, startDownloadingTransition] = useTransition();\n    const [isDeleting, startDeleteTransition] = useTransition();\n    const [viewingFileId, setViewingFileId] = useState<string | null>(null);\n    const [downloadingFileId, setDownloadingFileId] = useState<string | null>(null);\n    const [deletingFileId, setDeletingFileId] = useState<string | null>(null);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [currentPage, setCurrentPage] = useState(1);\n    const [selectedFiles, setSelectedFiles] = useState<string[]>([]);\n    const { toast } = useToast();\n    const ITEMS_PER_PAGE = 10;\n    \n    const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n    const [previewData, setPreviewData] = useState<DatPreviewState | null>(null);\n\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n    const [fileToDelete, setFileToDelete] = useState<DatFile | null>(null);\n\n    const handleFetch = useCallback((isManualRefresh = false) => {\n        fetchFiles(isManualRefresh);\n    }, [fetchFiles]);\n    \n    useEffect(() => {\n        setRefreshFunction(() => () => handleFetch(true));\n    }, [handleFetch, setRefreshFunction]);\n\n\n    useEffect(() => {\n        setCurrentPage(1);\n        setSelectedFiles([]);\n    }, [searchQuery]);\n    \n    const handleViewFile = (file: DatFile) => {\n        setViewingFileId(file.id);\n        startViewingTransition(async () => {\n            try {\n                const result = await getDatFileContent(file.id);\n                if (result.success && result.content) {\n                    const lines = result.content.split('\\n');\n                    const { transactionType } = parseFileName(file.name);\n                    let reportType: DatPreviewState['reportType'] = 'none';\n                    let totals: DatPreviewState['totals'] = {};\n    \n                    if (transactionType.includes('1601-EQ')) {\n                        reportType = '1601eq';\n                        const footer1 = lines.find(line => line.startsWith('C1,'));\n                        const footer2 = lines.find(line => line.startsWith('C2,'));\n                        if (footer1) {\n                            const cols = footer1.split(',');\n                            totals.taxableIncome = parseFloat(cols[5] || '0');\n                            totals.withholdingTax = parseFloat(cols[6] || '0');\n                        }\n                        if (footer2) {\n                             const cols = footer2.split(',');\n                            totals.exemptIncome = parseFloat(cols[5] || '0');\n                        }\n                    } else if (transactionType.startsWith('SAWT')) {\n                        reportType = 'sawt';\n                        const footer = lines.find(line => line.startsWith('CSAWT,'));\n                        if (footer) {\n                            const cols = footer.split(',');\n                            totals.taxableIncome = parseFloat(cols[5] || '0');\n                            totals.withholdingTax = parseFloat(cols[6] || '0');\n                        }\n                    } else if (transactionType === 'Sales') {\n                        reportType = 'sales';\n                        const detailLines = lines.filter(line => line.startsWith('D,'));\n                        totals = detailLines.reduce((acc, line) => {\n                            const columns = line.split(',');\n                            acc.exempt = (acc.exempt ?? 0) + parseFloat(columns[9] || '0');\n                            acc.zeroRated = (acc.zeroRated ?? 0) + parseFloat(columns[10] || '0');\n                            acc.vatable = (acc.vatable ?? 0) + parseFloat(columns[11] || '0');\n                            acc.outputVat = (acc.outputVat ?? 0) + parseFloat(columns[12] || '0');\n                            return acc;\n                        }, { exempt: 0, zeroRated: 0, vatable: 0, outputVat: 0 });\n                    } else if (transactionType === 'Purchases') {\n                        reportType = 'purchases';\n                        const detailLines = lines.filter(line => line.startsWith('D,'));\n                        totals = detailLines.reduce((acc, line) => {\n                            const columns = line.split(',');\n                            acc.exempt = (acc.exempt ?? 0) + parseFloat(columns[9] || '0');\n                            acc.zeroRated = (acc.zeroRated ?? 0) + parseFloat(columns[10] || '0');\n                            acc.services = (acc.services ?? 0) + parseFloat(columns[11] || '0');\n                            acc.capitalGoods = (acc.capitalGoods ?? 0) + parseFloat(columns[12] || '0');\n                            acc.otherGoods = (acc.otherGoods ?? 0) + parseFloat(columns[13] || '0');\n                            acc.inputTax = (acc.inputTax ?? 0) + parseFloat(columns[14] || '0');\n                            return acc;\n                        }, { exempt: 0, zeroRated: 0, services: 0, capitalGoods: 0, otherGoods: 0, inputTax: 0 });\n                    }\n    \n                    setPreviewData({\n                        fileName: file.name,\n                        content: result.content,\n                        isViewing: true,\n                        reportType,\n                        totals,\n                    });\n                    setIsPreviewOpen(true);\n                } else {\n                    if (result.error?.includes('File not found')) {\n                        toast({ title: 'File Not Found', description: 'This file may have been deleted. Please refresh the list.', variant: 'destructive'});\n                        removeFile(file.id); // Remove from local cache\n                    } else {\n                        toast({ title: 'Error', description: result.error || 'Failed to fetch file content.', variant: 'destructive' });\n                    }\n                }\n            } finally {\n                setViewingFileId(null);\n            }\n        })\n    }\n\n    const handleDownloadFile = (file: DatFile) => {\n        setDownloadingFileId(file.id);\n        startDownloadingTransition(async () => {\n            try {\n                const result = await getDatFileContent(file.id);\n                if (result.success && result.content) {\n                    const blob = new Blob([result.content], { type: 'text/plain;charset=utf-8' });\n                    const url = URL.createObjectURL(blob);\n                    const link = document.createElement('a');\n                    link.href = url;\n                    link.download = file.name;\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                    URL.revokeObjectURL(url);\n                } else {\n                     if (result.error?.includes('File not found')) {\n                        toast({ title: 'File Not Found', description: 'This file may have been deleted. Please refresh the list.', variant: 'destructive'});\n                        removeFile(file.id); // Remove from local cache\n                    } else {\n                        toast({ title: 'Error', description: result.error || 'Failed to download file content.', variant: 'destructive' });\n                    }\n                }\n            } finally {\n                setDownloadingFileId(null);\n            }\n        });\n    };\n\n    const handleDeleteClick = (file: DatFile) => {\n        setFileToDelete(file);\n        setIsDeleteDialogOpen(true);\n    };\n    \n    const handleConfirmDelete = () => {\n        if (!fileToDelete) return;\n        \n        setDeletingFileId(fileToDelete.id);\n        startDeleteTransition(async () => {\n            const result = await deleteDatFile(fileToDelete.id);\n            if (result.success) {\n                removeFile(fileToDelete!.id); // This will update the local state and broadcast the change\n                toast({ title: 'File Deleted', description: `Successfully deleted ${fileToDelete!.name}`});\n            } else {\n                if (result.error?.includes('File not found')) {\n                    toast({ title: 'File Not Found', description: 'This file may have been deleted already.', variant: 'destructive'});\n                    removeFile(fileToDelete!.id); // Remove from local cache anyway\n                } else {\n                    toast({ title: 'Error', description: result.error || 'Failed to delete file.', variant: 'destructive' });\n                }\n            }\n            setIsDeleteDialogOpen(false);\n            setFileToDelete(null);\n            setDeletingFileId(null);\n        });\n    };\n\n    const filteredFiles = files\n        .filter(file => file.name.toLowerCase().includes(searchQuery.toLowerCase()))\n        .sort((a, b) => new Date(b.modifiedTime).getTime() - new Date(a.modifiedTime).getTime());\n\n    const totalPages = Math.ceil(filteredFiles.length / ITEMS_PER_PAGE);\n    const paginatedFiles = filteredFiles.slice(\n        (currentPage - 1) * ITEMS_PER_PAGE,\n        currentPage * ITEMS_PER_PAGE\n    );\n    \n    const handlePreviousPage = () => {\n        setCurrentPage((prev) => Math.max(prev - 1, 1));\n        setSelectedFiles([]);\n    };\n\n    const handleNextPage = () => {\n        setCurrentPage((prev) => Math.min(prev + 1, totalPages));\n        setSelectedFiles([]);\n    };\n\n    const handleSelectRow = (fileId: string, checked: boolean) => {\n        if (checked) {\n            setSelectedFiles(prev => [...prev, fileId]);\n        } else {\n            setSelectedFiles(prev => prev.filter(id => id !== fileId));\n        }\n    };\n    \n    const parseFileName = (fileName: string) => {\n        const tinLength = 9;\n        const branchCodeLength = 4;\n        const tinAndBranchLength = tinLength + branchCodeLength;\n        const sawtSchedules = [\"1700\", \"1702\", \"2550Q\", \"1701\", \"1702Q\", \"2551M\", \"1701Q\", \"2550M\", \"2553\"];\n\n        if (fileName.includes('1601EQ')) {\n            const monthIndex = tinAndBranchLength;\n            const yearIndex = monthIndex + 2;\n            const month = fileName.substring(monthIndex, yearIndex);\n            const year = fileName.substring(yearIndex, yearIndex + 4);\n            const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n            return { transactionType: '1601-EQ', reportingPeriod };\n        }\n\n        const sortedSawtSchedules = sawtSchedules.sort((a, b) => b.length - a.length);\n        const sawtScheduleMatch = sortedSawtSchedules.find(schedule => fileName.includes(schedule));\n\n        if (sawtScheduleMatch) {\n            const monthIndex = tinAndBranchLength;\n            const yearIndex = monthIndex + 2;\n            const month = fileName.substring(monthIndex, yearIndex);\n            const year = fileName.substring(yearIndex, yearIndex + 4);\n            const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n            return { transactionType: `SAWT-${sawtScheduleMatch}`, reportingPeriod };\n        }\n        \n        const typeCode = fileName.charAt(9);\n        const month = fileName.substring(10, 12);\n        const year = fileName.substring(12, 16);\n\n        let transactionType = 'Unknown';\n        switch (typeCode) {\n            case 'S': transactionType = 'Sales'; break;\n            case 'P': transactionType = 'Purchases'; break;\n            case 'I': transactionType = 'Importations'; break;\n        }\n\n        const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n\n        return { transactionType, reportingPeriod };\n    };\n\n    const showLoading = isPending && !initialFetchComplete;\n    const noResults = !showLoading && paginatedFiles.length === 0;\n\n    return (\n        <>\n            <div className=\"p-4 md:p-6 space-y-6\">\n                <h1 className=\"text-3xl font-bold\">DAT Files</h1>\n                <p className=\"text-muted-foreground\">Manage your generated DAT files.</p>\n                <Card>\n                    <CardHeader>\n                        <div className=\"flex items-center gap-4 pt-2\">\n                            <div className=\"relative flex-1\">\n                                <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                <Input\n                                    placeholder=\"Search by filename...\"\n                                    className=\"pl-8\"\n                                    value={searchQuery}\n                                    onChange={(e) => setSearchQuery(e.target.value)}\n                                />\n                            </div>\n                        </div>\n                    </CardHeader>\n                    <CardContent>\n                        {showLoading ? (\n                            <div className=\"h-48 text-center flex items-center justify-center\">\n                                <div className=\"flex items-center justify-center gap-2\">\n                                    <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n                                    <p className=\"text-muted-foreground\">Loading files...</p>\n                                </div>\n                            </div>\n                        ) : noResults ? (\n                            <div className=\"h-48 text-center flex flex-col items-center justify-center gap-4\">\n                            <SearchX className=\"h-12 w-12 text-muted-foreground\" />\n                                <h3 className=\"text-xl font-semibold\">No DAT Files Found</h3>\n                                <p className=\"text-muted-foreground\">\n                                    {searchQuery ? \"No files matched your search.\" : \"You haven't generated any DAT files yet.\"}\n                                </p>\n                            </div>\n                        ) : (\n                        <>\n                            {/* Desktop Table View */}\n                            <div className=\"border rounded-md hidden md:block\">\n                                <Table>\n                                    <TableHeader>\n                                        <TableRow>\n                                            <TableHead className=\"w-[5%]\">\n                                            </TableHead>\n                                            <TableHead className=\"w-[30%]\">File Name</TableHead>\n                                            <TableHead className=\"w-[20%]\">Transaction Type</TableHead>\n                                            <TableHead className=\"w-[20%]\">Reporting Period</TableHead>\n                                            <TableHead className=\"w-[15%]\">Last Modified</TableHead>\n                                            <TableHead className=\"w-[10%] text-right\">Actions</TableHead>\n                                        </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                        {paginatedFiles.map((file) => {\n                                            const { transactionType, reportingPeriod } = parseFileName(file.name);\n                                            const isFileBeingViewed = isViewing && viewingFileId === file.id;\n                                            const isFileBeingDownloaded = isDownloading && downloadingFileId === file.id;\n                                            const isFileBeingDeleted = isDeleting && deletingFileId === file.id;\n                                            const isDisabled = isViewing || isDownloading || isDeleting;\n                                            return (\n                                                <TableRow key={file.id} data-state={selectedFiles.includes(file.id) && \"selected\"}>\n                                                    <TableCell>\n                                                            <Checkbox\n                                                            checked={selectedFiles.includes(file.id)}\n                                                            onCheckedChange={(checked) => handleSelectRow(file.id, Boolean(checked))}\n                                                            aria-label=\"Select row\"\n                                                            disabled={isDisabled}\n                                                        />\n                                                    </TableCell>\n                                                    <TableCell className=\"font-mono\">{file.name}</TableCell>\n                                                    <TableCell>\n                                                        {transactionType}\n                                                    </TableCell>\n                                                    <TableCell>{reportingPeriod}</TableCell>\n                                                    <TableCell>{format(new Date(file.modifiedTime), 'PP')}</TableCell>\n                                                    <TableCell>\n                                                        <div className=\"flex items-center justify-end gap-2\">\n                                                            <Button variant=\"ghost\" size=\"icon\" onClick={() => handleViewFile(file)} disabled={isDisabled}>\n                                                                {isFileBeingViewed ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Eye className=\"h-4 w-4\" />}\n                                                                <span className=\"sr-only\">View</span>\n                                                            </Button>\n                                                            <Button variant=\"ghost\" size=\"icon\" onClick={() => handleDownloadFile(file)} disabled={isDisabled}>\n                                                                {isFileBeingDownloaded ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <FileDown className=\"h-4 w-4\" />}\n                                                                <span className=\"sr-only\">Download</span>\n                                                            </Button>\n                                                            <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive hover:text-destructive\" onClick={() => handleDeleteClick(file)} disabled={isDisabled}>\n                                                                {isFileBeingDeleted ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Trash className=\"h-4 w-4\" />}\n                                                                <span className=\"sr-only\">Delete</span>\n                                                            </Button>\n                                                        </div>\n                                                    </TableCell>\n                                                </TableRow>\n                                            );\n                                        })}\n                                    </TableBody>\n                                </Table>\n                            </div>\n                            \n                            {/* Mobile Card View */}\n                             <div className=\"block md:hidden space-y-4\">\n                                {paginatedFiles.map((file) => {\n                                    const { transactionType, reportingPeriod } = parseFileName(file.name);\n                                    const isFileBeingViewed = isViewing && viewingFileId === file.id;\n                                    const isFileBeingDownloaded = isDownloading && downloadingFileId === file.id;\n                                    const isFileBeingDeleted = isDeleting && deletingFileId === file.id;\n                                    const isDisabled = isViewing || isDownloading || isDeleting;\n                                    return (\n                                    <Card key={file.id} className=\"p-4\" data-state={selectedFiles.includes(file.id) && \"selected\"}>\n                                        <div className=\"flex items-center\">\n                                            <Checkbox\n                                                checked={selectedFiles.includes(file.id)}\n                                                onCheckedChange={(checked) => handleSelectRow(file.id, Boolean(checked))}\n                                                aria-label=\"Select row\"\n                                                className=\"mr-4\"\n                                                disabled={isDisabled}\n                                            />\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <p className=\"font-semibold font-mono truncate\" title={file.name}>{file.name}</p>\n                                                <p className=\"text-sm text-muted-foreground\">{reportingPeriod}</p>\n                                                <p className=\"text-sm mt-1\">{transactionType}</p>\n                                            </div>\n                                            <div className=\"flex flex-col items-center flex-shrink-0 ml-2\">\n                                                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => handleViewFile(file)} disabled={isDisabled}>\n                                                    {isFileBeingViewed ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Eye className=\"h-4 w-4\" />}\n                                                    <span className=\"sr-only\">View</span>\n                                                </Button>\n                                                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => handleDownloadFile(file)} disabled={isDisabled}>\n                                                     {isFileBeingDownloaded ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <FileDown className=\"h-4 w-4\" />}\n                                                    <span className=\"sr-only\">Download</span>\n                                                </Button>\n                                                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-destructive hover:text-destructive\" onClick={() => handleDeleteClick(file)} disabled={isDisabled}>\n                                                    {isFileBeingDeleted ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Trash className=\"h-4 w-4\" />}\n                                                    <span className=\"sr-only\">Delete</span>\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    </Card>\n                                    )\n                                })}\n                            </div>\n                            \n                            {filteredFiles.length > ITEMS_PER_PAGE && (\n                                <div className=\"flex items-center justify-end space-x-2 py-4 px-0 md:px-4\">\n                                    <span className=\"text-sm text-muted-foreground\">\n                                        Page {totalPages > 0 ? currentPage : 0} of {totalPages}\n                                    </span>\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={handlePreviousPage}\n                                        disabled={currentPage <= 1}\n                                    >\n                                        Previous\n                                    </Button>\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={handleNextPage}\n                                        disabled={currentPage >= totalPages}\n                                    >\n                                        Next\n                                    </Button>\n                                </div>\n                            )}\n                        </>\n                        )}\n                    </CardContent>\n                </Card>\n            </div>\n            {previewData && (\n                <DatPreviewDialog\n                    isOpen={isPreviewOpen}\n                    onOpenChange={setIsPreviewOpen}\n                    fileName={previewData.fileName}\n                    content={previewData.content}\n                    isViewing={previewData.isViewing}\n                    reportType={previewData.reportType}\n                    totals={previewData.totals}\n                />\n            )}\n            <DeleteConfirmationDialog\n                isOpen={isDeleteDialogOpen}\n                onOpenChange={setIsDeleteDialogOpen}\n                onConfirm={handleConfirmDelete}\n                isDeleting={isDeleting}\n                itemName={fileToDelete?.name}\n                itemType=\"DAT file\"\n            />\n        </>\n    );\n}\n\nexport default function DatFilesPage() {\n    return <DatFilesContent />;\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAjBA;;;;;;;;;;;;;;;;AAoBA,SAAS;IACL,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,oBAAoB,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,oIAAA,CAAA,cAAW,AAAD;IACrF,MAAM,EAAE,kBAAkB,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,aAAU,AAAD;IACxC,MAAM,CAAC,WAAW,uBAAuB,GAAG,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD;IACxD,MAAM,CAAC,eAAe,2BAA2B,GAAG,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD;IAChE,MAAM,CAAC,YAAY,sBAAsB,GAAG,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD;IACxD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClE,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAC1E,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACpE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC/D,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,iBAAiB;IAEvB,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA0B;IAEvE,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC7D,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB;IAEjE,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC,kBAAkB,KAAK;QACpD,WAAW;IACf,GAAG;QAAC;KAAW;IAEf,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,mBAAmB,IAAM,IAAM,YAAY;IAC/C,GAAG;QAAC;QAAa;KAAmB;IAGpC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,eAAe;QACf,iBAAiB,EAAE;IACvB,GAAG;QAAC;KAAY;IAEhB,MAAM,iBAAiB,CAAC;QACpB,iBAAiB,KAAK,EAAE;QACxB,uBAAuB;YACnB,IAAI;gBACA,MAAM,SAAS,MAAM,CAAA,GAAA,kJAAA,CAAA,oBAAiB,AAAD,EAAE,KAAK,EAAE;gBAC9C,IAAI,OAAO,OAAO,IAAI,OAAO,OAAO,EAAE;oBAClC,MAAM,QAAQ,OAAO,OAAO,CAAC,KAAK,CAAC;oBACnC,MAAM,EAAE,eAAe,EAAE,GAAG,cAAc,KAAK,IAAI;oBACnD,IAAI,aAA4C;oBAChD,IAAI,SAAoC,CAAC;oBAEzC,IAAI,gBAAgB,QAAQ,CAAC,YAAY;wBACrC,aAAa;wBACb,MAAM,UAAU,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,UAAU,CAAC;wBACnD,MAAM,UAAU,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,UAAU,CAAC;wBACnD,IAAI,SAAS;4BACT,MAAM,OAAO,QAAQ,KAAK,CAAC;4BAC3B,OAAO,aAAa,GAAG,WAAW,IAAI,CAAC,EAAE,IAAI;4BAC7C,OAAO,cAAc,GAAG,WAAW,IAAI,CAAC,EAAE,IAAI;wBAClD;wBACA,IAAI,SAAS;4BACR,MAAM,OAAO,QAAQ,KAAK,CAAC;4BAC5B,OAAO,YAAY,GAAG,WAAW,IAAI,CAAC,EAAE,IAAI;wBAChD;oBACJ,OAAO,IAAI,gBAAgB,UAAU,CAAC,SAAS;wBAC3C,aAAa;wBACb,MAAM,SAAS,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,UAAU,CAAC;wBAClD,IAAI,QAAQ;4BACR,MAAM,OAAO,OAAO,KAAK,CAAC;4BAC1B,OAAO,aAAa,GAAG,WAAW,IAAI,CAAC,EAAE,IAAI;4BAC7C,OAAO,cAAc,GAAG,WAAW,IAAI,CAAC,EAAE,IAAI;wBAClD;oBACJ,OAAO,IAAI,oBAAoB,SAAS;wBACpC,aAAa;wBACb,MAAM,cAAc,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,UAAU,CAAC;wBACzD,SAAS,YAAY,MAAM,CAAC,CAAC,KAAK;4BAC9B,MAAM,UAAU,KAAK,KAAK,CAAC;4BAC3B,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,EAAE,IAAI;4BAC1D,IAAI,SAAS,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,GAAG,IAAI;4BACjE,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,GAAG,IAAI;4BAC7D,IAAI,SAAS,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,GAAG,IAAI;4BACjE,OAAO;wBACX,GAAG;4BAAE,QAAQ;4BAAG,WAAW;4BAAG,SAAS;4BAAG,WAAW;wBAAE;oBAC3D,OAAO,IAAI,oBAAoB,aAAa;wBACxC,aAAa;wBACb,MAAM,cAAc,MAAM,MAAM,CAAC,CAAA,OAAQ,KAAK,UAAU,CAAC;wBACzD,SAAS,YAAY,MAAM,CAAC,CAAC,KAAK;4BAC9B,MAAM,UAAU,KAAK,KAAK,CAAC;4BAC3B,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,EAAE,IAAI;4BAC1D,IAAI,SAAS,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,GAAG,IAAI;4BACjE,IAAI,QAAQ,GAAG,CAAC,IAAI,QAAQ,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,GAAG,IAAI;4BAC/D,IAAI,YAAY,GAAG,CAAC,IAAI,YAAY,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,GAAG,IAAI;4BACvE,IAAI,UAAU,GAAG,CAAC,IAAI,UAAU,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,GAAG,IAAI;4BACnE,IAAI,QAAQ,GAAG,CAAC,IAAI,QAAQ,IAAI,CAAC,IAAI,WAAW,OAAO,CAAC,GAAG,IAAI;4BAC/D,OAAO;wBACX,GAAG;4BAAE,QAAQ;4BAAG,WAAW;4BAAG,UAAU;4BAAG,cAAc;4BAAG,YAAY;4BAAG,UAAU;wBAAE;oBAC3F;oBAEA,eAAe;wBACX,UAAU,KAAK,IAAI;wBACnB,SAAS,OAAO,OAAO;wBACvB,WAAW;wBACX;wBACA;oBACJ;oBACA,iBAAiB;gBACrB,OAAO;oBACH,IAAI,OAAO,KAAK,EAAE,SAAS,mBAAmB;wBAC1C,MAAM;4BAAE,OAAO;4BAAkB,aAAa;4BAA6D,SAAS;wBAAa;wBACjI,WAAW,KAAK,EAAE,GAAG,0BAA0B;oBACnD,OAAO;wBACH,MAAM;4BAAE,OAAO;4BAAS,aAAa,OAAO,KAAK,IAAI;4BAAiC,SAAS;wBAAc;oBACjH;gBACJ;YACJ,SAAU;gBACN,iBAAiB;YACrB;QACJ;IACJ;IAEA,MAAM,qBAAqB,CAAC;QACxB,qBAAqB,KAAK,EAAE;QAC5B,2BAA2B;YACvB,IAAI;gBACA,MAAM,SAAS,MAAM,CAAA,GAAA,kJAAA,CAAA,oBAAiB,AAAD,EAAE,KAAK,EAAE;gBAC9C,IAAI,OAAO,OAAO,IAAI,OAAO,OAAO,EAAE;oBAClC,MAAM,OAAO,IAAI,KAAK;wBAAC,OAAO,OAAO;qBAAC,EAAE;wBAAE,MAAM;oBAA2B;oBAC3E,MAAM,MAAM,IAAI,eAAe,CAAC;oBAChC,MAAM,OAAO,SAAS,aAAa,CAAC;oBACpC,KAAK,IAAI,GAAG;oBACZ,KAAK,QAAQ,GAAG,KAAK,IAAI;oBACzB,SAAS,IAAI,CAAC,WAAW,CAAC;oBAC1B,KAAK,KAAK;oBACV,SAAS,IAAI,CAAC,WAAW,CAAC;oBAC1B,IAAI,eAAe,CAAC;gBACxB,OAAO;oBACF,IAAI,OAAO,KAAK,EAAE,SAAS,mBAAmB;wBAC3C,MAAM;4BAAE,OAAO;4BAAkB,aAAa;4BAA6D,SAAS;wBAAa;wBACjI,WAAW,KAAK,EAAE,GAAG,0BAA0B;oBACnD,OAAO;wBACH,MAAM;4BAAE,OAAO;4BAAS,aAAa,OAAO,KAAK,IAAI;4BAAoC,SAAS;wBAAc;oBACpH;gBACJ;YACJ,SAAU;gBACN,qBAAqB;YACzB;QACJ;IACJ;IAEA,MAAM,oBAAoB,CAAC;QACvB,gBAAgB;QAChB,sBAAsB;IAC1B;IAEA,MAAM,sBAAsB;QACxB,IAAI,CAAC,cAAc;QAEnB,kBAAkB,aAAa,EAAE;QACjC,sBAAsB;YAClB,MAAM,SAAS,MAAM,CAAA,GAAA,kJAAA,CAAA,gBAAa,AAAD,EAAE,aAAa,EAAE;YAClD,IAAI,OAAO,OAAO,EAAE;gBAChB,WAAW,aAAc,EAAE,GAAG,4DAA4D;gBAC1F,MAAM;oBAAE,OAAO;oBAAgB,aAAa,CAAC,qBAAqB,EAAE,aAAc,IAAI,EAAE;gBAAA;YAC5F,OAAO;gBACH,IAAI,OAAO,KAAK,EAAE,SAAS,mBAAmB;oBAC1C,MAAM;wBAAE,OAAO;wBAAkB,aAAa;wBAA4C,SAAS;oBAAa;oBAChH,WAAW,aAAc,EAAE,GAAG,iCAAiC;gBACnE,OAAO;oBACH,MAAM;wBAAE,OAAO;wBAAS,aAAa,OAAO,KAAK,IAAI;wBAA0B,SAAS;oBAAc;gBAC1G;YACJ;YACA,sBAAsB;YACtB,gBAAgB;YAChB,kBAAkB;QACtB;IACJ;IAEA,MAAM,gBAAgB,MACjB,MAAM,CAAC,CAAA,OAAQ,KAAK,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,YAAY,WAAW,KACvE,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,YAAY,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,YAAY,EAAE,OAAO;IAEzF,MAAM,aAAa,KAAK,IAAI,CAAC,cAAc,MAAM,GAAG;IACpD,MAAM,iBAAiB,cAAc,KAAK,CACtC,CAAC,cAAc,CAAC,IAAI,gBACpB,cAAc;IAGlB,MAAM,qBAAqB;QACvB,eAAe,CAAC,OAAS,KAAK,GAAG,CAAC,OAAO,GAAG;QAC5C,iBAAiB,EAAE;IACvB;IAEA,MAAM,iBAAiB;QACnB,eAAe,CAAC,OAAS,KAAK,GAAG,CAAC,OAAO,GAAG;QAC5C,iBAAiB,EAAE;IACvB;IAEA,MAAM,kBAAkB,CAAC,QAAgB;QACrC,IAAI,SAAS;YACT,iBAAiB,CAAA,OAAQ;uBAAI;oBAAM;iBAAO;QAC9C,OAAO;YACH,iBAAiB,CAAA,OAAQ,KAAK,MAAM,CAAC,CAAA,KAAM,OAAO;QACtD;IACJ;IAEA,MAAM,gBAAgB,CAAC;QACnB,MAAM,YAAY;QAClB,MAAM,mBAAmB;QACzB,MAAM,qBAAqB,YAAY;QACvC,MAAM,gBAAgB;YAAC;YAAQ;YAAQ;YAAS;YAAQ;YAAS;YAAS;YAAS;YAAS;SAAO;QAEnG,IAAI,SAAS,QAAQ,CAAC,WAAW;YAC7B,MAAM,aAAa;YACnB,MAAM,YAAY,aAAa;YAC/B,MAAM,QAAQ,SAAS,SAAS,CAAC,YAAY;YAC7C,MAAM,OAAO,SAAS,SAAS,CAAC,WAAW,YAAY;YACvD,MAAM,kBAAkB,IAAI,KAAK,SAAS,OAAO,SAAS,SAAS,GAAG,cAAc,CAAC,WAAW;gBAAE,OAAO;gBAAQ,MAAM;YAAU;YACjI,OAAO;gBAAE,iBAAiB;gBAAW;YAAgB;QACzD;QAEA,MAAM,sBAAsB,cAAc,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,MAAM,GAAG,EAAE,MAAM;QAC5E,MAAM,oBAAoB,oBAAoB,IAAI,CAAC,CAAA,WAAY,SAAS,QAAQ,CAAC;QAEjF,IAAI,mBAAmB;YACnB,MAAM,aAAa;YACnB,MAAM,YAAY,aAAa;YAC/B,MAAM,QAAQ,SAAS,SAAS,CAAC,YAAY;YAC7C,MAAM,OAAO,SAAS,SAAS,CAAC,WAAW,YAAY;YACvD,MAAM,kBAAkB,IAAI,KAAK,SAAS,OAAO,SAAS,SAAS,GAAG,cAAc,CAAC,WAAW;gBAAE,OAAO;gBAAQ,MAAM;YAAU;YACjI,OAAO;gBAAE,iBAAiB,CAAC,KAAK,EAAE,mBAAmB;gBAAE;YAAgB;QAC3E;QAEA,MAAM,WAAW,SAAS,MAAM,CAAC;QACjC,MAAM,QAAQ,SAAS,SAAS,CAAC,IAAI;QACrC,MAAM,OAAO,SAAS,SAAS,CAAC,IAAI;QAEpC,IAAI,kBAAkB;QACtB,OAAQ;YACJ,KAAK;gBAAK,kBAAkB;gBAAS;YACrC,KAAK;gBAAK,kBAAkB;gBAAa;YACzC,KAAK;gBAAK,kBAAkB;gBAAgB;QAChD;QAEA,MAAM,kBAAkB,IAAI,KAAK,SAAS,OAAO,SAAS,SAAS,GAAG,cAAc,CAAC,WAAW;YAAE,OAAO;YAAQ,MAAM;QAAU;QAEjI,OAAO;YAAE;YAAiB;QAAgB;IAC9C;IAEA,MAAM,cAAc,aAAa,CAAC;IAClC,MAAM,YAAY,CAAC,eAAe,eAAe,MAAM,KAAK;IAE5D,qBACI;;0BACI,8OAAC;gBAAI,WAAU;;kCACX,8OAAC;wBAAG,WAAU;kCAAqB;;;;;;kCACnC,8OAAC;wBAAE,WAAU;kCAAwB;;;;;;kCACrC,8OAAC,gIAAA,CAAA,OAAI;;0CACD,8OAAC,gIAAA,CAAA,aAAU;0CACP,cAAA,8OAAC;oCAAI,WAAU;8CACX,cAAA,8OAAC;wCAAI,WAAU;;0DACX,8OAAC,sMAAA,CAAA,SAAM;gDAAC,WAAU;;;;;;0DAClB,8OAAC,iIAAA,CAAA,QAAK;gDACF,aAAY;gDACZ,WAAU;gDACV,OAAO;gDACP,UAAU,CAAC,IAAM,eAAe,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;;;;;;;;;;;0CAK9D,8OAAC,gIAAA,CAAA,cAAW;0CACP,4BACG,8OAAC;oCAAI,WAAU;8CACX,cAAA,8OAAC;wCAAI,WAAU;;0DACX,8OAAC,iNAAA,CAAA,UAAO;gDAAC,WAAU;;;;;;0DACnB,8OAAC;gDAAE,WAAU;0DAAwB;;;;;;;;;;;;;;;;2CAG7C,0BACA,8OAAC;oCAAI,WAAU;;sDACf,8OAAC,4MAAA,CAAA,UAAO;4CAAC,WAAU;;;;;;sDACf,8OAAC;4CAAG,WAAU;sDAAwB;;;;;;sDACtC,8OAAC;4CAAE,WAAU;sDACR,cAAc,kCAAkC;;;;;;;;;;;yDAI7D;;sDAEI,8OAAC;4CAAI,WAAU;sDACX,cAAA,8OAAC,iIAAA,CAAA,QAAK;;kEACF,8OAAC,iIAAA,CAAA,cAAW;kEACR,cAAA,8OAAC,iIAAA,CAAA,WAAQ;;8EACL,8OAAC,iIAAA,CAAA,YAAS;oEAAC,WAAU;;;;;;8EAErB,8OAAC,iIAAA,CAAA,YAAS;oEAAC,WAAU;8EAAU;;;;;;8EAC/B,8OAAC,iIAAA,CAAA,YAAS;oEAAC,WAAU;8EAAU;;;;;;8EAC/B,8OAAC,iIAAA,CAAA,YAAS;oEAAC,WAAU;8EAAU;;;;;;8EAC/B,8OAAC,iIAAA,CAAA,YAAS;oEAAC,WAAU;8EAAU;;;;;;8EAC/B,8OAAC,iIAAA,CAAA,YAAS;oEAAC,WAAU;8EAAqB;;;;;;;;;;;;;;;;;kEAGlD,8OAAC,iIAAA,CAAA,YAAS;kEACL,eAAe,GAAG,CAAC,CAAC;4DACjB,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE,GAAG,cAAc,KAAK,IAAI;4DACpE,MAAM,oBAAoB,aAAa,kBAAkB,KAAK,EAAE;4DAChE,MAAM,wBAAwB,iBAAiB,sBAAsB,KAAK,EAAE;4DAC5E,MAAM,qBAAqB,cAAc,mBAAmB,KAAK,EAAE;4DACnE,MAAM,aAAa,aAAa,iBAAiB;4DACjD,qBACI,8OAAC,iIAAA,CAAA,WAAQ;gEAAe,cAAY,cAAc,QAAQ,CAAC,KAAK,EAAE,KAAK;;kFACnE,8OAAC,iIAAA,CAAA,YAAS;kFACF,cAAA,8OAAC,oIAAA,CAAA,WAAQ;4EACT,SAAS,cAAc,QAAQ,CAAC,KAAK,EAAE;4EACvC,iBAAiB,CAAC,UAAY,gBAAgB,KAAK,EAAE,EAAE,QAAQ;4EAC/D,cAAW;4EACX,UAAU;;;;;;;;;;;kFAGlB,8OAAC,iIAAA,CAAA,YAAS;wEAAC,WAAU;kFAAa,KAAK,IAAI;;;;;;kFAC3C,8OAAC,iIAAA,CAAA,YAAS;kFACL;;;;;;kFAEL,8OAAC,iIAAA,CAAA,YAAS;kFAAE;;;;;;kFACZ,8OAAC,iIAAA,CAAA,YAAS;kFAAE,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,IAAI,KAAK,KAAK,YAAY,GAAG;;;;;;kFAChD,8OAAC,iIAAA,CAAA,YAAS;kFACN,cAAA,8OAAC;4EAAI,WAAU;;8FACX,8OAAC,kIAAA,CAAA,SAAM;oFAAC,SAAQ;oFAAQ,MAAK;oFAAO,SAAS,IAAM,eAAe;oFAAO,UAAU;;wFAC9E,kCAAoB,8OAAC,iNAAA,CAAA,UAAO;4FAAC,WAAU;;;;;iHAA4B,8OAAC,gMAAA,CAAA,MAAG;4FAAC,WAAU;;;;;;sGACnF,8OAAC;4FAAK,WAAU;sGAAU;;;;;;;;;;;;8FAE9B,8OAAC,kIAAA,CAAA,SAAM;oFAAC,SAAQ;oFAAQ,MAAK;oFAAO,SAAS,IAAM,mBAAmB;oFAAO,UAAU;;wFAClF,sCAAwB,8OAAC,iNAAA,CAAA,UAAO;4FAAC,WAAU;;;;;iHAA4B,8OAAC,8MAAA,CAAA,WAAQ;4FAAC,WAAU;;;;;;sGAC5F,8OAAC;4FAAK,WAAU;sGAAU;;;;;;;;;;;;8FAE9B,8OAAC,kIAAA,CAAA,SAAM;oFAAC,SAAQ;oFAAQ,MAAK;oFAAO,WAAU;oFAA0C,SAAS,IAAM,kBAAkB;oFAAO,UAAU;;wFACrI,mCAAqB,8OAAC,iNAAA,CAAA,UAAO;4FAAC,WAAU;;;;;iHAA4B,8OAAC,oMAAA,CAAA,QAAK;4FAAC,WAAU;;;;;;sGACtF,8OAAC;4FAAK,WAAU;sGAAU;;;;;;;;;;;;;;;;;;;;;;;;+DA3B3B,KAAK,EAAE;;;;;wDAiC9B;;;;;;;;;;;;;;;;;sDAMX,8OAAC;4CAAI,WAAU;sDACX,eAAe,GAAG,CAAC,CAAC;gDACjB,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE,GAAG,cAAc,KAAK,IAAI;gDACpE,MAAM,oBAAoB,aAAa,kBAAkB,KAAK,EAAE;gDAChE,MAAM,wBAAwB,iBAAiB,sBAAsB,KAAK,EAAE;gDAC5E,MAAM,qBAAqB,cAAc,mBAAmB,KAAK,EAAE;gDACnE,MAAM,aAAa,aAAa,iBAAiB;gDACjD,qBACA,8OAAC,gIAAA,CAAA,OAAI;oDAAe,WAAU;oDAAM,cAAY,cAAc,QAAQ,CAAC,KAAK,EAAE,KAAK;8DAC/E,cAAA,8OAAC;wDAAI,WAAU;;0EACX,8OAAC,oIAAA,CAAA,WAAQ;gEACL,SAAS,cAAc,QAAQ,CAAC,KAAK,EAAE;gEACvC,iBAAiB,CAAC,UAAY,gBAAgB,KAAK,EAAE,EAAE,QAAQ;gEAC/D,cAAW;gEACX,WAAU;gEACV,UAAU;;;;;;0EAEd,8OAAC;gEAAI,WAAU;;kFACX,8OAAC;wEAAE,WAAU;wEAAmC,OAAO,KAAK,IAAI;kFAAG,KAAK,IAAI;;;;;;kFAC5E,8OAAC;wEAAE,WAAU;kFAAiC;;;;;;kFAC9C,8OAAC;wEAAE,WAAU;kFAAgB;;;;;;;;;;;;0EAEjC,8OAAC;gEAAI,WAAU;;kFACX,8OAAC,kIAAA,CAAA,SAAM;wEAAC,SAAQ;wEAAQ,MAAK;wEAAO,WAAU;wEAAU,SAAS,IAAM,eAAe;wEAAO,UAAU;;4EAClG,kCAAoB,8OAAC,iNAAA,CAAA,UAAO;gFAAC,WAAU;;;;;qGAA4B,8OAAC,gMAAA,CAAA,MAAG;gFAAC,WAAU;;;;;;0FACnF,8OAAC;gFAAK,WAAU;0FAAU;;;;;;;;;;;;kFAE9B,8OAAC,kIAAA,CAAA,SAAM;wEAAC,SAAQ;wEAAQ,MAAK;wEAAO,WAAU;wEAAU,SAAS,IAAM,mBAAmB;wEAAO,UAAU;;4EACrG,sCAAwB,8OAAC,iNAAA,CAAA,UAAO;gFAAC,WAAU;;;;;qGAA4B,8OAAC,8MAAA,CAAA,WAAQ;gFAAC,WAAU;;;;;;0FAC7F,8OAAC;gFAAK,WAAU;0FAAU;;;;;;;;;;;;kFAE9B,8OAAC,kIAAA,CAAA,SAAM;wEAAC,SAAQ;wEAAQ,MAAK;wEAAO,WAAU;wEAAkD,SAAS,IAAM,kBAAkB;wEAAO,UAAU;;4EAC7I,mCAAqB,8OAAC,iNAAA,CAAA,UAAO;gFAAC,WAAU;;;;;qGAA4B,8OAAC,oMAAA,CAAA,QAAK;gFAAC,WAAU;;;;;;0FACtF,8OAAC;gFAAK,WAAU;0FAAU;;;;;;;;;;;;;;;;;;;;;;;;mDAzB/B,KAAK,EAAE;;;;;4CA+BtB;;;;;;wCAGH,cAAc,MAAM,GAAG,gCACpB,8OAAC;4CAAI,WAAU;;8DACX,8OAAC;oDAAK,WAAU;;wDAAgC;wDACtC,aAAa,IAAI,cAAc;wDAAE;wDAAK;;;;;;;8DAEhD,8OAAC,kIAAA,CAAA,SAAM;oDACH,SAAQ;oDACR,MAAK;oDACL,SAAS;oDACT,UAAU,eAAe;8DAC5B;;;;;;8DAGD,8OAAC,kIAAA,CAAA,SAAM;oDACH,SAAQ;oDACR,MAAK;oDACL,SAAS;oDACT,UAAU,eAAe;8DAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAUxB,6BACG,8OAAC,8IAAA,CAAA,mBAAgB;gBACb,QAAQ;gBACR,cAAc;gBACd,UAAU,YAAY,QAAQ;gBAC9B,SAAS,YAAY,OAAO;gBAC5B,WAAW,YAAY,SAAS;gBAChC,YAAY,YAAY,UAAU;gBAClC,QAAQ,YAAY,MAAM;;;;;;0BAGlC,8OAAC,sJAAA,CAAA,2BAAwB;gBACrB,QAAQ;gBACR,cAAc;gBACd,WAAW;gBACX,YAAY;gBACZ,UAAU,cAAc;gBACxB,UAAS;;;;;;;;AAIzB;AAEe,SAAS;IACpB,qBAAO,8OAAC;;;;;AACZ","debugId":null}}]
}