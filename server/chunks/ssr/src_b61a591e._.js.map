{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm table-fixed\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;YAC1D,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles } from './drive';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less. It is currently ${processedString.length} characters.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [\"The sheet has no data to process.\"] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    const datFileName = `${tin}S${month}${year}.DAT`;\n    const reportTypeShort = \"Sales\";\n    const drivePath = [tin, reportTypeShort, year];\n\n     if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName,\n                datContent: null, error: null, errors: null,\n                totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n                totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n                processedData: null,\n            };\n        }\n    }\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, error: fileErrors[0], \n            datContent: null, fileName: null, errors: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 150, required: true }, { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false }, { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: false }, { name: 'Address 2', index: 6, maxLength: 30, required: false },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\",\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            processedData: null\n        };\n    }\n    \n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).catch(console.error);\n            \n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null, processedData: null\n    };\n}\n\n\nexport async function convertExcelToDat(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null,\n    };\n\n    if (!file || !reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for conversion.' };\n    }\n\n    try {\n        const profile: TaxProfile = JSON.parse(profileString);\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year, folderId, false);\n        }\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during conversion.';\n        console.error('[convertExcelToDat] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Conversion failed: ${errorMessage}` };\n    }\n}\n\nexport async function overwriteDatFile(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const processedDataString = formData.get('processedData') as string | null;\n    const nonCreditableTaxString = formData.get('nonCreditableInputTax') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null,\n    };\n\n    if (!reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for overwrite.' };\n    }\n     const profile: TaxProfile = JSON.parse(profileString);\n\n    try {\n        // This function now only generates the content and returns it immediately.\n        // The file upload will be handled by a separate background function.\n        if (reportType === \"Summary of Sales (SLS)\") {\n            if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n            return await generateSalesDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedDataString || nonCreditableTaxString === null) return { ...defaultErrorResult, error: 'Missing processed data for overwrite.' };\n            const processedData = JSON.parse(processedDataString);\n            const nonCreditableInputTax = parseFloat(nonCreditableTaxString);\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, true);\n        }\n\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported for overwrite.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Overwrite failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) return { ...defaultErrorResult, error: fileErrors[0] };\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 150, required: true }, { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false }, { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: false }, { name: 'Address 2', index: 6, maxLength: 30, required: false },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number,\n    folderId: string,\n    overwrite: boolean = false\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    const reportTypeShort = \"Purchases\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName,\n                datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null,\n                totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null,\n                totalOtherGoods: null, totalInputTax: null, processedData: null\n            };\n        }\n    }\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Non-blocking upload\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).catch(console.error);\n\n    return { \n        success: true, datContent, fileName: datFileName,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null, processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(formData: FormData): Promise<DatFileResult> {\n    const processedDataString = formData.get('processedData') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const nonCreditableInputTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null\n    };\n    \n    if (!processedDataString || !profileString || !month || !year || nonCreditableInputTaxString === null || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for purchase file creation.' };\n    }\n    \n    try {\n        const processedData = JSON.parse(processedDataString);\n        const profile: TaxProfile = JSON.parse(profileString);\n        const nonCreditableInputTax = parseFloat(nonCreditableInputTaxString);\n\n        return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, false);\n\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during DAT file creation.';\n        console.error('[createPurchasesDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Creation failed: ${errorMessage}` };\n    }\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const files = await listDatFiles(folderId);\n        return { success: true, files, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":";;;;;;IA8oBsB,cAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/checkbox.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,oKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kTACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,oKAAA,CAAA,YAA2B;YAC1B,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE;sBAEd,cAAA,8OAAC,oMAAA,CAAA,QAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,oKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/dat-files/page.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useEffect, useState, useTransition, useCallback } from 'react';\nimport { useRefresh } from '@/hooks/use-refresh';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Search, Trash, Loader2, SearchX, FileDown, Eye } from 'lucide-react';\nimport { getDatFiles } from '@/lib/actions';\nimport type { DatFile } from '@/lib/schemas';\nimport { useToast } from '@/hooks/use-toast';\nimport { format } from 'date-fns';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Badge } from '@/components/ui/badge';\n\nfunction DatFilesContent() {\n    const { setRefreshFunction } = useRefresh();\n    const [files, setFiles] = useState<DatFile[]>([]);\n    const [isPending, startTransition] = useTransition();\n    const [searchQuery, setSearchQuery] = useState('');\n    const [currentPage, setCurrentPage] = useState(1);\n    const [selectedFiles, setSelectedFiles] = useState<string[]>([]);\n    const { toast } = useToast();\n    const ITEMS_PER_PAGE = 10;\n\n    const fetchFiles = useCallback((isManualRefresh = false) => {\n        startTransition(async () => {\n            const folderId = localStorage.getItem('folderId');\n            if (!folderId) {\n                toast({ title: 'Error', description: 'User folder not found. Please log in again.', variant: 'destructive' });\n                return;\n            }\n            const result = await getDatFiles(folderId);\n            if (result.success && result.files) {\n                setFiles(result.files);\n                if (isManualRefresh) {\n                    toast({ title: 'Refresh Successful', description: 'The file list has been updated.' });\n                }\n            } else {\n                toast({ title: 'Error', description: result.error || 'Failed to fetch DAT files.', variant: 'destructive' });\n            }\n        });\n    }, [toast]);\n\n    useEffect(() => {\n        fetchFiles();\n        setRefreshFunction(() => () => fetchFiles(true));\n    }, [fetchFiles, setRefreshFunction]);\n\n    useEffect(() => {\n        setCurrentPage(1);\n        setSelectedFiles([]);\n    }, [searchQuery]);\n\n    const filteredFiles = files\n        .filter(file => file.name.toLowerCase().includes(searchQuery.toLowerCase()))\n        .sort((a, b) => new Date(b.modifiedTime).getTime() - new Date(a.modifiedTime).getTime());\n\n    const totalPages = Math.ceil(filteredFiles.length / ITEMS_PER_PAGE);\n    const paginatedFiles = filteredFiles.slice(\n        (currentPage - 1) * ITEMS_PER_PAGE,\n        currentPage * ITEMS_PER_PAGE\n    );\n    \n    const handlePreviousPage = () => {\n        setCurrentPage((prev) => Math.max(prev - 1, 1));\n        setSelectedFiles([]);\n    };\n\n    const handleNextPage = () => {\n        setCurrentPage((prev) => Math.min(prev + 1, totalPages));\n        setSelectedFiles([]);\n    };\n\n    const handleSelectRow = (fileId: string, checked: boolean) => {\n        if (checked) {\n            setSelectedFiles(prev => [...prev, fileId]);\n        } else {\n            setSelectedFiles(prev => prev.filter(id => id !== fileId));\n        }\n    };\n    \n    const parseFileName = (fileName: string) => {\n        const typeCode = fileName.charAt(9);\n        const month = fileName.substring(10, 12);\n        const year = fileName.substring(12, 16);\n\n        let transactionType = 'Unknown';\n        switch (typeCode) {\n            case 'S': transactionType = 'Sales'; break;\n            case 'P': transactionType = 'Purchases'; break;\n            case 'I': transactionType = 'Importations'; break;\n        }\n\n        const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n\n        return { transactionType, reportingPeriod };\n    };\n\n    const noResults = !isPending && paginatedFiles.length === 0;\n\n    return (\n        <div className=\"p-4 md:p-6 space-y-6\">\n            <h1 className=\"text-3xl font-bold\">DAT Files</h1>\n            <p className=\"text-muted-foreground\">Manage your generated DAT files.</p>\n            <Card>\n                <CardHeader>\n                    <div className=\"flex items-center gap-4 pt-2\">\n                        <div className=\"relative flex-1\">\n                            <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                                placeholder=\"Search by filename...\"\n                                className=\"pl-8\"\n                                value={searchQuery}\n                                onChange={(e) => setSearchQuery(e.target.value)}\n                            />\n                        </div>\n                    </div>\n                </CardHeader>\n                <CardContent>\n                    {isPending ? (\n                         <div className=\"h-48 text-center flex items-center justify-center\">\n                            <div className=\"flex items-center justify-center gap-2\">\n                                <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n                                <p className=\"text-muted-foreground\">Loading files...</p>\n                            </div>\n                        </div>\n                    ) : noResults ? (\n                        <div className=\"h-48 text-center flex flex-col items-center justify-center gap-4\">\n                           <SearchX className=\"h-12 w-12 text-muted-foreground\" />\n                            <h3 className=\"text-xl font-semibold\">No DAT Files Found</h3>\n                            <p className=\"text-muted-foreground\">\n                                {searchQuery ? \"No files matched your search.\" : \"You haven't generated any DAT files yet.\"}\n                            </p>\n                        </div>\n                    ) : (\n                       <>\n                         {/* Desktop Table View */}\n                        <div className=\"border rounded-md hidden md:block\">\n                            <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead className=\"w-[5%]\">\n                                        </TableHead>\n                                        <TableHead className=\"w-[35%]\">File Name</TableHead>\n                                        <TableHead className=\"w-[20%]\">Transaction Type</TableHead>\n                                        <TableHead className=\"w-[20%]\">Reporting Period</TableHead>\n                                        <TableHead className=\"w-[10%]\">Last Modified</TableHead>\n                                        <TableHead className=\"w-[10%] text-right\">Actions</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    {paginatedFiles.map((file) => {\n                                        const { transactionType, reportingPeriod } = parseFileName(file.name);\n                                        return (\n                                            <TableRow key={file.id} data-state={selectedFiles.includes(file.id) && \"selected\"}>\n                                                <TableCell>\n                                                        <Checkbox\n                                                        checked={selectedFiles.includes(file.id)}\n                                                        onCheckedChange={(checked) => handleSelectRow(file.id, Boolean(checked))}\n                                                        aria-label=\"Select row\"\n                                                    />\n                                                </TableCell>\n                                                <TableCell className=\"font-mono\">{file.name}</TableCell>\n                                                <TableCell>\n                                                    <Badge variant={transactionType === 'Sales' ? 'default' : 'secondary'}>{transactionType}</Badge>\n                                                </TableCell>\n                                                <TableCell>{reportingPeriod}</TableCell>\n                                                <TableCell>{format(new Date(file.modifiedTime), 'PP')}</TableCell>\n                                                <TableCell>\n                                                    <div className=\"flex items-center justify-end gap-2\">\n                                                        <Button variant=\"ghost\" size=\"icon\" onClick={() => console.log('View', file.id)}>\n                                                            <Eye className=\"h-4 w-4\" />\n                                                            <span className=\"sr-only\">View</span>\n                                                        </Button>\n                                                        <Button variant=\"ghost\" size=\"icon\" onClick={() => console.log('Download', file.id)}>\n                                                            <FileDown className=\"h-4 w-4\" />\n                                                            <span className=\"sr-only\">Download</span>\n                                                        </Button>\n                                                        <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive hover:text-destructive\" onClick={() => console.log('Delete', file.id)}>\n                                                            <Trash className=\"h-4 w-4\" />\n                                                            <span className=\"sr-only\">Delete</span>\n                                                        </Button>\n                                                    </div>\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                    })}\n                                </TableBody>\n                            </Table>\n                        </div>\n                        \n                        {/* Mobile Card View */}\n                        <div className=\"block md:hidden space-y-4\">\n                            {paginatedFiles.map((file) => {\n                                const { transactionType, reportingPeriod } = parseFileName(file.name);\n                                return (\n                                <Card key={file.id} className=\"p-4\" data-state={selectedFiles.includes(file.id) && \"selected\"}>\n                                    <div className=\"flex items-center\">\n                                        <Checkbox\n                                            checked={selectedFiles.includes(file.id)}\n                                            onCheckedChange={(checked) => handleSelectRow(file.id, Boolean(checked))}\n                                            aria-label=\"Select row\"\n                                            className=\"mr-4\"\n                                        />\n                                        <div className=\"flex-1 overflow-hidden\">\n                                            <p className=\"font-semibold font-mono truncate\" title={file.name}>{file.name}</p>\n                                            <p className=\"text-sm text-muted-foreground\">{reportingPeriod}</p>\n                                            <div className=\"flex items-center gap-4 mt-3\">\n                                                <Badge variant={transactionType === 'Sales' ? 'default' : 'secondary'}>{transactionType}</Badge>\n                                            </div>\n                                        </div>\n                                        <div className=\"flex flex-col items-center flex-shrink-0 ml-2\">\n                                            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => console.log('View', file.id)}>\n                                                <Eye className=\"h-4 w-4\" />\n                                                <span className=\"sr-only\">View</span>\n                                            </Button>\n                                            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => console.log('Download', file.id)}>\n                                                <FileDown className=\"h-4 w-4\" />\n                                                <span className=\"sr-only\">Download</span>\n                                            </Button>\n                                            <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-destructive hover:text-destructive\" onClick={() => console.log('Delete', file.id)}>\n                                                <Trash className=\"h-4 w-4\" />\n                                                <span className=\"sr-only\">Delete</span>\n                                            </Button>\n                                        </div>\n                                    </div>\n                                </Card>\n                                )\n                            })}\n                        </div>\n                        \n                        {filteredFiles.length > ITEMS_PER_PAGE && (\n                            <div className=\"flex items-center justify-end space-x-2 py-4 px-0 md:px-4\">\n                                <span className=\"text-sm text-muted-foreground\">\n                                    Page {totalPages > 0 ? currentPage : 0} of {totalPages}\n                                </span>\n                                <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={handlePreviousPage}\n                                    disabled={currentPage <= 1}\n                                >\n                                    Previous\n                                </Button>\n                                <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    onClick={handleNextPage}\n                                    disabled={currentPage >= totalPages}\n                                >\n                                    Next\n                                </Button>\n                            </div>\n                        )}\n                       </>\n                    )}\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nexport default function DatFilesPage() {\n    return <DatFilesContent />;\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}