{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/schemas.ts"],"sourcesContent":["/**\n * @fileOverview Shared Zod schemas and TypeScript types for AI flows.\n */\nimport {z} from 'genkit';\n\nexport const ExcelErrorDetectionInputSchema = z.object({\n  excelDataUri: z\n    .string()\n    .describe(\n      \"The Excel file data as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ExcelErrorDetectionInput = z.infer<typeof ExcelErrorDetectionInputSchema>;\n\nexport const ExcelErrorDetectionOutputSchema = z.object({\n  errors: z\n    .array(z.string())\n    .describe('A list of potential errors and inconsistencies found in the Excel file.'),\n  suggestions: z\n    .array(z.string())\n    .describe('A list of suggestions to fix the errors and inconsistencies.'),\n});\nexport type ExcelErrorDetectionOutput = z.infer<typeof ExcelErrorDetectionOutputSchema>;\n"],"names":[],"mappings":"AAAA;;CAEC;;;;AACD;AAAA;;AAEO,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGO,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,QAAQ,uIAAA,CAAA,IAAC,CACN,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CACX,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;AACd","debugId":null}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/excel-error-detection.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Analyzes an Excel file for potential errors and inconsistencies using AI.\n *\n * - excelErrorDetection - A function that handles the Excel file analysis process.\n */\n\nimport {ai} from '@/ai/genkit';\nimport type { ExcelErrorDetectionInput } from '@/ai/schemas';\nimport { ExcelErrorDetectionInputSchema, ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\n\n\nexport async function excelErrorDetection(input: ExcelErrorDetectionInput): Promise<ExcelErrorDetectionOutput> {\n  return excelErrorDetectionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'excelErrorDetectionPrompt',\n  input: {schema: ExcelErrorDetectionInputSchema},\n  output: {schema: ExcelErrorDetectionOutputSchema},\n  prompt: `You are an AI assistant that analyzes Excel files for potential errors and inconsistencies.\n\nYou will receive the Excel file data as a data URI.\n\nAnalyze the Excel data and identify any potential errors, inconsistencies, or formatting issues that might cause problems during conversion to .DAT or PDF formats.\n\nProvide a list of errors and a list of suggestions to fix them.\n\nExcel Data: {{media url=excelDataUri}}\n\nErrors:\n{{errors}}\n\nSuggestions:\n{{suggestions}}`,\n});\n\nconst excelErrorDetectionFlow = ai.defineFlow(\n  {\n    name: 'excelErrorDetectionFlow',\n    inputSchema: ExcelErrorDetectionInputSchema,\n    outputSchema: ExcelErrorDetectionOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;CAIC,GAED;AAEA;;;;;;AAIO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,oHAAA,CAAA,iCAA8B;IAAA;IAC9C,QAAQ;QAAC,QAAQ,oHAAA,CAAA,kCAA+B;IAAA;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;eAcI,CAAC;AAChB;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,iCAA8B;IAC3C,cAAc,oHAAA,CAAA,kCAA+B;AAC/C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/googlesheets.ts"],"sourcesContent":["\nimport { google } from 'googleapis';\nimport { z } from 'zod';\nimport type { TaxProfile } from './schemas';\nimport { TaxProfileSchema } from './schemas';\n\nconst signupSchema = z.object({\n  userName: z.string(),\n  email: z.string().email(),\n  password: z.string(),\n});\n\nconst loginSchema = z.object({\n  userName: z.string(),\n  password: z.string(),\n});\n\nexport type SignupData = z.infer<typeof signupSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\n\n\nconst {\n  GOOGLE_SHEETS_CLIENT_EMAIL,\n  GOOGLE_SHEETS_PRIVATE_KEY,\n  GOOGLE_SHEETS_SHEET_ID,\n} = process.env;\n\nif (!GOOGLE_SHEETS_CLIENT_EMAIL || !GOOGLE_SHEETS_PRIVATE_KEY || !GOOGLE_SHEETS_SHEET_ID) {\n  throw new Error('Google Sheets API credentials are not configured in .env');\n}\n\nconst auth = new google.auth.GoogleAuth({\n  credentials: {\n    client_email: GOOGLE_SHEETS_CLIENT_EMAIL,\n    private_key: GOOGLE_SHEETS_PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n  },\n  scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n});\n\nconst sheets = google.sheets({ version: 'v4', auth });\nconst SPREADSHEET_ID = GOOGLE_SHEETS_SHEET_ID;\nconst SHEET_NAME = 'credentials';\n\nexport async function appendUserToSheet(userData: SignupData) {\n  const { email, userName, password } = userData;\n  const timestamp = new Date().toISOString();\n\n  // Mapping to sheet headers: emailAddress, userName, pwd, databaseID, folderID, status, lastLogin, runtime\n  const values = [[email, userName, password, '', '', 'active', timestamp, '']];\n\n  const request = {\n    spreadsheetId: SPREADSHEET_ID,\n    range: `${SHEET_NAME}!A1`, // Appends to the first empty row of the sheet\n    valueInputOption: 'USER_ENTERED',\n    resource: {\n      values,\n    },\n  };\n\n  try {\n    const response = await sheets.spreadsheets.values.append(request);\n    console.log('Appended to sheet:', response.data);\n    return response.data;\n  } catch (err) {\n    console.error('The API returned an error: ' + err);\n    throw new Error('Failed to append data to Google Sheet.');\n  }\n}\n\nexport async function getAllUsers() {\n    try {\n        const response = await sheets.spreadsheets.values.get({\n            spreadsheetId: SPREADSHEET_ID,\n            range: SHEET_NAME,\n        });\n\n        const rows = response.data.values;\n        if (!rows || rows.length === 0) {\n            return [];\n        }\n\n        const header = rows[0];\n        const emailIndex = header.indexOf('emailAddress');\n        const userNameIndex = header.indexOf('userName');\n        const pwdIndex = header.indexOf('pwd');\n        const databaseIdIndex = header.indexOf('databaseID');\n\n        if (userNameIndex === -1 || pwdIndex === -1 || emailIndex === -1 || databaseIdIndex === -1) {\n            throw new Error('Could not find required columns in the credentials sheet.');\n        }\n\n        return rows.slice(1).map(row => ({\n            emailAddress: row[emailIndex] || '',\n            userName: row[userNameIndex] || '',\n            pwd: row[pwdIndex] || '',\n            databaseId: row[databaseIdIndex] || '',\n        }));\n\n    } catch (err) {\n        console.error('The API returned an error: ' + err);\n        throw new Error('Failed to retrieve data from Google Sheet.');\n    }\n}\n\n\nexport async function getAllHeaderDataFromSheet(databaseId: string): Promise<TaxProfile[]> {\n  try {\n    const response = await sheets.spreadsheets.values.get({\n      spreadsheetId: databaseId,\n      range: 'tpList!A:Q',\n    });\n\n    const rows = response.data.values;\n    if (!rows || rows.length < 2) {\n      return [];\n    }\n\n    const header = rows[0];\n    const dataRows = rows.slice(1);\n    \n    const objects = dataRows\n        .map(row => {\n            const rowData: { [key: string]: any } = {};\n            header.forEach((key, headerIndex) => {\n                rowData[key] = row[headerIndex] || '';\n            });\n            return rowData as TaxProfile;\n        })\n        .filter(profile => profile.tpTIN && typeof profile.tpTIN === 'string' && profile.tpTIN.trim() !== '');\n\n    return objects;\n\n  } catch (err) {\n    console.error(`The API returned an error for spreadsheet ${databaseId}: ` + err);\n    throw new Error('Failed to retrieve header data from Google Sheet.');\n  }\n}\n\nexport async function appendHeaderDataToSheet(profileData: TaxProfile, databaseId: string) {\n  const headerResponse = await sheets.spreadsheets.values.get({\n    spreadsheetId: databaseId,\n    range: 'tpList!A1:Q1',\n  });\n  \n  const headers = headerResponse.data.values?.[0];\n  if (!headers) {\n    throw new Error('Could not retrieve headers from tpList sheet.');\n  }\n\n  const values = [headers.map(header => profileData[header as keyof TaxProfile] || '')];\n\n  const request = {\n    spreadsheetId: databaseId,\n    range: `tpList!A1`,\n    valueInputOption: 'USER_ENTERED',\n    resource: {\n      values,\n    },\n  };\n\n  try {\n    const response = await sheets.spreadsheets.values.append(request);\n    console.log('Appended to sheet:', response.data);\n    return response.data;\n  } catch (err) {\n    console.error('The API returned an error: ' + err);\n    throw new Error('Failed to append data to Google Sheet.');\n  }\n}\n\nexport async function updateHeaderDataInSheet(profileData: TaxProfile, databaseId: string) {\n  const range = 'tpList!A:Q';\n  const getResponse = await sheets.spreadsheets.values.get({\n    spreadsheetId: databaseId,\n    range,\n  });\n\n  const rows = getResponse.data.values;\n  if (!rows || rows.length === 0) {\n    throw new Error('No data found in the sheet.');\n  }\n\n  const headers = rows[0];\n  const tinIndex = headers.indexOf('tpTIN');\n  if (tinIndex === -1) {\n    throw new Error('TIN column not found in the sheet.');\n  }\n  \n  const rowIndex = rows.findIndex(row => row[tinIndex] === profileData.tpTIN);\n\n  if (rowIndex === -1) {\n    throw new Error('Profile with the specified TIN not found.');\n  }\n  \n  const rowToUpdate = rowIndex + 1;\n  const values = [headers.map(header => profileData[header as keyof TaxProfile] || '')];\n\n  const request = {\n    spreadsheetId: databaseId,\n    range: `tpList!A${rowToUpdate}`,\n    valueInputOption: 'USER_ENTERED',\n    resource: {\n      values,\n    },\n  };\n\n  try {\n    const response = await sheets.spreadsheets.values.update(request);\n    console.log('Updated sheet:', response.data);\n    return response.data;\n  } catch (err) {\n    console.error('The API returned an error: ' + err);\n    throw new Error('Failed to update data in Google Sheet.');\n  }\n}\n\nasync function getSheetId(spreadsheetId: string, sheetName: string): Promise<number | null> {\n    const response = await sheets.spreadsheets.get({\n        spreadsheetId,\n    });\n    const sheet = response.data.sheets?.find(s => s.properties?.title === sheetName);\n    return sheet?.properties?.sheetId ?? null;\n}\n\nexport async function deleteHeaderDataRowInSheet(tpTIN: string, databaseId: string) {\n  const sheetName = 'tpList';\n  const range = `${sheetName}!A:Q`;\n\n  // 1. Get all data to find the row index\n  const getResponse = await sheets.spreadsheets.values.get({\n    spreadsheetId: databaseId,\n    range,\n  });\n\n  const rows = getResponse.data.values;\n  if (!rows || rows.length === 0) {\n    console.log('No data found in the sheet to delete.');\n    return;\n  }\n\n  const headers = rows[0];\n  const tinIndex = headers.indexOf('tpTIN');\n  if (tinIndex === -1) {\n    throw new Error('TIN column not found in the sheet.');\n  }\n\n  const rowIndex = rows.findIndex(row => row[tinIndex] === tpTIN);\n\n  if (rowIndex === -1) {\n    console.log(`Profile with TIN ${tpTIN} not found for deletion.`);\n    return; // Profile not found, so nothing to delete\n  }\n\n  // 2. Get the sheetId required for batchUpdate\n  const sheetId = await getSheetId(databaseId, sheetName);\n  if (sheetId === null) {\n      throw new Error(`Sheet with name \"${sheetName}\" not found.`);\n  }\n\n  // 3. Perform batch update to delete the row and add a blank one\n  const batchUpdateRequest = {\n    spreadsheetId: databaseId,\n    resource: {\n      requests: [\n        {\n          deleteDimension: {\n            range: {\n              sheetId: sheetId,\n              dimension: 'ROWS',\n              startIndex: rowIndex, // The 0-based index of the row to delete.\n              endIndex: rowIndex + 1\n            }\n          }\n        },\n        {\n          appendDimension: {\n            sheetId: sheetId,\n            dimension: \"ROWS\",\n            length: 1\n          }\n        }\n      ]\n    }\n  };\n\n  try {\n    await sheets.spreadsheets.batchUpdate(batchUpdateRequest);\n    console.log(`Successfully deleted row at index ${rowIndex} and added a new one.`);\n  } catch (err) {\n    console.error('The API returned an error during batch update: ' + err);\n    throw new Error('Failed to delete row from Google Sheet.');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 638, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/schemas.ts"],"sourcesContent":["import { z } from 'zod';\n\nconst alphanumericWithSpaces = (name: string, length: number, required = true) => {\n  const schema = z.string()\n   .max(length, `${name} must be ${length} characters or less.`)\n   .regex(/^[a-zA-Z0-9\\s]*$/, `${name} must only contain letters, numbers, and spaces.`);\n  \n  if (required) {\n    return schema.min(1, `${name} is required.`);\n  }\n  return schema.optional().or(z.literal(''));\n};\n\nexport const TaxProfileSchema = z.object({\n  tpTIN: z.string().regex(/^[0-9]{9}$/, 'TIN must be 9 digits.'),\n  branchCode: z.string().regex(/^[0-9]{4}$/, 'Branch code must be 4 digits.'),\n  rdoCode: z.string().min(1, 'RDO Code is required.'),\n  entityType: z.string(),\n  cycleType: z.string(),\n  monthSelect: z.string().min(1, 'Month is required.'),\n  companyName: alphanumericWithSpaces('Company Name', 50, false),\n  lastName: alphanumericWithSpaces('Last Name', 30, false),\n  firstName: alphanumericWithSpaces('First Name', 30, false),\n  middleName: alphanumericWithSpaces('Middle Name', 30, false),\n  tradeName: alphanumericWithSpaces('Trade Name', 50),\n  subStreet: z.string().max(30, 'Unit/Floor/Substreet must be 30 characters or less.').optional().or(z.literal('')),\n  street: z.string().max(30, 'Street must be 30 characters or less.').min(1, 'Street is required.'),\n  barangay: z.string().max(30, 'Barangay must be 30 characters or less.').min(1, 'Barangay is required.'),\n  cityMunicipality: z.string().max(30, 'City/Municipality must be 30 characters or less.').min(1, 'City/Municipality is required.'),\n  province: z.string().max(30, 'Province must be 30 characters or less.').min(1, 'Province is required.'),\n  zipCode: z.string().regex(/^[0-9]{4}$/, 'Zip code must be 4 digits.'),\n}).passthrough().refine(data => {\n    if (data.entityType === 'Individual') {\n        return !!data.lastName && !!data.firstName && !!data.middleName;\n    }\n    return true;\n}, {\n    message: \"First, Middle, and Last name are required for individuals.\",\n    path: [\"lastName\"], \n}).refine(data => {\n    if (data.entityType === 'Non-Individual') {\n        return !!data.companyName;\n    }\n    return true;\n}, {\n    message: \"Company name is required for non-individuals.\",\n    path: [\"companyName\"],\n});\n\n\nexport type TaxProfile = z.infer<typeof TaxProfileSchema>;\n\n\nexport const MutationResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    data: TaxProfileSchema.nullable(),\n});\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,yBAAyB,CAAC,MAAc,QAAgB,WAAW,IAAI;IAC3E,MAAM,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GACrB,GAAG,CAAC,QAAQ,GAAG,KAAK,SAAS,EAAE,OAAO,oBAAoB,CAAC,EAC3D,KAAK,CAAC,oBAAoB,GAAG,KAAK,gDAAgD,CAAC;IAErF,IAAI,UAAU;QACZ,OAAO,OAAO,GAAG,CAAC,GAAG,GAAG,KAAK,aAAa,CAAC;IAC7C;IACA,OAAO,OAAO,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;AACxC;AAEO,MAAM,mBAAmB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC,cAAc;IACtC,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC,cAAc;IAC3C,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC3B,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM;IACpB,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM;IACnB,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,aAAa,uBAAuB,gBAAgB,IAAI;IACxD,UAAU,uBAAuB,aAAa,IAAI;IAClD,WAAW,uBAAuB,cAAc,IAAI;IACpD,YAAY,uBAAuB,eAAe,IAAI;IACtD,WAAW,uBAAuB,cAAc;IAChD,WAAW,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,uDAAuD,QAAQ,GAAG,EAAE,CAAC,oIAAA,CAAA,IAAC,CAAC,OAAO,CAAC;IAC7G,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,yCAAyC,GAAG,CAAC,GAAG;IAC3E,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,2CAA2C,GAAG,CAAC,GAAG;IAC/E,kBAAkB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,oDAAoD,GAAG,CAAC,GAAG;IAChG,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,2CAA2C,GAAG,CAAC,GAAG;IAC/E,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC,cAAc;AAC1C,GAAG,WAAW,GAAG,MAAM,CAAC,CAAA;IACpB,IAAI,KAAK,UAAU,KAAK,cAAc;QAClC,OAAO,CAAC,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,KAAK,SAAS,IAAI,CAAC,CAAC,KAAK,UAAU;IACnE;IACA,OAAO;AACX,GAAG;IACC,SAAS;IACT,MAAM;QAAC;KAAW;AACtB,GAAG,MAAM,CAAC,CAAA;IACN,IAAI,KAAK,UAAU,KAAK,kBAAkB;QACtC,OAAO,CAAC,CAAC,KAAK,WAAW;IAC7B;IACA,OAAO;AACX,GAAG;IACC,SAAS;IACT,MAAM;QAAC;KAAc;AACzB;AAMO,MAAM,uBAAuB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,SAAS,oIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,MAAM,iBAAiB,QAAQ;AACnC","debugId":null}},
    {"offset": {"line": 701, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet } from './googlesheets';\nimport type { TaxProfile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema } from './schemas';\nimport * as xlsx from 'xlsx';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    await appendUserToSheet(userData);\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less. It is currently ${processedString.length} characters.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [\"The sheet has no data to process.\"] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nexport async function convertExcelToDat(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null,\n    };\n\n    if (!file) return { ...defaultErrorResult, error: 'No file uploaded.' };\n    if (!reportType) return { ...defaultErrorResult, error: 'Report type not specified.' };\n    if (!month) return { ...defaultErrorResult, error: 'Month not specified.' };\n    if (!year) return { ...defaultErrorResult, error: 'Year not specified.' };\n    if (!profileString) return { ...defaultErrorResult, error: 'Profile not provided.' };\n\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n            if (fileErrors.length > 0) return { ...defaultErrorResult, error: fileErrors[0] };\n\n            const validationErrors: string[] = [];\n            \n            const processedData = dataRows.map((row, index) => {\n                const originalRowNumber = index + 2;\n                const processedRow = [...row];\n\n                if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n                    const originalTin = String(processedRow[0]);\n                    const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n\n                    if (sanitizedTin.substring(0, 9) === tin) {\n                        validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n                    }\n\n                    if (sanitizedTin.length < 9) {\n                        validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n                    }\n                    processedRow[0] = sanitizedTin.substring(0, 9);\n                } else {\n                     validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n                }\n\n                const nameFieldsInfo = [\n                    { name: 'Registered Name', index: 1, maxLength: 150, required: true },\n                    { name: 'Last Name', index: 2, maxLength: 30, required: false },\n                    { name: 'First Name', index: 3, maxLength: 30, required: false },\n                    { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n                    { name: 'Address 1', index: 5, maxLength: 30, required: false },\n                    { name: 'Address 2', index: 6, maxLength: 30, required: false },\n                ];\n                nameFieldsInfo.forEach(field => {\n                    const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                    if (result.error) validationErrors.push(result.error);\n                    processedRow[field.index] = result.value;\n                });\n                \n                const hasFirstName = String(processedRow[3]).trim().length > 0;\n                const hasLastName = String(processedRow[2]).trim().length > 0;\n                const hasMiddleName = String(processedRow[4]).trim().length > 0;\n                if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n                if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n                const numericFields = [\n                    { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n                    { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n                ];\n                numericFields.forEach(field => {\n                    const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                    if (result.error) validationErrors.push(result.error);\n                    processedRow[field.index] = result.value;\n                });\n                \n                if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n                    validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n                }\n\n                return processedRow;\n            });\n\n            if (validationErrors.length > 0) return { ...defaultErrorResult, success: false, error: \"Validation failed.\", errors: validationErrors };\n            \n            const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n            const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n            const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n            const detailRows = processedData.map(row => {\n                const finalRow = [\n                    'D', 'S',\n                    quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]),\n                    quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n                    quoteIfNotEmpty(row[6]),\n                    row[7], row[8], row[9], row[10],\n                    tin, lastDayDate,\n                ];\n                return finalRow.join(',');\n            }).join('\\n');\n            \n            const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n            const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n            const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n            const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n            \n            const headerRow = [\n                'H', 'S', quoteIfNotEmpty(tin),\n                quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName),\n                quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName),\n                quoteIfNotEmpty(address1), quoteIfNotEmpty(address2),\n                totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2),\n                profile.rdoCode, lastDayDate, profile.monthSelect\n            ].join(',');\n            \n            const datContent = `${headerRow}\\n${detailRows}`;\n            const datFileName = `${tin}S${month}${year}.DAT`;\n                \n            return { \n                ...defaultErrorResult, success: true, datContent, fileName: datFileName,\n                totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax\n            };\n        }\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during conversion.';\n        console.error('[convertExcelToDat] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Conversion failed: ${errorMessage}` };\n    }\n}\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) return { ...defaultErrorResult, error: fileErrors[0] };\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 150, required: true }, { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false }, { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: false }, { name: 'Address 2', index: 6, maxLength: 30, required: false },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\ninterface CreatePurchasesDatFileArgs {\n    processedData: any[][];\n    profile: TaxProfile;\n    month: string;\n    year: string;\n    nonCreditableInputTax: number;\n}\n\nexport async function createPurchasesDatFile({\n    processedData,\n    profile,\n    month,\n    year,\n    nonCreditableInputTax\n}: CreatePurchasesDatFileArgs): Promise<DatFileResult> {\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        processedData: null\n    };\n    \n    try {\n        const { tpTIN: tin } = profile;\n        const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n        const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n        const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n        const detailRows = processedData.map(row => {\n            const finalRow = [\n                'D', 'P',\n                quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]),\n                quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n                quoteIfNotEmpty(row[6]),\n                row[7], row[8], row[9], row[10], row[11], row[12],\n                tin, lastDayDate,\n            ];\n            return finalRow.join(',');\n        }).join('\\n');\n\n        const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n        const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n        const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n        const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n        const headerRow = [\n            'H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName),\n            quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName),\n            quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2),\n            totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), \n            totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2),\n            profile.rdoCode, lastDayDate, profile.monthSelect\n        ].join(',');\n\n        const datContent = `${headerRow}\\n${detailRows}`;\n        const datFileName = `${tin}P${month}${year}.DAT`;\n\n        return { \n            ...defaultErrorResult,\n            success: true, datContent, fileName: datFileName,\n            totalExempt, totalZeroRated,\n            totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax\n        };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during DAT file creation.';\n        console.error('[createPurchasesDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Creation failed: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1560, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {loginUser as '40684f4520a7c51a570d419ba1c98670ab6ba52b14'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1612, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 1626, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/login/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsQ,GACnS,oCACA","debugId":null}},
    {"offset": {"line": 1640, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}