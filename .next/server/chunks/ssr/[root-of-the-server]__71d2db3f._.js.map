{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm table-fixed\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;YAC1D,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions/drive.ts"],"sourcesContent":["\n'use server';\n\nimport { listDatFiles, downloadFileFromDrive, deleteFileFromDrive, getInitialPageTokenForDrive, listChangesSincePageToken } from '../drive';\nimport type { DatFile } from '@/lib/schemas';\nimport { DatFileSchema } from '@/lib/schemas';\nimport { z } from 'zod';\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  folderIds: z.array(z.string()).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, folderIds: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const { files, folderIds } = await listDatFiles(folderId);\n        return { success: true, files, folderIds, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, folderIds: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (error: any) {\n        if (error.code === 404) {\n            return { success: false, content: null, error: 'File not found.' };\n        }\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\n\nexport async function deleteDatFile(fileId: string): Promise<SimpleResult> {\n    try {\n        if (!fileId) {\n            return { success: false, error: 'File ID is required.' };\n        }\n        await deleteFileFromDrive(fileId);\n        return { success: true, error: null };\n    } catch (error: any) {\n        if (error.code === 404) {\n            return { success: false, error: 'File not found.' };\n        }\n        console.error(`[deleteDatFile] CRITICAL ERROR for fileId ${fileId}:`, error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete file: ${errorMessage}` };\n    }\n}\n\nconst PageTokenResultSchema = z.object({\n  success: z.boolean(),\n  token: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype PageTokenResult = z.infer<typeof PageTokenResultSchema>;\n\nexport async function getInitialPageToken(): Promise<PageTokenResult> {\n    try {\n        const token = await getInitialPageTokenForDrive();\n        return { success: true, token, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, token: null, error: `Failed to get initial page token: ${errorMessage}` };\n    }\n}\n\nconst ChangesResultSchema = z.object({\n  success: z.boolean(),\n  hasChanges: z.boolean(),\n  newToken: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype ChangesResult = z.infer<typeof ChangesResultSchema>;\n\nexport async function checkForDatFileChanges(allFolderIds: string[], pageToken: string): Promise<ChangesResult> {\n    if (!allFolderIds || allFolderIds.length === 0 || !pageToken) {\n        return { success: false, hasChanges: false, newToken: null, error: 'Folder IDs and page token are required.' };\n    }\n    try {\n        const { hasChanges, newPageToken } = await listChangesSincePageToken(allFolderIds, pageToken);\n        return { success: true, hasChanges, newToken: newPageToken, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, hasChanges: false, newToken: pageToken, error: `Failed to check for changes: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAsCsB,oBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions/drive.ts"],"sourcesContent":["\n'use server';\n\nimport { listDatFiles, downloadFileFromDrive, deleteFileFromDrive, getInitialPageTokenForDrive, listChangesSincePageToken } from '../drive';\nimport type { DatFile } from '@/lib/schemas';\nimport { DatFileSchema } from '@/lib/schemas';\nimport { z } from 'zod';\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  folderIds: z.array(z.string()).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, folderIds: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const { files, folderIds } = await listDatFiles(folderId);\n        return { success: true, files, folderIds, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, folderIds: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (error: any) {\n        if (error.code === 404) {\n            return { success: false, content: null, error: 'File not found.' };\n        }\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\n\nexport async function deleteDatFile(fileId: string): Promise<SimpleResult> {\n    try {\n        if (!fileId) {\n            return { success: false, error: 'File ID is required.' };\n        }\n        await deleteFileFromDrive(fileId);\n        return { success: true, error: null };\n    } catch (error: any) {\n        if (error.code === 404) {\n            return { success: false, error: 'File not found.' };\n        }\n        console.error(`[deleteDatFile] CRITICAL ERROR for fileId ${fileId}:`, error);\n        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete file: ${errorMessage}` };\n    }\n}\n\nconst PageTokenResultSchema = z.object({\n  success: z.boolean(),\n  token: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype PageTokenResult = z.infer<typeof PageTokenResultSchema>;\n\nexport async function getInitialPageToken(): Promise<PageTokenResult> {\n    try {\n        const token = await getInitialPageTokenForDrive();\n        return { success: true, token, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, token: null, error: `Failed to get initial page token: ${errorMessage}` };\n    }\n}\n\nconst ChangesResultSchema = z.object({\n  success: z.boolean(),\n  hasChanges: z.boolean(),\n  newToken: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype ChangesResult = z.infer<typeof ChangesResultSchema>;\n\nexport async function checkForDatFileChanges(allFolderIds: string[], pageToken: string): Promise<ChangesResult> {\n    if (!allFolderIds || allFolderIds.length === 0 || !pageToken) {\n        return { success: false, hasChanges: false, newToken: null, error: 'Folder IDs and page token are required.' };\n    }\n    try {\n        const { hasChanges, newPageToken } = await listChangesSincePageToken(allFolderIds, pageToken);\n        return { success: true, hasChanges, newToken: newPageToken, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, hasChanges: false, newToken: pageToken, error: `Failed to check for changes: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":";;;;;;IA+DsB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/checkbox.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,oKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kTACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,oKAAA,CAAA,YAA2B;YAC1B,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE;sBAEd,cAAA,8OAAC,oMAAA,CAAA,QAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,oKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollBar orientation=\"horizontal\" />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,8OAAC,0KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,8OAAC;;;;;0BACD,8OAAC;gBAAU,aAAY;;;;;;0BACvB,8OAAC,0KAAA,CAAA,SAA0B;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC,0KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;AAGnD,UAAU,WAAW,GAAG,0KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 476, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/dat-preview-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Button } from './ui/button';\nimport { Download, CheckCircle, Eye } from 'lucide-react';\nimport { ScrollArea, ScrollBar } from './ui/scroll-area';\n\ninterface Totals {\n    exempt?: number;\n    zeroRated?: number;\n    vatable?: number;\n    outputVat?: number;\n    services?: number;\n    capitalGoods?: number;\n    otherGoods?: number;\n    inputTax?: number;\n    taxableIncome?: number;\n    exemptIncome?: number;\n    withholdingTax?: number;\n}\n\nexport interface DatPreviewState {\n    fileName: string;\n    content: string;\n    isViewing?: boolean;\n    reportType?: 'sales' | 'purchases' | '1601eq' | 'sawt' | '1601fq' | 'none';\n    totals?: Totals;\n}\n\ninterface DatPreviewDialogProps extends DatPreviewState {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n\nexport function DatPreviewDialog({\n  isOpen,\n  onOpenChange,\n  fileName,\n  content,\n  isViewing = false,\n  reportType = 'none',\n  totals = {},\n}: DatPreviewDialogProps) {\n\n  const handleDownload = () => {\n    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n  \n  const formatCurrency = (value: number | undefined) => {\n    if (value === undefined) return '0.00';\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value);\n  }\n\n  const showDownload = !isViewing || (isViewing && reportType !== 'none');\n\n  const title = isViewing ? \"DAT File Preview\" : \"Conversion Successful\";\n  const description = isViewing \n        ? \"Review the content of the DAT file below.\"\n        : \"Your DAT file is ready. Please review the content below before downloading.\";\n  const icon = isViewing ? <Eye className=\"w-6 h-6 text-primary\" /> : <CheckCircle className=\"w-6 h-6 text-accent-foreground\" />;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl w-full h-[80vh] flex flex-col p-0 bg-white text-black\">\n        <DialogHeader className=\"p-6 pb-4 shrink-0\">\n            <div className=\"flex items-center gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n                    {icon}\n                </div>\n                <div>\n                    <DialogTitle className=\"text-xl text-black\">{title}</DialogTitle>\n                    <DialogDescription className=\"text-slate-600\">\n                        {description}\n                    </DialogDescription>\n                </div>\n            </div>\n        </DialogHeader>\n        <div className=\"flex-1 px-6 pb-4 flex flex-col gap-4 min-h-0\">\n            <div className=\"font-mono text-sm space-y-1 shrink-0\">\n                <p><span className=\"font-semibold\">Filename:</span> {fileName}</p>\n                {reportType === 'sales' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Exempt:</span> {formatCurrency(totals.exempt)}</p>\n                        <p><span className=\"font-semibold\">Total Zero-Rated:</span> {formatCurrency(totals.zeroRated)}</p>\n                        <p><span className=\"font-semibold\">Total Vatable:</span> {formatCurrency(totals.vatable)}</p>\n                        <p><span className=\"font-semibold\">Total Output VAT:</span> {formatCurrency(totals.outputVat)}</p>\n                    </>\n                )}\n                {reportType === 'purchases' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Exempt Purchases:</span> {formatCurrency(totals.exempt)}</p>\n                        <p><span className=\"font-semibold\">Total Zero-Rated Purchases:</span> {formatCurrency(totals.zeroRated)}</p>\n                        <p><span className=\"font-semibold\">Total Purchases of Services:</span> {formatCurrency(totals.services)}</p>\n                        <p><span className=\"font-semibold\">Total Purchases of Capital Goods:</span> {formatCurrency(totals.capitalGoods)}</p>\n                        <p><span className=\"font-semibold\">Total Purchases of Other Goods:</span> {formatCurrency(totals.otherGoods)}</p>\n                        <p><span className=\"font-semibold\">Total Input Tax:</span> {formatCurrency(totals.inputTax)}</p>\n                    </>\n                )}\n                {reportType === '1601eq' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Taxable Income Payment:</span> {formatCurrency(totals.taxableIncome)}</p>\n                        <p><span className=\"font-semibold\">Total Exempt Income Payment:</span> {formatCurrency(totals.exemptIncome)}</p>\n                        <p><span className=\"font-semibold\">Total Withholding Tax:</span> {formatCurrency(totals.withholdingTax)}</p>\n                    </>\n                )}\n                 {reportType === 'sawt' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Income Payment:</span> {formatCurrency(totals.taxableIncome)}</p>\n                        <p><span className=\"font-semibold\">Total Tax Withheld:</span> {formatCurrency(totals.withholdingTax)}</p>\n                    </>\n                )}\n                 {reportType === '1601fq' && (\n                    <>\n                        <p><span className=\"font-semibold\">Total Withholding Tax:</span> {formatCurrency(totals.withholdingTax)}</p>\n                        <p><span className=\"font-semibold\">Total Fringe Benefit Tax:</span> {formatCurrency(totals.services)}</p>\n                        <p><span className=\"font-semibold\">Total Exempt Income Payment:</span> {formatCurrency(totals.exemptIncome)}</p>\n                    </>\n                )}\n            </div>\n            <ScrollArea className=\"flex-1 border rounded-md\">\n                <pre className=\"p-4 text-xs font-mono whitespace-pre\">{content}</pre>\n                <ScrollBar orientation=\"horizontal\" />\n            </ScrollArea>\n        </div>\n        <DialogFooter className=\"p-4 border-t shrink-0\">\n          {showDownload && (\n              <Button onClick={handleDownload}>\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download\n              </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1031, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1158, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/delete-confirmation-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { Loader2 } from 'lucide-react';\n\ninterface DeleteConfirmationDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => void;\n  isDeleting: boolean;\n  itemName?: string | null;\n  itemType?: string;\n}\n\nexport function DeleteConfirmationDialog({\n  isOpen,\n  onOpenChange,\n  onConfirm,\n  isDeleting,\n  itemName,\n  itemType = 'item'\n}: DeleteConfirmationDialogProps) {\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete the {itemType}\n            {itemName && <> for <span className=\"font-semibold\">{itemName}</span></>}\n            .\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction asChild>\n            <Button\n              onClick={onConfirm}\n              disabled={isDeleting}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {isDeleting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Delete\n            </Button>\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAUA;AACA;AAbA;;;;;AAwBO,SAAS,yBAAyB,EACvC,MAAM,EACN,YAAY,EACZ,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,MAAM,EACa;IAC9B,qBACE,8OAAC,2IAAA,CAAA,cAAW;QAAC,MAAM;QAAQ,cAAc;kBACvC,cAAA,8OAAC,2IAAA,CAAA,qBAAkB;;8BACjB,8OAAC,2IAAA,CAAA,oBAAiB;;sCAChB,8OAAC,2IAAA,CAAA,mBAAgB;sCAAC;;;;;;sCAClB,8OAAC,2IAAA,CAAA,yBAAsB;;gCAAC;gCAC0C;gCAC/D,0BAAY;;wCAAE;sDAAK,8OAAC;4CAAK,WAAU;sDAAiB;;;;;;;;gCAAoB;;;;;;;;;;;;;8BAI7E,8OAAC,2IAAA,CAAA,oBAAiB;;sCAChB,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,UAAU;sCAAY;;;;;;sCACzC,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,OAAO;sCACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;gCACL,SAAS;gCACT,UAAU;gCACV,WAAU;;oCAET,4BAAc,8OAAC,iNAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;oCAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ/E","debugId":null}},
    {"offset": {"line": 1307, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions/excel.ts"],"sourcesContent":["\n\n'use server';\n\nimport * as xlsx from 'xlsx';\nimport { getDatFileContent } from './drive';\nimport { format } from 'date-fns';\n\ninterface ExcelResult {\n    success: boolean;\n    base64?: string;\n    fileName?: string;\n    error?: string;\n}\n\nexport async function generateSalesExcel(fileIds: string[], fileNames: string[]): Promise<ExcelResult> {\n    try {\n        const fileContents = await Promise.all(fileIds.map(id => getDatFileContent(id)));\n\n        const filesWithContent = fileNames.map((name, index) => ({\n            name,\n            content: fileContents[index].content,\n        }));\n\n        const getMonthFromFileName = (name: string) => {\n            const monthStr = name.substring(10, 12);\n            return parseInt(monthStr, 10);\n        };\n        \n        filesWithContent.sort((a, b) => getMonthFromFileName(a.name) - getMonthFromFileName(b.name));\n        \n        const latestFile = filesWithContent[filesWithContent.length - 1];\n\n        if (!latestFile || !latestFile.content) {\n            return { success: false, error: \"No content found in the selected files.\" };\n        }\n\n        const headerLine = latestFile.content.split('\\n').find(line => line.startsWith('H,'));\n        \n        if (!headerLine) {\n            return { success: false, error: \"Could not find a header line in the latest file.\" };\n        }\n\n        const headerCols = headerLine.split(',').map(col => col.replace(/\"/g, ''));\n        const ownerTin = headerCols[2];\n        const ownerName = headerCols[3] ? headerCols[3] : `${headerCols[4]}, ${headerCols[5]} ${headerCols[6]}`;\n        const tradeName = headerCols[7];\n\n        const wsData: (string | number | null)[][] = [\n            ['SALES TRANSACTION'],\n            ['RECONCILIATION OF LISTING FOR ENFORCEMENT'],\n            [],\n            [`TIN: ${ownerTin}`],\n            [`OWNER'S NAME: ${ownerName}`],\n            [`OWNER'S TRADE NAME: ${tradeName}`],\n            [],\n            ['TAXABLE', 'TAXPAYER', 'REGISTERED NAME', 'NAME OF CUSTOMER', \"CUSTOMER'S ADDRESS\", 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF'],\n            ['MONTH', 'IDENTIFICATION', null, '(Last Name, First Name, Middle Name)', null, 'GROSS SALES', 'EXEMPT SALES', 'ZERO-RATED SALES', 'TAXABLE SALES', 'OUTPUT TAX', 'GROSS TAXABLE SALES'],\n            [null, 'NUMBER', null, null, null, null, null, null, null, null, null],\n            ['(1)','(2)','(3)','(4)','(5)','(6)','(7)','(8)','(9)','(10)','(11)'],\n        ];\n\n        let totalGrossSales = 0;\n        let totalExemptSales = 0;\n        let totalZeroRatedSales = 0;\n        let totalTaxableSales = 0;\n        let totalOutputTax = 0;\n        let totalGrossTaxableSales = 0;\n\n        for (const file of filesWithContent) {\n            if (!file.content) continue;\n\n            const detailLines = file.content.split('\\n').filter(line => line.startsWith('D,'));\n            for (const line of detailLines) {\n                const cols = line.split(',').map(col => col.replace(/\"/g, ''));\n                \n                const lastDayDateStr = cols[14];\n                const [monthStr, dayStr, yearStr] = lastDayDateStr.split('/');\n                const date = new Date(parseInt(yearStr), parseInt(monthStr), 0);\n                \n                const tin = cols[2];\n                const formattedTin = tin ? `${tin.substring(0,3)}-${tin.substring(3,6)}-${tin.substring(6,9)}` : '--- --- ---';\n                \n                const exemptSales = parseFloat(cols[9] || '0');\n                const zeroRatedSales = parseFloat(cols[10] || '0');\n                const taxableSales = parseFloat(cols[11] || '0');\n                const outputTax = parseFloat(cols[12] || '0');\n                const grossSales = exemptSales + zeroRatedSales + taxableSales;\n                const grossTaxableSales = taxableSales + outputTax;\n\n                totalGrossSales += grossSales;\n                totalExemptSales += exemptSales;\n                totalZeroRatedSales += zeroRatedSales;\n                totalTaxableSales += taxableSales;\n                totalOutputTax += outputTax;\n                totalGrossTaxableSales += grossTaxableSales;\n\n                const bodyRow = [\n                    format(date, 'MM/dd/yyyy'),\n                    formattedTin,\n                    cols[3],\n                    `${cols[4]}, ${cols[5]} ${cols[6]}`,\n                    `${cols[7]} ${cols[8]}`,\n                    grossSales,\n                    exemptSales,\n                    zeroRatedSales,\n                    taxableSales,\n                    outputTax,\n                    grossTaxableSales\n                ];\n                wsData.push(bodyRow);\n            }\n        }\n        \n        wsData.push([]);\n        wsData.push([]);\n\n        const grandTotalRow = [\n            \"Grand Total:\",\n            null,\n            null,\n            null,\n            null,\n            totalGrossSales,\n            totalExemptSales,\n            totalZeroRatedSales,\n            totalTaxableSales,\n            totalOutputTax,\n            totalGrossTaxableSales\n        ];\n        wsData.push(grandTotalRow);\n        wsData.push([]);\n        wsData.push([\"END OF REPORT\"]);\n\n\n        const ws = xlsx.utils.aoa_to_sheet(wsData);\n\n        const wb = xlsx.utils.book_new();\n        xlsx.utils.book_append_sheet(wb, ws, 'Sales Transaction');\n\n        const wbout = xlsx.write(wb, { bookType: 'xlsx', type: 'base64' });\n\n        const year = latestFile.name.substring(12, 16);\n        const fileName = `${ownerTin}-Sales-${year}.xlsx`;\n\n        return { success: true, base64: wbout, fileName };\n\n    } catch (e) {\n        console.error(\"Error generating sales Excel:\", e);\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        return { success: false, error: errorMessage };\n    }\n}\n\nexport async function generatePurchasesExcel(fileIds: string[], fileNames: string[]): Promise<ExcelResult> {\n    try {\n        const fileContents = await Promise.all(fileIds.map(id => getDatFileContent(id)));\n\n        const filesWithContent = fileNames.map((name, index) => ({\n            name,\n            content: fileContents[index].content,\n        }));\n        \n        const getMonthFromFileName = (name: string) => {\n            const monthStr = name.substring(10, 12);\n            return parseInt(monthStr, 10);\n        };\n        \n        filesWithContent.sort((a, b) => getMonthFromFileName(a.name) - getMonthFromFileName(b.name));\n        \n        const latestFile = filesWithContent[filesWithContent.length - 1];\n\n        if (!latestFile || !latestFile.content) {\n            return { success: false, error: \"No content found in the selected files.\" };\n        }\n\n        const headerLine = latestFile.content.split('\\n').find(line => line.startsWith('H,'));\n        \n        if (!headerLine) {\n            return { success: false, error: \"Could not find a header line in the latest file.\" };\n        }\n\n        const headerCols = headerLine.split(',').map(col => col.replace(/\"/g, ''));\n        const ownerTin = headerCols[2];\n        const ownerName = headerCols[3] ? headerCols[3] : `${headerCols[4]}, ${headerCols[5]} ${headerCols[6]}`;\n        const tradeName = headerCols[7];\n\n        const wsData: (string | number | null)[][] = [\n            ['PURCHASES TRANSACTION'],\n            ['RECONCILIATION OF LISTING FOR ENFORCEMENT'],\n            [],\n            [`TIN: ${ownerTin}`],\n            [`OWNER'S NAME: ${ownerName}`],\n            [`OWNER'S TRADE NAME: ${tradeName}`],\n            [],\n            ['TAXABLE', 'TAXPAYER', 'REGISTERED NAME', 'NAME OF SUPPLIER', \"SUPPLIER'S ADDRESS\", 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF'],\n            ['MONTH', 'IDENTIFICATION', null, '(Last Name, First Name, Middle Name)', null, 'GROSS PURCHASE', 'EXEMPT PURCHASE', 'ZERO-RATED PURCHASE', 'TAXABLE PURCHASE', 'PURCHASE OF SERVICES', 'PURCHASE OF CAPITAL GOODS', 'PURCHASE OF OTHER GOODS', 'INPUT TAX', 'GROSS TAXABLE PURCHASE'],\n            [null, 'NUMBER', null, null, null, null, null, null, null, null, null, null, null, null],\n            ['(1)','(2)','(3)','(4)','(5)','(6)','(7)','(8)','(9)','(10)','(11)','(12)', '(13)', '(14)'],\n        ];\n\n        let totalGrossPurchase = 0;\n        let totalExemptPurchase = 0;\n        let totalZeroRatedPurchase = 0;\n        let totalTaxablePurchase = 0;\n        let totalPurchaseOfServices = 0;\n        let totalPurchaseOfCapitalGoods = 0;\n        let totalPurchaseOfOtherGoods = 0;\n        let totalInputTax = 0;\n        let totalGrossTaxablePurchase = 0;\n\n\n        for (const file of filesWithContent) {\n            if (!file.content) continue;\n\n            const detailLines = file.content.split('\\n').filter(line => line.startsWith('D,'));\n            for (const line of detailLines) {\n                const cols = line.split(',').map(col => col.replace(/\"/g, ''));\n                \n                const lastDayDateStr = cols[16];\n                const [monthStr, dayStr, yearStr] = lastDayDateStr.split('/');\n                const date = new Date(parseInt(yearStr), parseInt(monthStr), 0);\n                \n                const tin = cols[2];\n                const formattedTin = tin ? `${tin.substring(0,3)}-${tin.substring(3,6)}-${tin.substring(6,9)}` : '--- --- ---';\n                \n                const exemptPurchase = parseFloat(cols[9] || '0');\n                const zeroRatedPurchase = parseFloat(cols[10] || '0');\n                const purchaseOfServices = parseFloat(cols[11] || '0');\n                const purchaseOfCapitalGoods = parseFloat(cols[12] || '0');\n                const purchaseOfOtherGoods = parseFloat(cols[13] || '0');\n                const inputTax = parseFloat(cols[14] || '0');\n\n                const grossPurchase = exemptPurchase + zeroRatedPurchase + purchaseOfServices + purchaseOfCapitalGoods + purchaseOfOtherGoods;\n                const taxablePurchase = purchaseOfServices + purchaseOfCapitalGoods + purchaseOfOtherGoods;\n                const grossTaxablePurchase = purchaseOfServices + purchaseOfCapitalGoods + purchaseOfOtherGoods + inputTax;\n\n                totalGrossPurchase += grossPurchase;\n                totalExemptPurchase += exemptPurchase;\n                totalZeroRatedPurchase += zeroRatedPurchase;\n                totalTaxablePurchase += taxablePurchase;\n                totalPurchaseOfServices += purchaseOfServices;\n                totalPurchaseOfCapitalGoods += purchaseOfCapitalGoods;\n                totalPurchaseOfOtherGoods += purchaseOfOtherGoods;\n                totalInputTax += inputTax;\n                totalGrossTaxablePurchase += grossTaxablePurchase;\n\n                const bodyRow = [\n                    format(date, 'MM/dd/yyyy'),\n                    formattedTin,\n                    cols[3],\n                    `${cols[4]}, ${cols[5]} ${cols[6]}`,\n                    `${cols[7]} ${cols[8]}`,\n                    grossPurchase,\n                    exemptPurchase,\n                    zeroRatedPurchase,\n                    taxablePurchase,\n                    purchaseOfServices,\n                    purchaseOfCapitalGoods,\n                    purchaseOfOtherGoods,\n                    inputTax,\n                    grossTaxablePurchase\n                ];\n                wsData.push(bodyRow);\n            }\n        }\n        \n        wsData.push([]);\n        wsData.push([]);\n\n        const grandTotalRow = [\n            \"Grand Total:\",\n            null,\n            null,\n            null,\n            null,\n            totalGrossPurchase,\n            totalExemptPurchase,\n            totalZeroRatedPurchase,\n            totalTaxablePurchase,\n            totalPurchaseOfServices,\n            totalPurchaseOfCapitalGoods,\n            totalPurchaseOfOtherGoods,\n            totalInputTax,\n            totalGrossTaxablePurchase\n        ];\n        wsData.push(grandTotalRow);\n        wsData.push([]);\n        wsData.push([\"END OF REPORT\"]);\n\n        const ws = xlsx.utils.aoa_to_sheet(wsData);\n        const wb = xlsx.utils.book_new();\n        xlsx.utils.book_append_sheet(wb, ws, 'Purchases Transaction');\n        \n        const wbout = xlsx.write(wb, { bookType: 'xlsx', type: 'base64' });\n        \n        const year = latestFile.name.substring(12, 16);\n        const fileName = `${ownerTin}-Purchases-${year}.xlsx`;\n\n\n        return { success: true, base64: wbout, fileName };\n    } catch (e) {\n        console.error(\"Error generating purchases Excel:\", e);\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        return { success: false, error: errorMessage };\n    }\n}\n\nexport async function generate1601EQExcel(fileIds: string[], fileNames: string[]): Promise<ExcelResult> {\n    try {\n        const fileContents = await Promise.all(fileIds.map(id => getDatFileContent(id)));\n\n        const filesWithContent = fileNames.map((name, index) => ({\n            name,\n            content: fileContents[index].content,\n        }));\n        \n        const latestFile = filesWithContent[filesWithContent.length - 1];\n\n        if (!latestFile || !latestFile.content) {\n            return { success: false, error: \"No content found in the selected files.\" };\n        }\n\n        const headerLine = latestFile.content.split('\\n').find(line => line.startsWith('HQAP,'));\n        \n        if (!headerLine) {\n            return { success: false, error: \"Could not find a header line in the latest file.\" };\n        }\n\n        const headerCols = headerLine.split(',').map(col => col.replace(/\"/g, ''));\n        \n        const ownerTin = `${headerCols[2]}-${headerCols[3]}`;\n        const ownerName = headerCols[4];\n        \n        const getQuarterInfo = (reportingPeriod: string) => {\n            const [monthStr, yearStr] = reportingPeriod.split('/');\n            const month = parseInt(monthStr, 10);\n            const year = parseInt(yearStr, 10);\n            const quarter = Math.ceil(month / 3);\n            return { year, quarter, month };\n        };\n        const reportingPeriod = headerCols[5]; // \"MM/YYYY\"\n        const { year, quarter } = getQuarterInfo(reportingPeriod);\n        const quarterEndMonth = new Date(year, quarter * 3, 0); \n        const quarterEndDate = format(quarterEndMonth, 'MMMM, yyyy').toUpperCase();\n\n        const wsData: (string | number | null)[][] = [\n            ['Attachment to BIR Form 1601-EQ'],\n            ['QUARTERLY ALPHABETICAL LIST OF PAYEES SUBJECTED TO EXPANDED WITHHOLDING TAX & PAYEES WHOSE INCOME PAYMENTS ARE EXEMPT'],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n        ];\n\n        wsData[2][0] = `FOR THE QUARTER ENDING ${quarterEndDate}`;\n        wsData[5][0] = `TIN: ${ownerTin}`;\n        wsData[6][0] = `WITHHOLDING AGENT'S NAME: ${ownerName}`;\n        \n        wsData[10][0] = 'SEQ';\n        wsData[11][0] = 'NO';\n        wsData[13][0] = '(1)';\n\n        wsData[10][1] = 'TAXPAYER';\n        wsData[11][1] = 'IDENTIFICATION';\n        wsData[12][1] = 'NUMBER';\n        wsData[13][1] = '(2)';\n\n        wsData[10][2] = 'CORPORATION';\n        wsData[11][2] = '(Registered Name)';\n        wsData[13][2] = '(3)';\n\n        wsData[10][3] = 'INDIVIDUAL';\n        wsData[11][3] = '(Last Name, First Name, Middle Name)';\n        wsData[13][3] = '(4)';\n\n        wsData[10][4] = 'ATC CODE';\n        wsData[13][4] = '(5)';\n        \n        wsData[10][5] = null; // F10 is null\n        wsData[11][5] = null;\n        wsData[13][5] = null;\n        \n        wsData[9][6] = \"1ST MONTH OF THE QUARTER\";\n        wsData[10][6] = 'AMOUNT OF';\n        wsData[11][6] = 'INCOME PAYMENT';\n        wsData[13][6] = '(6)';\n        \n        wsData[10][7] = 'TAX RATE';\n        wsData[13][7] = '(7)';\n        \n        wsData[10][8] = 'AMOUNT OF';\n        wsData[11][8] = \"TAX WITHHELD\";\n        wsData[13][8] = '(8)';\n\n        wsData[9][9] = \"2ND MONTH OF THE QUARTER\";\n        wsData[10][9] = \"AMOUNT OF\";\n        wsData[11][9] = \"INCOME PAYMENT\";\n        wsData[13][9] = \"(9)\";\n\n        wsData[10][10] = \"TAX RATE\";\n        wsData[13][10] = \"(10)\";\n\n        wsData[10][11] = \"AMOUNT OF\";\n        wsData[11][11] = \"TAX WITHHELD\";\n        wsData[13][11] = \"(11)\";\n\n        wsData[9][12] = \"3RD MONTH OF THE QUARTER\";\n        wsData[10][12] = \"AMOUNT OF\";\n        wsData[11][12] = \"INCOME PAYMENT\";\n        wsData[13][12] = \"(12)\";\n\n        wsData[10][13] = \"TAX RATE\";\n        wsData[13][13] = \"(13)\";\n\n        wsData[10][14] = \"AMOUNT OF\";\n        wsData[11][14] = \"TAX WITHHELD\";\n        wsData[13][14] = \"(14)\";\n\n        wsData[9][15] = \"TOTAL FOR THE QUARTER\";\n        wsData[10][15] = \"TOTAL\";\n        wsData[11][15] = \"INCOME PAYMENT\";\n        wsData[13][15] = \"(15)\";\n\n        wsData[10][16] = \"TOTAL\";\n        wsData[11][16] = \"TAX WITHHELD\";\n        wsData[13][16] = \"(16)\";\n\n        const ws = xlsx.utils.aoa_to_sheet(wsData);\n\n        const wb = xlsx.utils.book_new();\n        xlsx.utils.book_append_sheet(wb, ws, 'sched1');\n\n        const wbout = xlsx.write(wb, { bookType: 'xlsx', type: 'base64' });\n        \n        const fileName = `${headerCols[2]}-1601EQ-Q${quarter}-${year}.xlsx`;\n\n        return { success: true, base64: wbout, fileName };\n\n    } catch (e) {\n        console.error(\"Error generating 1601-EQ Excel:\", e);\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        return { success: false, error: errorMessage };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAesB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1320, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions/excel.ts"],"sourcesContent":["\n\n'use server';\n\nimport * as xlsx from 'xlsx';\nimport { getDatFileContent } from './drive';\nimport { format } from 'date-fns';\n\ninterface ExcelResult {\n    success: boolean;\n    base64?: string;\n    fileName?: string;\n    error?: string;\n}\n\nexport async function generateSalesExcel(fileIds: string[], fileNames: string[]): Promise<ExcelResult> {\n    try {\n        const fileContents = await Promise.all(fileIds.map(id => getDatFileContent(id)));\n\n        const filesWithContent = fileNames.map((name, index) => ({\n            name,\n            content: fileContents[index].content,\n        }));\n\n        const getMonthFromFileName = (name: string) => {\n            const monthStr = name.substring(10, 12);\n            return parseInt(monthStr, 10);\n        };\n        \n        filesWithContent.sort((a, b) => getMonthFromFileName(a.name) - getMonthFromFileName(b.name));\n        \n        const latestFile = filesWithContent[filesWithContent.length - 1];\n\n        if (!latestFile || !latestFile.content) {\n            return { success: false, error: \"No content found in the selected files.\" };\n        }\n\n        const headerLine = latestFile.content.split('\\n').find(line => line.startsWith('H,'));\n        \n        if (!headerLine) {\n            return { success: false, error: \"Could not find a header line in the latest file.\" };\n        }\n\n        const headerCols = headerLine.split(',').map(col => col.replace(/\"/g, ''));\n        const ownerTin = headerCols[2];\n        const ownerName = headerCols[3] ? headerCols[3] : `${headerCols[4]}, ${headerCols[5]} ${headerCols[6]}`;\n        const tradeName = headerCols[7];\n\n        const wsData: (string | number | null)[][] = [\n            ['SALES TRANSACTION'],\n            ['RECONCILIATION OF LISTING FOR ENFORCEMENT'],\n            [],\n            [`TIN: ${ownerTin}`],\n            [`OWNER'S NAME: ${ownerName}`],\n            [`OWNER'S TRADE NAME: ${tradeName}`],\n            [],\n            ['TAXABLE', 'TAXPAYER', 'REGISTERED NAME', 'NAME OF CUSTOMER', \"CUSTOMER'S ADDRESS\", 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF'],\n            ['MONTH', 'IDENTIFICATION', null, '(Last Name, First Name, Middle Name)', null, 'GROSS SALES', 'EXEMPT SALES', 'ZERO-RATED SALES', 'TAXABLE SALES', 'OUTPUT TAX', 'GROSS TAXABLE SALES'],\n            [null, 'NUMBER', null, null, null, null, null, null, null, null, null],\n            ['(1)','(2)','(3)','(4)','(5)','(6)','(7)','(8)','(9)','(10)','(11)'],\n        ];\n\n        let totalGrossSales = 0;\n        let totalExemptSales = 0;\n        let totalZeroRatedSales = 0;\n        let totalTaxableSales = 0;\n        let totalOutputTax = 0;\n        let totalGrossTaxableSales = 0;\n\n        for (const file of filesWithContent) {\n            if (!file.content) continue;\n\n            const detailLines = file.content.split('\\n').filter(line => line.startsWith('D,'));\n            for (const line of detailLines) {\n                const cols = line.split(',').map(col => col.replace(/\"/g, ''));\n                \n                const lastDayDateStr = cols[14];\n                const [monthStr, dayStr, yearStr] = lastDayDateStr.split('/');\n                const date = new Date(parseInt(yearStr), parseInt(monthStr), 0);\n                \n                const tin = cols[2];\n                const formattedTin = tin ? `${tin.substring(0,3)}-${tin.substring(3,6)}-${tin.substring(6,9)}` : '--- --- ---';\n                \n                const exemptSales = parseFloat(cols[9] || '0');\n                const zeroRatedSales = parseFloat(cols[10] || '0');\n                const taxableSales = parseFloat(cols[11] || '0');\n                const outputTax = parseFloat(cols[12] || '0');\n                const grossSales = exemptSales + zeroRatedSales + taxableSales;\n                const grossTaxableSales = taxableSales + outputTax;\n\n                totalGrossSales += grossSales;\n                totalExemptSales += exemptSales;\n                totalZeroRatedSales += zeroRatedSales;\n                totalTaxableSales += taxableSales;\n                totalOutputTax += outputTax;\n                totalGrossTaxableSales += grossTaxableSales;\n\n                const bodyRow = [\n                    format(date, 'MM/dd/yyyy'),\n                    formattedTin,\n                    cols[3],\n                    `${cols[4]}, ${cols[5]} ${cols[6]}`,\n                    `${cols[7]} ${cols[8]}`,\n                    grossSales,\n                    exemptSales,\n                    zeroRatedSales,\n                    taxableSales,\n                    outputTax,\n                    grossTaxableSales\n                ];\n                wsData.push(bodyRow);\n            }\n        }\n        \n        wsData.push([]);\n        wsData.push([]);\n\n        const grandTotalRow = [\n            \"Grand Total:\",\n            null,\n            null,\n            null,\n            null,\n            totalGrossSales,\n            totalExemptSales,\n            totalZeroRatedSales,\n            totalTaxableSales,\n            totalOutputTax,\n            totalGrossTaxableSales\n        ];\n        wsData.push(grandTotalRow);\n        wsData.push([]);\n        wsData.push([\"END OF REPORT\"]);\n\n\n        const ws = xlsx.utils.aoa_to_sheet(wsData);\n\n        const wb = xlsx.utils.book_new();\n        xlsx.utils.book_append_sheet(wb, ws, 'Sales Transaction');\n\n        const wbout = xlsx.write(wb, { bookType: 'xlsx', type: 'base64' });\n\n        const year = latestFile.name.substring(12, 16);\n        const fileName = `${ownerTin}-Sales-${year}.xlsx`;\n\n        return { success: true, base64: wbout, fileName };\n\n    } catch (e) {\n        console.error(\"Error generating sales Excel:\", e);\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        return { success: false, error: errorMessage };\n    }\n}\n\nexport async function generatePurchasesExcel(fileIds: string[], fileNames: string[]): Promise<ExcelResult> {\n    try {\n        const fileContents = await Promise.all(fileIds.map(id => getDatFileContent(id)));\n\n        const filesWithContent = fileNames.map((name, index) => ({\n            name,\n            content: fileContents[index].content,\n        }));\n        \n        const getMonthFromFileName = (name: string) => {\n            const monthStr = name.substring(10, 12);\n            return parseInt(monthStr, 10);\n        };\n        \n        filesWithContent.sort((a, b) => getMonthFromFileName(a.name) - getMonthFromFileName(b.name));\n        \n        const latestFile = filesWithContent[filesWithContent.length - 1];\n\n        if (!latestFile || !latestFile.content) {\n            return { success: false, error: \"No content found in the selected files.\" };\n        }\n\n        const headerLine = latestFile.content.split('\\n').find(line => line.startsWith('H,'));\n        \n        if (!headerLine) {\n            return { success: false, error: \"Could not find a header line in the latest file.\" };\n        }\n\n        const headerCols = headerLine.split(',').map(col => col.replace(/\"/g, ''));\n        const ownerTin = headerCols[2];\n        const ownerName = headerCols[3] ? headerCols[3] : `${headerCols[4]}, ${headerCols[5]} ${headerCols[6]}`;\n        const tradeName = headerCols[7];\n\n        const wsData: (string | number | null)[][] = [\n            ['PURCHASES TRANSACTION'],\n            ['RECONCILIATION OF LISTING FOR ENFORCEMENT'],\n            [],\n            [`TIN: ${ownerTin}`],\n            [`OWNER'S NAME: ${ownerName}`],\n            [`OWNER'S TRADE NAME: ${tradeName}`],\n            [],\n            ['TAXABLE', 'TAXPAYER', 'REGISTERED NAME', 'NAME OF SUPPLIER', \"SUPPLIER'S ADDRESS\", 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF'],\n            ['MONTH', 'IDENTIFICATION', null, '(Last Name, First Name, Middle Name)', null, 'GROSS PURCHASE', 'EXEMPT PURCHASE', 'ZERO-RATED PURCHASE', 'TAXABLE PURCHASE', 'PURCHASE OF SERVICES', 'PURCHASE OF CAPITAL GOODS', 'PURCHASE OF OTHER GOODS', 'INPUT TAX', 'GROSS TAXABLE PURCHASE'],\n            [null, 'NUMBER', null, null, null, null, null, null, null, null, null, null, null, null],\n            ['(1)','(2)','(3)','(4)','(5)','(6)','(7)','(8)','(9)','(10)','(11)','(12)', '(13)', '(14)'],\n        ];\n\n        let totalGrossPurchase = 0;\n        let totalExemptPurchase = 0;\n        let totalZeroRatedPurchase = 0;\n        let totalTaxablePurchase = 0;\n        let totalPurchaseOfServices = 0;\n        let totalPurchaseOfCapitalGoods = 0;\n        let totalPurchaseOfOtherGoods = 0;\n        let totalInputTax = 0;\n        let totalGrossTaxablePurchase = 0;\n\n\n        for (const file of filesWithContent) {\n            if (!file.content) continue;\n\n            const detailLines = file.content.split('\\n').filter(line => line.startsWith('D,'));\n            for (const line of detailLines) {\n                const cols = line.split(',').map(col => col.replace(/\"/g, ''));\n                \n                const lastDayDateStr = cols[16];\n                const [monthStr, dayStr, yearStr] = lastDayDateStr.split('/');\n                const date = new Date(parseInt(yearStr), parseInt(monthStr), 0);\n                \n                const tin = cols[2];\n                const formattedTin = tin ? `${tin.substring(0,3)}-${tin.substring(3,6)}-${tin.substring(6,9)}` : '--- --- ---';\n                \n                const exemptPurchase = parseFloat(cols[9] || '0');\n                const zeroRatedPurchase = parseFloat(cols[10] || '0');\n                const purchaseOfServices = parseFloat(cols[11] || '0');\n                const purchaseOfCapitalGoods = parseFloat(cols[12] || '0');\n                const purchaseOfOtherGoods = parseFloat(cols[13] || '0');\n                const inputTax = parseFloat(cols[14] || '0');\n\n                const grossPurchase = exemptPurchase + zeroRatedPurchase + purchaseOfServices + purchaseOfCapitalGoods + purchaseOfOtherGoods;\n                const taxablePurchase = purchaseOfServices + purchaseOfCapitalGoods + purchaseOfOtherGoods;\n                const grossTaxablePurchase = purchaseOfServices + purchaseOfCapitalGoods + purchaseOfOtherGoods + inputTax;\n\n                totalGrossPurchase += grossPurchase;\n                totalExemptPurchase += exemptPurchase;\n                totalZeroRatedPurchase += zeroRatedPurchase;\n                totalTaxablePurchase += taxablePurchase;\n                totalPurchaseOfServices += purchaseOfServices;\n                totalPurchaseOfCapitalGoods += purchaseOfCapitalGoods;\n                totalPurchaseOfOtherGoods += purchaseOfOtherGoods;\n                totalInputTax += inputTax;\n                totalGrossTaxablePurchase += grossTaxablePurchase;\n\n                const bodyRow = [\n                    format(date, 'MM/dd/yyyy'),\n                    formattedTin,\n                    cols[3],\n                    `${cols[4]}, ${cols[5]} ${cols[6]}`,\n                    `${cols[7]} ${cols[8]}`,\n                    grossPurchase,\n                    exemptPurchase,\n                    zeroRatedPurchase,\n                    taxablePurchase,\n                    purchaseOfServices,\n                    purchaseOfCapitalGoods,\n                    purchaseOfOtherGoods,\n                    inputTax,\n                    grossTaxablePurchase\n                ];\n                wsData.push(bodyRow);\n            }\n        }\n        \n        wsData.push([]);\n        wsData.push([]);\n\n        const grandTotalRow = [\n            \"Grand Total:\",\n            null,\n            null,\n            null,\n            null,\n            totalGrossPurchase,\n            totalExemptPurchase,\n            totalZeroRatedPurchase,\n            totalTaxablePurchase,\n            totalPurchaseOfServices,\n            totalPurchaseOfCapitalGoods,\n            totalPurchaseOfOtherGoods,\n            totalInputTax,\n            totalGrossTaxablePurchase\n        ];\n        wsData.push(grandTotalRow);\n        wsData.push([]);\n        wsData.push([\"END OF REPORT\"]);\n\n        const ws = xlsx.utils.aoa_to_sheet(wsData);\n        const wb = xlsx.utils.book_new();\n        xlsx.utils.book_append_sheet(wb, ws, 'Purchases Transaction');\n        \n        const wbout = xlsx.write(wb, { bookType: 'xlsx', type: 'base64' });\n        \n        const year = latestFile.name.substring(12, 16);\n        const fileName = `${ownerTin}-Purchases-${year}.xlsx`;\n\n\n        return { success: true, base64: wbout, fileName };\n    } catch (e) {\n        console.error(\"Error generating purchases Excel:\", e);\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        return { success: false, error: errorMessage };\n    }\n}\n\nexport async function generate1601EQExcel(fileIds: string[], fileNames: string[]): Promise<ExcelResult> {\n    try {\n        const fileContents = await Promise.all(fileIds.map(id => getDatFileContent(id)));\n\n        const filesWithContent = fileNames.map((name, index) => ({\n            name,\n            content: fileContents[index].content,\n        }));\n        \n        const latestFile = filesWithContent[filesWithContent.length - 1];\n\n        if (!latestFile || !latestFile.content) {\n            return { success: false, error: \"No content found in the selected files.\" };\n        }\n\n        const headerLine = latestFile.content.split('\\n').find(line => line.startsWith('HQAP,'));\n        \n        if (!headerLine) {\n            return { success: false, error: \"Could not find a header line in the latest file.\" };\n        }\n\n        const headerCols = headerLine.split(',').map(col => col.replace(/\"/g, ''));\n        \n        const ownerTin = `${headerCols[2]}-${headerCols[3]}`;\n        const ownerName = headerCols[4];\n        \n        const getQuarterInfo = (reportingPeriod: string) => {\n            const [monthStr, yearStr] = reportingPeriod.split('/');\n            const month = parseInt(monthStr, 10);\n            const year = parseInt(yearStr, 10);\n            const quarter = Math.ceil(month / 3);\n            return { year, quarter, month };\n        };\n        const reportingPeriod = headerCols[5]; // \"MM/YYYY\"\n        const { year, quarter } = getQuarterInfo(reportingPeriod);\n        const quarterEndMonth = new Date(year, quarter * 3, 0); \n        const quarterEndDate = format(quarterEndMonth, 'MMMM, yyyy').toUpperCase();\n\n        const wsData: (string | number | null)[][] = [\n            ['Attachment to BIR Form 1601-EQ'],\n            ['QUARTERLY ALPHABETICAL LIST OF PAYEES SUBJECTED TO EXPANDED WITHHOLDING TAX & PAYEES WHOSE INCOME PAYMENTS ARE EXEMPT'],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n        ];\n\n        wsData[2][0] = `FOR THE QUARTER ENDING ${quarterEndDate}`;\n        wsData[5][0] = `TIN: ${ownerTin}`;\n        wsData[6][0] = `WITHHOLDING AGENT'S NAME: ${ownerName}`;\n        \n        wsData[10][0] = 'SEQ';\n        wsData[11][0] = 'NO';\n        wsData[13][0] = '(1)';\n\n        wsData[10][1] = 'TAXPAYER';\n        wsData[11][1] = 'IDENTIFICATION';\n        wsData[12][1] = 'NUMBER';\n        wsData[13][1] = '(2)';\n\n        wsData[10][2] = 'CORPORATION';\n        wsData[11][2] = '(Registered Name)';\n        wsData[13][2] = '(3)';\n\n        wsData[10][3] = 'INDIVIDUAL';\n        wsData[11][3] = '(Last Name, First Name, Middle Name)';\n        wsData[13][3] = '(4)';\n\n        wsData[10][4] = 'ATC CODE';\n        wsData[13][4] = '(5)';\n        \n        wsData[10][5] = null; // F10 is null\n        wsData[11][5] = null;\n        wsData[13][5] = null;\n        \n        wsData[9][6] = \"1ST MONTH OF THE QUARTER\";\n        wsData[10][6] = 'AMOUNT OF';\n        wsData[11][6] = 'INCOME PAYMENT';\n        wsData[13][6] = '(6)';\n        \n        wsData[10][7] = 'TAX RATE';\n        wsData[13][7] = '(7)';\n        \n        wsData[10][8] = 'AMOUNT OF';\n        wsData[11][8] = \"TAX WITHHELD\";\n        wsData[13][8] = '(8)';\n\n        wsData[9][9] = \"2ND MONTH OF THE QUARTER\";\n        wsData[10][9] = \"AMOUNT OF\";\n        wsData[11][9] = \"INCOME PAYMENT\";\n        wsData[13][9] = \"(9)\";\n\n        wsData[10][10] = \"TAX RATE\";\n        wsData[13][10] = \"(10)\";\n\n        wsData[10][11] = \"AMOUNT OF\";\n        wsData[11][11] = \"TAX WITHHELD\";\n        wsData[13][11] = \"(11)\";\n\n        wsData[9][12] = \"3RD MONTH OF THE QUARTER\";\n        wsData[10][12] = \"AMOUNT OF\";\n        wsData[11][12] = \"INCOME PAYMENT\";\n        wsData[13][12] = \"(12)\";\n\n        wsData[10][13] = \"TAX RATE\";\n        wsData[13][13] = \"(13)\";\n\n        wsData[10][14] = \"AMOUNT OF\";\n        wsData[11][14] = \"TAX WITHHELD\";\n        wsData[13][14] = \"(14)\";\n\n        wsData[9][15] = \"TOTAL FOR THE QUARTER\";\n        wsData[10][15] = \"TOTAL\";\n        wsData[11][15] = \"INCOME PAYMENT\";\n        wsData[13][15] = \"(15)\";\n\n        wsData[10][16] = \"TOTAL\";\n        wsData[11][16] = \"TAX WITHHELD\";\n        wsData[13][16] = \"(16)\";\n\n        const ws = xlsx.utils.aoa_to_sheet(wsData);\n\n        const wb = xlsx.utils.book_new();\n        xlsx.utils.book_append_sheet(wb, ws, 'sched1');\n\n        const wbout = xlsx.write(wb, { bookType: 'xlsx', type: 'base64' });\n        \n        const fileName = `${headerCols[2]}-1601EQ-Q${quarter}-${year}.xlsx`;\n\n        return { success: true, base64: wbout, fileName };\n\n    } catch (e) {\n        console.error(\"Error generating 1601-EQ Excel:\", e);\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        return { success: false, error: errorMessage };\n    }\n}\n"],"names":[],"mappings":";;;;;;IA0JsB,yBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1333, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions/excel.ts"],"sourcesContent":["\n\n'use server';\n\nimport * as xlsx from 'xlsx';\nimport { getDatFileContent } from './drive';\nimport { format } from 'date-fns';\n\ninterface ExcelResult {\n    success: boolean;\n    base64?: string;\n    fileName?: string;\n    error?: string;\n}\n\nexport async function generateSalesExcel(fileIds: string[], fileNames: string[]): Promise<ExcelResult> {\n    try {\n        const fileContents = await Promise.all(fileIds.map(id => getDatFileContent(id)));\n\n        const filesWithContent = fileNames.map((name, index) => ({\n            name,\n            content: fileContents[index].content,\n        }));\n\n        const getMonthFromFileName = (name: string) => {\n            const monthStr = name.substring(10, 12);\n            return parseInt(monthStr, 10);\n        };\n        \n        filesWithContent.sort((a, b) => getMonthFromFileName(a.name) - getMonthFromFileName(b.name));\n        \n        const latestFile = filesWithContent[filesWithContent.length - 1];\n\n        if (!latestFile || !latestFile.content) {\n            return { success: false, error: \"No content found in the selected files.\" };\n        }\n\n        const headerLine = latestFile.content.split('\\n').find(line => line.startsWith('H,'));\n        \n        if (!headerLine) {\n            return { success: false, error: \"Could not find a header line in the latest file.\" };\n        }\n\n        const headerCols = headerLine.split(',').map(col => col.replace(/\"/g, ''));\n        const ownerTin = headerCols[2];\n        const ownerName = headerCols[3] ? headerCols[3] : `${headerCols[4]}, ${headerCols[5]} ${headerCols[6]}`;\n        const tradeName = headerCols[7];\n\n        const wsData: (string | number | null)[][] = [\n            ['SALES TRANSACTION'],\n            ['RECONCILIATION OF LISTING FOR ENFORCEMENT'],\n            [],\n            [`TIN: ${ownerTin}`],\n            [`OWNER'S NAME: ${ownerName}`],\n            [`OWNER'S TRADE NAME: ${tradeName}`],\n            [],\n            ['TAXABLE', 'TAXPAYER', 'REGISTERED NAME', 'NAME OF CUSTOMER', \"CUSTOMER'S ADDRESS\", 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF'],\n            ['MONTH', 'IDENTIFICATION', null, '(Last Name, First Name, Middle Name)', null, 'GROSS SALES', 'EXEMPT SALES', 'ZERO-RATED SALES', 'TAXABLE SALES', 'OUTPUT TAX', 'GROSS TAXABLE SALES'],\n            [null, 'NUMBER', null, null, null, null, null, null, null, null, null],\n            ['(1)','(2)','(3)','(4)','(5)','(6)','(7)','(8)','(9)','(10)','(11)'],\n        ];\n\n        let totalGrossSales = 0;\n        let totalExemptSales = 0;\n        let totalZeroRatedSales = 0;\n        let totalTaxableSales = 0;\n        let totalOutputTax = 0;\n        let totalGrossTaxableSales = 0;\n\n        for (const file of filesWithContent) {\n            if (!file.content) continue;\n\n            const detailLines = file.content.split('\\n').filter(line => line.startsWith('D,'));\n            for (const line of detailLines) {\n                const cols = line.split(',').map(col => col.replace(/\"/g, ''));\n                \n                const lastDayDateStr = cols[14];\n                const [monthStr, dayStr, yearStr] = lastDayDateStr.split('/');\n                const date = new Date(parseInt(yearStr), parseInt(monthStr), 0);\n                \n                const tin = cols[2];\n                const formattedTin = tin ? `${tin.substring(0,3)}-${tin.substring(3,6)}-${tin.substring(6,9)}` : '--- --- ---';\n                \n                const exemptSales = parseFloat(cols[9] || '0');\n                const zeroRatedSales = parseFloat(cols[10] || '0');\n                const taxableSales = parseFloat(cols[11] || '0');\n                const outputTax = parseFloat(cols[12] || '0');\n                const grossSales = exemptSales + zeroRatedSales + taxableSales;\n                const grossTaxableSales = taxableSales + outputTax;\n\n                totalGrossSales += grossSales;\n                totalExemptSales += exemptSales;\n                totalZeroRatedSales += zeroRatedSales;\n                totalTaxableSales += taxableSales;\n                totalOutputTax += outputTax;\n                totalGrossTaxableSales += grossTaxableSales;\n\n                const bodyRow = [\n                    format(date, 'MM/dd/yyyy'),\n                    formattedTin,\n                    cols[3],\n                    `${cols[4]}, ${cols[5]} ${cols[6]}`,\n                    `${cols[7]} ${cols[8]}`,\n                    grossSales,\n                    exemptSales,\n                    zeroRatedSales,\n                    taxableSales,\n                    outputTax,\n                    grossTaxableSales\n                ];\n                wsData.push(bodyRow);\n            }\n        }\n        \n        wsData.push([]);\n        wsData.push([]);\n\n        const grandTotalRow = [\n            \"Grand Total:\",\n            null,\n            null,\n            null,\n            null,\n            totalGrossSales,\n            totalExemptSales,\n            totalZeroRatedSales,\n            totalTaxableSales,\n            totalOutputTax,\n            totalGrossTaxableSales\n        ];\n        wsData.push(grandTotalRow);\n        wsData.push([]);\n        wsData.push([\"END OF REPORT\"]);\n\n\n        const ws = xlsx.utils.aoa_to_sheet(wsData);\n\n        const wb = xlsx.utils.book_new();\n        xlsx.utils.book_append_sheet(wb, ws, 'Sales Transaction');\n\n        const wbout = xlsx.write(wb, { bookType: 'xlsx', type: 'base64' });\n\n        const year = latestFile.name.substring(12, 16);\n        const fileName = `${ownerTin}-Sales-${year}.xlsx`;\n\n        return { success: true, base64: wbout, fileName };\n\n    } catch (e) {\n        console.error(\"Error generating sales Excel:\", e);\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        return { success: false, error: errorMessage };\n    }\n}\n\nexport async function generatePurchasesExcel(fileIds: string[], fileNames: string[]): Promise<ExcelResult> {\n    try {\n        const fileContents = await Promise.all(fileIds.map(id => getDatFileContent(id)));\n\n        const filesWithContent = fileNames.map((name, index) => ({\n            name,\n            content: fileContents[index].content,\n        }));\n        \n        const getMonthFromFileName = (name: string) => {\n            const monthStr = name.substring(10, 12);\n            return parseInt(monthStr, 10);\n        };\n        \n        filesWithContent.sort((a, b) => getMonthFromFileName(a.name) - getMonthFromFileName(b.name));\n        \n        const latestFile = filesWithContent[filesWithContent.length - 1];\n\n        if (!latestFile || !latestFile.content) {\n            return { success: false, error: \"No content found in the selected files.\" };\n        }\n\n        const headerLine = latestFile.content.split('\\n').find(line => line.startsWith('H,'));\n        \n        if (!headerLine) {\n            return { success: false, error: \"Could not find a header line in the latest file.\" };\n        }\n\n        const headerCols = headerLine.split(',').map(col => col.replace(/\"/g, ''));\n        const ownerTin = headerCols[2];\n        const ownerName = headerCols[3] ? headerCols[3] : `${headerCols[4]}, ${headerCols[5]} ${headerCols[6]}`;\n        const tradeName = headerCols[7];\n\n        const wsData: (string | number | null)[][] = [\n            ['PURCHASES TRANSACTION'],\n            ['RECONCILIATION OF LISTING FOR ENFORCEMENT'],\n            [],\n            [`TIN: ${ownerTin}`],\n            [`OWNER'S NAME: ${ownerName}`],\n            [`OWNER'S TRADE NAME: ${tradeName}`],\n            [],\n            ['TAXABLE', 'TAXPAYER', 'REGISTERED NAME', 'NAME OF SUPPLIER', \"SUPPLIER'S ADDRESS\", 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF', 'AMOUNT OF'],\n            ['MONTH', 'IDENTIFICATION', null, '(Last Name, First Name, Middle Name)', null, 'GROSS PURCHASE', 'EXEMPT PURCHASE', 'ZERO-RATED PURCHASE', 'TAXABLE PURCHASE', 'PURCHASE OF SERVICES', 'PURCHASE OF CAPITAL GOODS', 'PURCHASE OF OTHER GOODS', 'INPUT TAX', 'GROSS TAXABLE PURCHASE'],\n            [null, 'NUMBER', null, null, null, null, null, null, null, null, null, null, null, null],\n            ['(1)','(2)','(3)','(4)','(5)','(6)','(7)','(8)','(9)','(10)','(11)','(12)', '(13)', '(14)'],\n        ];\n\n        let totalGrossPurchase = 0;\n        let totalExemptPurchase = 0;\n        let totalZeroRatedPurchase = 0;\n        let totalTaxablePurchase = 0;\n        let totalPurchaseOfServices = 0;\n        let totalPurchaseOfCapitalGoods = 0;\n        let totalPurchaseOfOtherGoods = 0;\n        let totalInputTax = 0;\n        let totalGrossTaxablePurchase = 0;\n\n\n        for (const file of filesWithContent) {\n            if (!file.content) continue;\n\n            const detailLines = file.content.split('\\n').filter(line => line.startsWith('D,'));\n            for (const line of detailLines) {\n                const cols = line.split(',').map(col => col.replace(/\"/g, ''));\n                \n                const lastDayDateStr = cols[16];\n                const [monthStr, dayStr, yearStr] = lastDayDateStr.split('/');\n                const date = new Date(parseInt(yearStr), parseInt(monthStr), 0);\n                \n                const tin = cols[2];\n                const formattedTin = tin ? `${tin.substring(0,3)}-${tin.substring(3,6)}-${tin.substring(6,9)}` : '--- --- ---';\n                \n                const exemptPurchase = parseFloat(cols[9] || '0');\n                const zeroRatedPurchase = parseFloat(cols[10] || '0');\n                const purchaseOfServices = parseFloat(cols[11] || '0');\n                const purchaseOfCapitalGoods = parseFloat(cols[12] || '0');\n                const purchaseOfOtherGoods = parseFloat(cols[13] || '0');\n                const inputTax = parseFloat(cols[14] || '0');\n\n                const grossPurchase = exemptPurchase + zeroRatedPurchase + purchaseOfServices + purchaseOfCapitalGoods + purchaseOfOtherGoods;\n                const taxablePurchase = purchaseOfServices + purchaseOfCapitalGoods + purchaseOfOtherGoods;\n                const grossTaxablePurchase = purchaseOfServices + purchaseOfCapitalGoods + purchaseOfOtherGoods + inputTax;\n\n                totalGrossPurchase += grossPurchase;\n                totalExemptPurchase += exemptPurchase;\n                totalZeroRatedPurchase += zeroRatedPurchase;\n                totalTaxablePurchase += taxablePurchase;\n                totalPurchaseOfServices += purchaseOfServices;\n                totalPurchaseOfCapitalGoods += purchaseOfCapitalGoods;\n                totalPurchaseOfOtherGoods += purchaseOfOtherGoods;\n                totalInputTax += inputTax;\n                totalGrossTaxablePurchase += grossTaxablePurchase;\n\n                const bodyRow = [\n                    format(date, 'MM/dd/yyyy'),\n                    formattedTin,\n                    cols[3],\n                    `${cols[4]}, ${cols[5]} ${cols[6]}`,\n                    `${cols[7]} ${cols[8]}`,\n                    grossPurchase,\n                    exemptPurchase,\n                    zeroRatedPurchase,\n                    taxablePurchase,\n                    purchaseOfServices,\n                    purchaseOfCapitalGoods,\n                    purchaseOfOtherGoods,\n                    inputTax,\n                    grossTaxablePurchase\n                ];\n                wsData.push(bodyRow);\n            }\n        }\n        \n        wsData.push([]);\n        wsData.push([]);\n\n        const grandTotalRow = [\n            \"Grand Total:\",\n            null,\n            null,\n            null,\n            null,\n            totalGrossPurchase,\n            totalExemptPurchase,\n            totalZeroRatedPurchase,\n            totalTaxablePurchase,\n            totalPurchaseOfServices,\n            totalPurchaseOfCapitalGoods,\n            totalPurchaseOfOtherGoods,\n            totalInputTax,\n            totalGrossTaxablePurchase\n        ];\n        wsData.push(grandTotalRow);\n        wsData.push([]);\n        wsData.push([\"END OF REPORT\"]);\n\n        const ws = xlsx.utils.aoa_to_sheet(wsData);\n        const wb = xlsx.utils.book_new();\n        xlsx.utils.book_append_sheet(wb, ws, 'Purchases Transaction');\n        \n        const wbout = xlsx.write(wb, { bookType: 'xlsx', type: 'base64' });\n        \n        const year = latestFile.name.substring(12, 16);\n        const fileName = `${ownerTin}-Purchases-${year}.xlsx`;\n\n\n        return { success: true, base64: wbout, fileName };\n    } catch (e) {\n        console.error(\"Error generating purchases Excel:\", e);\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        return { success: false, error: errorMessage };\n    }\n}\n\nexport async function generate1601EQExcel(fileIds: string[], fileNames: string[]): Promise<ExcelResult> {\n    try {\n        const fileContents = await Promise.all(fileIds.map(id => getDatFileContent(id)));\n\n        const filesWithContent = fileNames.map((name, index) => ({\n            name,\n            content: fileContents[index].content,\n        }));\n        \n        const latestFile = filesWithContent[filesWithContent.length - 1];\n\n        if (!latestFile || !latestFile.content) {\n            return { success: false, error: \"No content found in the selected files.\" };\n        }\n\n        const headerLine = latestFile.content.split('\\n').find(line => line.startsWith('HQAP,'));\n        \n        if (!headerLine) {\n            return { success: false, error: \"Could not find a header line in the latest file.\" };\n        }\n\n        const headerCols = headerLine.split(',').map(col => col.replace(/\"/g, ''));\n        \n        const ownerTin = `${headerCols[2]}-${headerCols[3]}`;\n        const ownerName = headerCols[4];\n        \n        const getQuarterInfo = (reportingPeriod: string) => {\n            const [monthStr, yearStr] = reportingPeriod.split('/');\n            const month = parseInt(monthStr, 10);\n            const year = parseInt(yearStr, 10);\n            const quarter = Math.ceil(month / 3);\n            return { year, quarter, month };\n        };\n        const reportingPeriod = headerCols[5]; // \"MM/YYYY\"\n        const { year, quarter } = getQuarterInfo(reportingPeriod);\n        const quarterEndMonth = new Date(year, quarter * 3, 0); \n        const quarterEndDate = format(quarterEndMonth, 'MMMM, yyyy').toUpperCase();\n\n        const wsData: (string | number | null)[][] = [\n            ['Attachment to BIR Form 1601-EQ'],\n            ['QUARTERLY ALPHABETICAL LIST OF PAYEES SUBJECTED TO EXPANDED WITHHOLDING TAX & PAYEES WHOSE INCOME PAYMENTS ARE EXEMPT'],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n            [],\n        ];\n\n        wsData[2][0] = `FOR THE QUARTER ENDING ${quarterEndDate}`;\n        wsData[5][0] = `TIN: ${ownerTin}`;\n        wsData[6][0] = `WITHHOLDING AGENT'S NAME: ${ownerName}`;\n        \n        wsData[10][0] = 'SEQ';\n        wsData[11][0] = 'NO';\n        wsData[13][0] = '(1)';\n\n        wsData[10][1] = 'TAXPAYER';\n        wsData[11][1] = 'IDENTIFICATION';\n        wsData[12][1] = 'NUMBER';\n        wsData[13][1] = '(2)';\n\n        wsData[10][2] = 'CORPORATION';\n        wsData[11][2] = '(Registered Name)';\n        wsData[13][2] = '(3)';\n\n        wsData[10][3] = 'INDIVIDUAL';\n        wsData[11][3] = '(Last Name, First Name, Middle Name)';\n        wsData[13][3] = '(4)';\n\n        wsData[10][4] = 'ATC CODE';\n        wsData[13][4] = '(5)';\n        \n        wsData[10][5] = null; // F10 is null\n        wsData[11][5] = null;\n        wsData[13][5] = null;\n        \n        wsData[9][6] = \"1ST MONTH OF THE QUARTER\";\n        wsData[10][6] = 'AMOUNT OF';\n        wsData[11][6] = 'INCOME PAYMENT';\n        wsData[13][6] = '(6)';\n        \n        wsData[10][7] = 'TAX RATE';\n        wsData[13][7] = '(7)';\n        \n        wsData[10][8] = 'AMOUNT OF';\n        wsData[11][8] = \"TAX WITHHELD\";\n        wsData[13][8] = '(8)';\n\n        wsData[9][9] = \"2ND MONTH OF THE QUARTER\";\n        wsData[10][9] = \"AMOUNT OF\";\n        wsData[11][9] = \"INCOME PAYMENT\";\n        wsData[13][9] = \"(9)\";\n\n        wsData[10][10] = \"TAX RATE\";\n        wsData[13][10] = \"(10)\";\n\n        wsData[10][11] = \"AMOUNT OF\";\n        wsData[11][11] = \"TAX WITHHELD\";\n        wsData[13][11] = \"(11)\";\n\n        wsData[9][12] = \"3RD MONTH OF THE QUARTER\";\n        wsData[10][12] = \"AMOUNT OF\";\n        wsData[11][12] = \"INCOME PAYMENT\";\n        wsData[13][12] = \"(12)\";\n\n        wsData[10][13] = \"TAX RATE\";\n        wsData[13][13] = \"(13)\";\n\n        wsData[10][14] = \"AMOUNT OF\";\n        wsData[11][14] = \"TAX WITHHELD\";\n        wsData[13][14] = \"(14)\";\n\n        wsData[9][15] = \"TOTAL FOR THE QUARTER\";\n        wsData[10][15] = \"TOTAL\";\n        wsData[11][15] = \"INCOME PAYMENT\";\n        wsData[13][15] = \"(15)\";\n\n        wsData[10][16] = \"TOTAL\";\n        wsData[11][16] = \"TAX WITHHELD\";\n        wsData[13][16] = \"(16)\";\n\n        const ws = xlsx.utils.aoa_to_sheet(wsData);\n\n        const wb = xlsx.utils.book_new();\n        xlsx.utils.book_append_sheet(wb, ws, 'sched1');\n\n        const wbout = xlsx.write(wb, { bookType: 'xlsx', type: 'base64' });\n        \n        const fileName = `${headerCols[2]}-1601EQ-Q${quarter}-${year}.xlsx`;\n\n        return { success: true, base64: wbout, fileName };\n\n    } catch (e) {\n        console.error(\"Error generating 1601-EQ Excel:\", e);\n        const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n        return { success: false, error: errorMessage };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAoTsB,sBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 1346, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/dat-files/page.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useEffect, useState, useTransition, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Search, Trash, Loader2, SearchX, FileDown, Eye, FileSpreadsheet, XCircle } from 'lucide-react';\nimport { getDatFileContent, deleteDatFile } from '@/lib/actions/drive';\nimport type { DatFile } from '@/lib/schemas';\nimport { useToast } from '@/hooks/use-toast';\nimport { format } from 'date-fns';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { DatPreviewDialog } from '@/components/dat-preview-dialog';\nimport type { DatPreviewState } from '@/components/dat-preview-dialog';\nimport { DeleteConfirmationDialog } from '@/components/delete-confirmation-dialog';\nimport { useDatFiles } from '@/hooks/use-dat-files';\nimport { useRefresh } from '@/hooks/use-refresh';\nimport JSZip from 'jszip';\nimport { generateSalesExcel, generatePurchasesExcel, generate1601EQExcel } from '@/lib/actions/excel';\n\n\nfunction DatFilesContent() {\n    const { files, isPending, initialFetchComplete, removeFile, fetchFiles } = useDatFiles();\n    const { setRefreshFunction } = useRefresh();\n    const [isViewing, startViewingTransition] = useTransition();\n    const [isDownloading, startDownloadingTransition] = useTransition();\n    const [isDeleting, startDeleteTransition] = useTransition();\n    const [isMultiDownloading, startMultiDownloadTransition] = useTransition();\n    const [isExcelDownloading, startExcelDownloadTransition] = useTransition();\n    const [viewingFileId, setViewingFileId] = useState<string | null>(null);\n    const [downloadingFileId, setDownloadingFileId] = useState<string | null>(null);\n    const [deletingFileId, setDeletingFileId] = useState<string | null>(null);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [currentPage, setCurrentPage] = useState(1);\n    const [selectedFiles, setSelectedFiles] = useState<DatFile[]>([]);\n    const { toast } = useToast();\n    const ITEMS_PER_PAGE = 10;\n    \n    const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n    const [previewData, setPreviewData] = useState<DatPreviewState | null>(null);\n\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n    const [fileToDelete, setFileToDelete] = useState<DatFile | null>(null);\n\n    const handleFetch = useCallback((isManualRefresh = false) => {\n        fetchFiles(isManualRefresh);\n    }, [fetchFiles]);\n    \n    useEffect(() => {\n        setRefreshFunction(() => () => handleFetch(true));\n    }, [handleFetch, setRefreshFunction]);\n\n\n    useEffect(() => {\n        setCurrentPage(1);\n    }, [searchQuery, selectedFiles]);\n    \n    const handleViewFile = (file: DatFile) => {\n        setViewingFileId(file.id);\n        startViewingTransition(async () => {\n            try {\n                const result = await getDatFileContent(file.id);\n                if (result.success && result.content) {\n                    const lines = result.content.split('\\n');\n                    const { transactionType } = parseFileName(file.name);\n                    let reportType: DatPreviewState['reportType'] = 'none';\n                    let totals: DatPreviewState['totals'] = {};\n    \n                    if (transactionType.includes('1601-EQ')) {\n                        reportType = '1601eq';\n                        const footer1 = lines.find(line => line.startsWith('C1,'));\n                        const footer2 = lines.find(line => line.startsWith('C2,'));\n                        if (footer1) {\n                            const cols = footer1.split(',');\n                            totals.taxableIncome = parseFloat(cols[5] || '0');\n                            totals.withholdingTax = parseFloat(cols[6] || '0');\n                        }\n                        if (footer2) {\n                             const cols = footer2.split(',');\n                            totals.exemptIncome = parseFloat(cols[5] || '0');\n                        }\n                    } else if (transactionType.includes('1601-FQ')) {\n                        reportType = '1601fq';\n                        const footer1 = lines.find(line => line.startsWith('C1,'));\n                        const footer2 = lines.find(line => line.startsWith('C2,'));\n                        const footer3 = lines.find(line => line.startsWith('C3,'));\n                         if (footer1) {\n                            const cols = footer1.split(',');\n                            totals.withholdingTax = parseFloat(cols[6] || '0');\n                        }\n                         if (footer2) {\n                            const cols = footer2.split(',');\n                            totals.services = parseFloat(cols[7] || '0');\n                        }\n                         if (footer3) {\n                            const cols = footer3.split(',');\n                            totals.exemptIncome = parseFloat(cols[5] || '0');\n                        }\n                    } else if (transactionType.startsWith('SAWT')) {\n                        reportType = 'sawt';\n                        const footer = lines.find(line => line.startsWith('CSAWT,'));\n                        if (footer) {\n                            const cols = footer.split(',');\n                            totals.taxableIncome = parseFloat(cols[5] || '0');\n                            totals.withholdingTax = parseFloat(cols[6] || '0');\n                        }\n                    } else if (transactionType === 'Sales') {\n                        reportType = 'sales';\n                        const detailLines = lines.filter(line => line.startsWith('D,'));\n                        totals = detailLines.reduce((acc, line) => {\n                            const columns = line.split(',');\n                            acc.exempt = (acc.exempt ?? 0) + parseFloat(columns[9] || '0');\n                            acc.zeroRated = (acc.zeroRated ?? 0) + parseFloat(columns[10] || '0');\n                            acc.vatable = (acc.vatable ?? 0) + parseFloat(columns[11] || '0');\n                            acc.outputVat = (acc.outputVat ?? 0) + parseFloat(columns[12] || '0');\n                            return acc;\n                        }, { exempt: 0, zeroRated: 0, vatable: 0, outputVat: 0 });\n                    } else if (transactionType === 'Purchases') {\n                        reportType = 'purchases';\n                        const detailLines = lines.filter(line => line.startsWith('D,'));\n                        totals = detailLines.reduce((acc, line) => {\n                            const columns = line.split(',');\n                            acc.exempt = (acc.exempt ?? 0) + parseFloat(columns[9] || '0');\n                            acc.zeroRated = (acc.zeroRated ?? 0) + parseFloat(columns[10] || '0');\n                            acc.services = (acc.services ?? 0) + parseFloat(columns[11] || '0');\n                            acc.capitalGoods = (acc.capitalGoods ?? 0) + parseFloat(columns[12] || '0');\n                            acc.otherGoods = (acc.otherGoods ?? 0) + parseFloat(columns[13] || '0');\n                            acc.inputTax = (acc.inputTax ?? 0) + parseFloat(columns[14] || '0');\n                            return acc;\n                        }, { exempt: 0, zeroRated: 0, services: 0, capitalGoods: 0, otherGoods: 0, inputTax: 0 });\n                    }\n    \n                    setPreviewData({\n                        fileName: file.name,\n                        content: result.content,\n                        isViewing: true,\n                        reportType,\n                        totals,\n                    });\n                    setIsPreviewOpen(true);\n                } else {\n                    if (result.error?.includes('File not found')) {\n                        toast({ title: 'File Not Found', description: 'This file may have been deleted. Please refresh the list.', variant: 'destructive'});\n                        removeFile(file.id); // Remove from local cache\n                    } else {\n                        toast({ title: 'Error', description: result.error || 'Failed to fetch file content.', variant: 'destructive' });\n                    }\n                }\n            } finally {\n                setViewingFileId(null);\n            }\n        })\n    }\n\n    const handleDownloadFile = (file: DatFile) => {\n        setDownloadingFileId(file.id);\n        startDownloadingTransition(async () => {\n            try {\n                const result = await getDatFileContent(file.id);\n                if (result.success && result.content) {\n                    const blob = new Blob([result.content], { type: 'text/plain;charset=utf-8' });\n                    const url = URL.createObjectURL(blob);\n                    const link = document.createElement('a');\n                    link.href = url;\n                    link.download = file.name;\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                    URL.revokeObjectURL(url);\n                } else {\n                     if (result.error?.includes('File not found')) {\n                        toast({ title: 'File Not Found', description: 'This file may have been deleted. Please refresh the list.', variant: 'destructive'});\n                        removeFile(file.id); // Remove from local cache\n                    } else {\n                        toast({ title: 'Error', description: result.error || 'Failed to download file content.', variant: 'destructive' });\n                    }\n                }\n            } finally {\n                setDownloadingFileId(null);\n            }\n        });\n    };\n\n    const handleMultiDownload = () => {\n        if (selectedFiles.length === 0) return;\n\n        startMultiDownloadTransition(async () => {\n            const zip = new JSZip();\n            const failedFiles: string[] = [];\n\n            const filePromises = selectedFiles.map(file => \n                getDatFileContent(file.id).then(result => {\n                    if (result.success && result.content) {\n                        zip.file(file.name, result.content);\n                    } else {\n                        failedFiles.push(file.name);\n                        removeFile(file.id);\n                    }\n                })\n            );\n\n            await Promise.all(filePromises);\n\n            if (failedFiles.length > 0) {\n                 toast({\n                    title: 'Some Files Failed',\n                    description: `Could not download: ${failedFiles.join(', ')}. They may have been deleted.`,\n                    variant: 'destructive',\n                });\n            }\n\n            if (Object.keys(zip.files).length > 0) {\n                const { tin, transactionType, year } = parseFileName(selectedFiles[0].name);\n                const zipFileName = `${tin}-${transactionType.replace(/ /g, '_')}-${year}.zip`;\n\n                const zipContent = await zip.generateAsync({ type: 'blob' });\n                const url = URL.createObjectURL(zipContent);\n                const link = document.createElement('a');\n                link.href = url;\n                link.download = zipFileName;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n\n                toast({ title: 'Download Started', description: `Your files are being downloaded in ${zipFileName}`});\n            }\n        });\n    }\n\n    const handleExcelDownload = () => {\n        if (selectedFiles.length === 0) return;\n    \n        const firstSelectedFile = selectedFiles[0];\n        const { transactionType } = parseFileName(firstSelectedFile.name);\n    \n        startExcelDownloadTransition(async () => {\n            let result;\n            const fileIds = selectedFiles.map(f => f.id);\n            const fileNames = selectedFiles.map(f => f.name); // Pass names for sorting\n    \n            if (transactionType === 'Sales') {\n                result = await generateSalesExcel(fileIds, fileNames);\n            } else if (transactionType === 'Purchases') {\n                result = await generatePurchasesExcel(fileIds, fileNames);\n            } else if (transactionType.includes('1601-EQ')) {\n                result = await generate1601EQExcel(fileIds, fileNames);\n            } else {\n                toast({\n                    title: \"Not Implemented\",\n                    description: `Excel generation for ${transactionType} is not yet available.`,\n                    variant: \"destructive\"\n                });\n                return;\n            }\n    \n            if (result.success && result.base64) {\n                const byteCharacters = atob(result.base64);\n                const byteNumbers = new Array(byteCharacters.length);\n                for (let i = 0; i < byteCharacters.length; i++) {\n                    byteNumbers[i] = byteCharacters.charCodeAt(i);\n                }\n                const byteArray = new Uint8Array(byteNumbers);\n                const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    \n                const url = URL.createObjectURL(blob);\n                const link = document.createElement('a');\n                link.href = url;\n                link.download = result.fileName || 'download.xlsx';\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n    \n                toast({\n                    title: 'Excel Generated',\n                    description: `Your file ${result.fileName} has been downloaded.`,\n                });\n            } else {\n                toast({\n                    title: \"Excel Generation Failed\",\n                    description: result.error || \"An unknown error occurred.\",\n                    variant: \"destructive\"\n                });\n            }\n        });\n    };\n\n    const handleDeleteClick = (file: DatFile) => {\n        setFileToDelete(file);\n        setIsDeleteDialogOpen(true);\n    };\n    \n    const handleConfirmDelete = () => {\n        if (!fileToDelete) return;\n        \n        setDeletingFileId(fileToDelete.id);\n        startDeleteTransition(async () => {\n            const result = await deleteDatFile(fileToDelete.id);\n            if (result.success) {\n                removeFile(fileToDelete!.id); // This will update the local state and broadcast the change\n                toast({ title: 'File Deleted', description: `Successfully deleted ${fileToDelete!.name}`});\n            } else {\n                if (result.error?.includes('File not found')) {\n                    toast({ title: 'File Not Found', description: 'This file may have been deleted already.', variant: 'destructive'});\n                    removeFile(fileToDelete!.id); // Remove from local cache anyway\n                } else {\n                    toast({ title: 'Error', description: result.error || 'Failed to delete file.', variant: 'destructive' });\n                }\n            }\n            setIsDeleteDialogOpen(false);\n            setFileToDelete(null);\n            setDeletingFileId(null);\n        });\n    };\n    \n    const parseFileName = (fileName: string) => {\n        const tinLength = 9;\n        const branchCodeLength = 4;\n        const tinAndBranchLength = tinLength + branchCodeLength;\n        const sawtSchedules = [\"1700\", \"1702\", \"2550Q\", \"1701\", \"1702Q\", \"2551M\", \"1701Q\", \"2550M\", \"2553\"];\n\n        const tin = fileName.substring(0, tinLength);\n\n        if (fileName.includes('1601EQ')) {\n            const monthIndex = tinAndBranchLength;\n            const yearIndex = monthIndex + 2;\n            const month = fileName.substring(monthIndex, yearIndex);\n            const year = fileName.substring(yearIndex, yearIndex + 4);\n            const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n            return { transactionType: '1601-EQ', reportingPeriod, year, month, tin };\n        }\n        \n        if (fileName.includes('1601FQ')) {\n            const monthIndex = tinAndBranchLength;\n            const yearIndex = monthIndex + 2;\n            const month = fileName.substring(monthIndex, yearIndex);\n            const year = fileName.substring(yearIndex, yearIndex + 4);\n            const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n            return { transactionType: '1601-FQ', reportingPeriod, year, month, tin };\n        }\n\n        const sortedSawtSchedules = sawtSchedules.sort((a, b) => b.length - a.length);\n        const sawtScheduleMatch = sortedSawtSchedules.find(schedule => fileName.includes(schedule));\n\n        if (sawtScheduleMatch) {\n            const monthIndex = tinAndBranchLength;\n            const yearIndex = monthIndex + 2;\n            const month = fileName.substring(monthIndex, yearIndex);\n            const year = fileName.substring(yearIndex, yearIndex + 4);\n            const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n            return { transactionType: `SAWT-${sawtScheduleMatch}`, reportingPeriod, year, month, tin };\n        }\n        \n        const typeCode = fileName.charAt(9);\n        const month = fileName.substring(10, 12);\n        const year = fileName.substring(12, 16);\n\n        let transactionType = 'Unknown';\n        switch (typeCode) {\n            case 'S': transactionType = 'Sales'; break;\n            case 'P': transactionType = 'Purchases'; break;\n            case 'I': transactionType = 'Importations'; break;\n        }\n\n        const reportingPeriod = new Date(parseInt(year), parseInt(month) - 1).toLocaleString('default', { month: 'long', year: 'numeric' });\n\n        return { transactionType, reportingPeriod, year, month, tin };\n    };\n\n    const handleSelectRow = (file: DatFile, checked: boolean) => {\n        setSelectedFiles(prevSelected => {\n            if (checked) {\n                return [...prevSelected, file];\n            } else {\n                return prevSelected.filter(selectedFile => selectedFile.id !== file.id);\n            }\n        });\n    };\n    \n    const getQuarter = (month: number) => {\n        if (month >= 1 && month <= 3) return 1;\n        if (month >= 4 && month <= 6) return 2;\n        if (month >= 7 && month <= 9) return 3;\n        if (month >= 10 && month <= 12) return 4;\n        return 0;\n    }\n\n    const filteredFiles = files\n        .filter(file => {\n            const query = searchQuery.toLowerCase();\n            if (query) {\n                return file.name.toLowerCase().includes(query);\n            }\n            return true;\n        })\n        .filter(file => {\n            if (selectedFiles.length === 0) {\n                return true;\n            }\n\n            const firstSelectedFile = selectedFiles[0];\n            const selectedFileInfo = parseFileName(firstSelectedFile.name);\n            const currentFileInfo = parseFileName(file.name);\n            \n            const tinMatch = currentFileInfo.tin === selectedFileInfo.tin;\n            const typeMatch = currentFileInfo.transactionType === selectedFileInfo.transactionType;\n            const yearMatch = currentFileInfo.year === selectedFileInfo.year;\n\n            if (!tinMatch || !typeMatch || !yearMatch) {\n                return false;\n            }\n\n            if (selectedFileInfo.transactionType.includes('1601-EQ') || selectedFileInfo.transactionType.includes('1601-FQ')) {\n                const selectedQuarter = getQuarter(parseInt(selectedFileInfo.month!, 10));\n                const currentQuarter = getQuarter(parseInt(currentFileInfo.month!, 10));\n                return selectedQuarter === currentQuarter;\n            }\n            \n            return true;\n        })\n        .sort((a, b) => new Date(b.modifiedTime).getTime() - new Date(a.modifiedTime).getTime());\n\n\n    const totalPages = Math.ceil(filteredFiles.length / ITEMS_PER_PAGE);\n    const paginatedFiles = filteredFiles.slice(\n        (currentPage - 1) * ITEMS_PER_PAGE,\n        currentPage * ITEMS_PER_PAGE\n    );\n    \n    const handlePreviousPage = () => {\n        setCurrentPage((prev) => Math.max(prev - 1, 1));\n    };\n\n    const handleNextPage = () => {\n        setCurrentPage((prev) => Math.min(prev + 1, totalPages));\n    };\n\n    const showLoading = isPending && !initialFetchComplete;\n    const noResults = !showLoading && files.length > 0 && paginatedFiles.length === 0 && searchQuery.length > 0;\n\n    return (\n        <>\n            <div className=\"p-4 md:p-6 space-y-6\">\n                <div className=\"space-y-1\">\n                    <h1 className=\"text-3xl font-bold\">DAT Files</h1>\n                    <p className=\"text-muted-foreground\">Manage your generated DAT files.</p>\n                </div>\n                <Card>\n                    <CardHeader>\n                        {selectedFiles.length === 0 ? (\n                            <div className=\"flex items-center gap-4 pt-2\">\n                                <div className=\"relative flex-1\">\n                                    <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                    <Input\n                                        placeholder=\"Search by filename...\"\n                                        className=\"pl-8\"\n                                        value={searchQuery}\n                                        onChange={(e) => setSearchQuery(e.target.value)}\n                                    />\n                                </div>\n                            </div>\n                        ) : (\n                            <div className=\"flex items-center justify-between gap-4 pt-2\">\n                                <div className=\"text-sm font-semibold\">\n                                    {selectedFiles.length} file{selectedFiles.length > 1 ? 's' : ''} selected\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                    <Button variant=\"outline\" size=\"sm\" className=\"h-8 px-2 md:h-9 md:px-3\" onClick={handleExcelDownload} disabled={isExcelDownloading}>\n                                        {isExcelDownloading ? <Loader2 className=\"h-4 w-4 animate-spin md:mr-2\" /> : <FileSpreadsheet className=\"h-4 w-4 md:mr-2\" />}\n                                        <span className=\"hidden md:inline\">Download as Excel</span>\n                                    </Button>\n                                    <Button variant=\"outline\" size=\"sm\" className=\"h-8 px-2 md:h-9 md:px-3\" onClick={handleMultiDownload} disabled={isMultiDownloading}>\n                                        {isMultiDownloading ? <Loader2 className=\"h-4 w-4 animate-spin md:mr-2\" /> : <FileDown className=\"h-4 w-4 md:mr-2\" />}\n                                        <span className=\"hidden md:inline\">Download Selected</span>\n                                    </Button>\n                                    <Button variant=\"ghost\" size=\"sm\" className=\"h-8 px-2 md:h-9 md:px-3\" onClick={() => setSelectedFiles([])}>\n                                        <XCircle className=\"h-4 w-4 md:mr-2\" />\n                                        <span className=\"hidden md:inline\">Clear Selection</span>\n                                    </Button>\n                                </div>\n                            </div>\n                        )}\n                    </CardHeader>\n                    <CardContent>\n                        {showLoading ? (\n                            <div className=\"h-48 text-center flex items-center justify-center\">\n                                <div className=\"flex items-center justify-center gap-2\">\n                                    <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n                                    <p className=\"text-muted-foreground\">Loading files...</p>\n                                </div>\n                            </div>\n                        ) : noResults ? (\n                            <div className=\"h-48 text-center flex flex-col items-center justify-center gap-4\">\n                            <SearchX className=\"h-12 w-12 text-muted-foreground\" />\n                                <h3 className=\"text-xl font-semibold\">No DAT Files Found</h3>\n                                <p className=\"text-muted-foreground\">\n                                    {searchQuery ? \"No files matched your search.\" : \"You haven't generated any DAT files yet.\"}\n                                </p>\n                            </div>\n                        ) : (\n                        <>\n                            {/* Desktop Table View */}\n                            <div className=\"border rounded-md hidden md:block\">\n                                <Table>\n                                    <TableHeader>\n                                        <TableRow>\n                                            <TableHead className=\"w-[5%]\">\n                                            </TableHead>\n                                            <TableHead className=\"w-[30%]\">File Name</TableHead>\n                                            <TableHead className=\"w-[20%]\">Transaction Type</TableHead>\n                                            <TableHead className=\"w-[20%]\">Reporting Period</TableHead>\n                                            <TableHead className=\"w-[15%]\">Last Modified</TableHead>\n                                            <TableHead className=\"w-[10%] text-right\">Actions</TableHead>\n                                        </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                        {paginatedFiles.map((file) => {\n                                            const { transactionType, reportingPeriod } = parseFileName(file.name);\n                                            const isFileBeingViewed = isViewing && viewingFileId === file.id;\n                                            const isFileBeingDownloaded = isDownloading && downloadingFileId === file.id;\n                                            const isFileBeingDeleted = isDeleting && deletingFileId === file.id;\n                                            const isDisabled = isViewing || isDownloading || isDeleting || isMultiDownloading;\n                                            const isSelected = selectedFiles.some(selected => selected.id === file.id);\n                                            return (\n                                                <TableRow key={file.id} data-state={isSelected ? \"selected\" : \"unselected\"}>\n                                                    <TableCell>\n                                                            <Checkbox\n                                                            checked={isSelected}\n                                                            onCheckedChange={(checked) => handleSelectRow(file, Boolean(checked))}\n                                                            aria-label=\"Select row\"\n                                                            disabled={isDisabled}\n                                                        />\n                                                    </TableCell>\n                                                    <TableCell className=\"font-mono\">{file.name}</TableCell>\n                                                    <TableCell>\n                                                        {transactionType}\n                                                    </TableCell>\n                                                    <TableCell>{reportingPeriod}</TableCell>\n                                                    <TableCell>{format(new Date(file.modifiedTime), 'PP')}</TableCell>\n                                                    <TableCell>\n                                                        <div className=\"flex items-center justify-end gap-2\">\n                                                            <Button variant=\"ghost\" size=\"icon\" onClick={() => handleViewFile(file)} disabled={isDisabled}>\n                                                                {isFileBeingViewed ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Eye className=\"h-4 w-4\" />}\n                                                                <span className=\"sr-only\">View</span>\n                                                            </Button>\n                                                            <Button variant=\"ghost\" size=\"icon\" onClick={() => handleDownloadFile(file)} disabled={isDisabled}>\n                                                                {isFileBeingDownloaded ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <FileDown className=\"h-4 w-4\" />}\n                                                                <span className=\"sr-only\">Download</span>\n                                                            </Button>\n                                                            <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive hover:text-destructive\" onClick={() => handleDeleteClick(file)} disabled={isDisabled}>\n                                                                {isFileBeingDeleted ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Trash className=\"h-4 w-4\" />}\n                                                                <span className=\"sr-only\">Delete</span>\n                                                            </Button>\n                                                        </div>\n                                                    </TableCell>\n                                                </TableRow>\n                                            );\n                                        })}\n                                    </TableBody>\n                                </Table>\n                            </div>\n                            \n                            {/* Mobile Card View */}\n                             <div className=\"block md:hidden space-y-4\">\n                                {paginatedFiles.map((file) => {\n                                    const { transactionType, reportingPeriod } = parseFileName(file.name);\n                                    const isFileBeingViewed = isViewing && viewingFileId === file.id;\n                                    const isFileBeingDownloaded = isDownloading && downloadingFileId === file.id;\n                                    const isFileBeingDeleted = isDeleting && deletingFileId === file.id;\n                                    const isDisabled = isViewing || isDownloading || isDeleting || isMultiDownloading;\n                                    const isSelected = selectedFiles.some(selected => selected.id === file.id);\n\n                                    return (\n                                    <Card key={file.id} className=\"p-4\" data-state={isSelected ? \"selected\" : \"unselected\"}>\n                                        <div className=\"flex items-center\">\n                                            <Checkbox\n                                                checked={isSelected}\n                                                onCheckedChange={(checked) => handleSelectRow(file, Boolean(checked))}\n                                                aria-label=\"Select row\"\n                                                className=\"mr-4\"\n                                                disabled={isDisabled}\n                                            />\n                                            <div className=\"flex-1 overflow-hidden\">\n                                                <p className=\"font-semibold font-mono truncate\" title={file.name}>{file.name}</p>\n                                                <p className=\"text-sm text-muted-foreground\">{reportingPeriod}</p>\n                                                <p className=\"text-sm mt-1\">{transactionType}</p>\n                                            </div>\n                                            <div className=\"flex flex-col items-center flex-shrink-0 ml-2\">\n                                                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => handleViewFile(file)} disabled={isDisabled}>\n                                                    {isFileBeingViewed ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Eye className=\"h-4 w-4\" />}\n                                                    <span className=\"sr-only\">View</span>\n                                                </Button>\n                                                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => handleDownloadFile(file)} disabled={isDisabled}>\n                                                     {isFileBeingDownloaded ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <FileDown className=\"h-4 w-4\" />}\n                                                    <span className=\"sr-only\">Download</span>\n                                                </Button>\n                                                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-destructive hover:text-destructive\" onClick={() => handleDeleteClick(file)} disabled={isDisabled}>\n                                                    {isFileBeingDeleted ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Trash className=\"h-4 w-4\" />}\n                                                    <span className=\"sr-only\">Delete</span>\n                                                </Button>\n                                            </div>\n                                        </div>\n                                    </Card>\n                                    )\n                                })}\n                            </div>\n                            \n                            {filteredFiles.length > ITEMS_PER_PAGE && (\n                                <div className=\"flex items-center justify-end space-x-2 py-4 px-0 md:px-4\">\n                                    <span className=\"text-sm text-muted-foreground\">\n                                        Page {totalPages > 0 ? currentPage : 0} of {totalPages}\n                                    </span>\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={handlePreviousPage}\n                                        disabled={currentPage <= 1}\n                                    >\n                                        Previous\n                                    </Button>\n                                    <Button\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        onClick={handleNextPage}\n                                        disabled={currentPage >= totalPages}\n                                    >\n                                        Next\n                                    </Button>\n                                </div>\n                            )}\n                        </>\n                        )}\n                    </CardContent>\n                </Card>\n            </div>\n            {previewData && (\n                <DatPreviewDialog\n                    isOpen={isPreviewOpen}\n                    onOpenChange={setIsPreviewOpen}\n                    fileName={previewData.fileName}\n                    content={previewData.content}\n                    isViewing={previewData.isViewing}\n                    reportType={previewData.reportType}\n                    totals={previewData.totals}\n                />\n            )}\n            <DeleteConfirmationDialog\n                isOpen={isDeleteDialogOpen}\n                onOpenChange={setIsDeleteDialogOpen}\n                onConfirm={handleConfirmDelete}\n                isDeleting={isDeleting}\n                itemName={fileToDelete?.name}\n                itemType=\"DAT file\"\n            />\n        </>\n    );\n}\n\nexport default function DatFilesPage() {\n    return <DatFilesContent />;\n}\n\n    \n\n    \n\n"],"names":[],"mappings":"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","debugId":null}}]
}