{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm table-fixed\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;YAC1D,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,gBAAgB,kKAAA,CAAA,UAAuB;AAE7C,MAAM,eAAe,kKAAA,CAAA,SAAsB;AAE3C,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,kKAAA,CAAA,UAAuB;gBACtB,KAAK;gBACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,kKAAA,CAAA,QAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,4LAAA,CAAA,IAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,kKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, deleteFileFromDrive, getInitialPageTokenForDrive, listChangesSincePageToken } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    datFile: DatFileSchema.nullable(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null, datFile: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\", datFile: null,\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const datFileName = `${tin}S${month}${year}.DAT`;\n    const reportTypeShort = \"Sales\";\n    const drivePath = [tin, reportTypeShort, year];\n\n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName, datFile: null,\n                datContent: null, error: null, errors: null,\n                totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n                totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n                totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n                processedData: null,\n            };\n        }\n    }\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:generateSalesDatFile] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:generateSalesDatFile] Background upload failed for ${datFileName}:`, err);\n    });\n            \n    return { \n        success: true, datContent, fileName: datFileName, datFile: null, // Return null for datFile initially\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    // All validations passed, now check for existing file\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n    const reportTypeShort = \"1601EQ\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                ...defaultErrorResult,\n                success: false,\n                fileExists: true,\n                fileName: datFileName,\n            };\n        }\n    }\n\n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    // Header Row\n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    // Schedule 1 Content\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    // Schedule 2 Content\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:generate1601EQDatFile] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:generate1601EQDatFile] Background upload failed for ${datFileName}:`, err);\n    });\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        datFile: null,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!file || !reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for conversion.' };\n    }\n\n    try {\n        const profile: TaxProfile = JSON.parse(profileString);\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            return await validateExcelForPurchases(formData);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n            return await generate1601EQDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                return { ...defaultErrorResult, error: 'SAWT schedule is missing.' };\n            }\n            const result = await validateAndProcessSAWT(formData, false);\n            if (result.success) {\n                 return { ...result };\n            }\n            return result;\n        }\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during conversion.';\n        console.error('[convertExcelToDat] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Conversion failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function overwriteDatFile(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const processedDataString = formData.get('processedData') as string | null;\n    const nonCreditableTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for overwrite.' };\n    }\n     const profile: TaxProfile = JSON.parse(profileString);\n\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n            return await generateSalesDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedDataString || nonCreditableTaxString === null) return { ...defaultErrorResult, error: 'Missing processed data for overwrite.' };\n            const processedData = JSON.parse(processedDataString);\n            const nonCreditableInputTax = parseFloat(nonCreditableTaxString);\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, true);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n             return await generate1601EQDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!file || !schedule) return { ...defaultErrorResult, error: 'Missing file or schedule for SAWT overwrite.' };\n            return await validateAndProcessSAWT(formData, true);\n        }\n\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported for overwrite.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Overwrite failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number,\n    folderId: string,\n    overwrite: boolean = false\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    const reportTypeShort = \"Purchases\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName, datFile: null,\n                datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null,\n                totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null,\n                totalOtherGoods: null, totalInputTax: null,\n                totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n                processedData: null\n            };\n        }\n    }\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:generatePurchasesDatFile] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:generatePurchasesDatFile] Background upload failed for ${datFileName}:`, err);\n    });\n\n    return { \n        success: true, datContent, fileName: datFileName, datFile: null,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(formData: FormData): Promise<DatFileResult> {\n    const processedDataString = formData.get('processedData') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const nonCreditableInputTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    if (!processedDataString || !profileString || !month || !year || nonCreditableInputTaxString === null || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for purchase file creation.' };\n    }\n    \n    try {\n        const processedData = JSON.parse(processedDataString);\n        const profile: TaxProfile = JSON.parse(profileString);\n        const nonCreditableInputTax = parseFloat(nonCreditableInputTaxString);\n\n        return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, false);\n\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during DAT file creation.';\n        console.error('[createPurchasesDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Creation failed: ${errorMessage}` };\n    }\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  folderIds: z.array(z.string()).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, folderIds: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const { files, folderIds } = await listDatFiles(folderId);\n        return { success: true, files, folderIds, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, folderIds: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, content: null, error: 'File not found.' };\n        }\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function deleteDatFile(fileId: string): Promise<SimpleResult> {\n    try {\n        if (!fileId) {\n            return { success: false, error: 'File ID is required.' };\n        }\n        await deleteFileFromDrive(fileId);\n        return { success: true, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, error: 'File not found.' };\n        }\n        console.error(`[deleteDatFile] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, error: `Failed to delete file: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(formData: FormData, overwrite: boolean = false): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const schedule = formData.get('schedule') as string;\n    const profileString = formData.get('profile') as string;\n    const month = formData.get('month') as string;\n    const year = formData.get('year') as string;\n    const folderId = formData.get('folderId') as string;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const profile: TaxProfile = JSON.parse(profileString);\n\n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    const reportTypeShort = `SAWT_${schedule}`;\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                ...defaultErrorResult,\n                success: false,\n                fileExists: true,\n                fileName: datFileName,\n            };\n        }\n    }\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:validateAndProcessSAWT] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:validateAndProcessSAWT] Background upload failed for ${datFileName}:`, err);\n    });\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        datFile: null,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nconst PageTokenResultSchema = z.object({\n  success: z.boolean(),\n  token: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype PageTokenResult = z.infer<typeof PageTokenResultSchema>;\n\nexport async function getInitialPageToken(): Promise<PageTokenResult> {\n    try {\n        const token = await getInitialPageTokenForDrive();\n        return { success: true, token, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, token: null, error: `Failed to get initial page token: ${errorMessage}` };\n    }\n}\n\nconst ChangesResultSchema = z.object({\n  success: z.boolean(),\n  hasChanges: z.boolean(),\n  newToken: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype ChangesResult = z.infer<typeof ChangesResultSchema>;\n\nexport async function checkForDatFileChanges(allFolderIds: string[], pageToken: string): Promise<ChangesResult> {\n    if (!allFolderIds || allFolderIds.length === 0 || !pageToken) {\n        return { success: false, hasChanges: false, newToken: null, error: 'Folder IDs and page token are required.' };\n    }\n    try {\n        const { hasChanges, newPageToken } = await listChangesSincePageToken(allFolderIds, pageToken);\n        return { success: true, hasChanges, newToken: newPageToken, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, hasChanges: false, newToken: pageToken, error: `Failed to check for changes: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAwIsB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, deleteFileFromDrive, getInitialPageTokenForDrive, listChangesSincePageToken } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    datFile: DatFileSchema.nullable(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null, datFile: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\", datFile: null,\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const datFileName = `${tin}S${month}${year}.DAT`;\n    const reportTypeShort = \"Sales\";\n    const drivePath = [tin, reportTypeShort, year];\n\n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName, datFile: null,\n                datContent: null, error: null, errors: null,\n                totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n                totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n                totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n                processedData: null,\n            };\n        }\n    }\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:generateSalesDatFile] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:generateSalesDatFile] Background upload failed for ${datFileName}:`, err);\n    });\n            \n    return { \n        success: true, datContent, fileName: datFileName, datFile: null, // Return null for datFile initially\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    // All validations passed, now check for existing file\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n    const reportTypeShort = \"1601EQ\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                ...defaultErrorResult,\n                success: false,\n                fileExists: true,\n                fileName: datFileName,\n            };\n        }\n    }\n\n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    // Header Row\n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    // Schedule 1 Content\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    // Schedule 2 Content\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:generate1601EQDatFile] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:generate1601EQDatFile] Background upload failed for ${datFileName}:`, err);\n    });\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        datFile: null,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!file || !reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for conversion.' };\n    }\n\n    try {\n        const profile: TaxProfile = JSON.parse(profileString);\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            return await validateExcelForPurchases(formData);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n            return await generate1601EQDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                return { ...defaultErrorResult, error: 'SAWT schedule is missing.' };\n            }\n            const result = await validateAndProcessSAWT(formData, false);\n            if (result.success) {\n                 return { ...result };\n            }\n            return result;\n        }\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during conversion.';\n        console.error('[convertExcelToDat] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Conversion failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function overwriteDatFile(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const processedDataString = formData.get('processedData') as string | null;\n    const nonCreditableTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for overwrite.' };\n    }\n     const profile: TaxProfile = JSON.parse(profileString);\n\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n            return await generateSalesDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedDataString || nonCreditableTaxString === null) return { ...defaultErrorResult, error: 'Missing processed data for overwrite.' };\n            const processedData = JSON.parse(processedDataString);\n            const nonCreditableInputTax = parseFloat(nonCreditableTaxString);\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, true);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n             return await generate1601EQDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!file || !schedule) return { ...defaultErrorResult, error: 'Missing file or schedule for SAWT overwrite.' };\n            return await validateAndProcessSAWT(formData, true);\n        }\n\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported for overwrite.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Overwrite failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number,\n    folderId: string,\n    overwrite: boolean = false\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    const reportTypeShort = \"Purchases\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName, datFile: null,\n                datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null,\n                totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null,\n                totalOtherGoods: null, totalInputTax: null,\n                totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n                processedData: null\n            };\n        }\n    }\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:generatePurchasesDatFile] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:generatePurchasesDatFile] Background upload failed for ${datFileName}:`, err);\n    });\n\n    return { \n        success: true, datContent, fileName: datFileName, datFile: null,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(formData: FormData): Promise<DatFileResult> {\n    const processedDataString = formData.get('processedData') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const nonCreditableInputTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    if (!processedDataString || !profileString || !month || !year || nonCreditableInputTaxString === null || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for purchase file creation.' };\n    }\n    \n    try {\n        const processedData = JSON.parse(processedDataString);\n        const profile: TaxProfile = JSON.parse(profileString);\n        const nonCreditableInputTax = parseFloat(nonCreditableInputTaxString);\n\n        return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, false);\n\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during DAT file creation.';\n        console.error('[createPurchasesDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Creation failed: ${errorMessage}` };\n    }\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  folderIds: z.array(z.string()).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, folderIds: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const { files, folderIds } = await listDatFiles(folderId);\n        return { success: true, files, folderIds, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, folderIds: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, content: null, error: 'File not found.' };\n        }\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function deleteDatFile(fileId: string): Promise<SimpleResult> {\n    try {\n        if (!fileId) {\n            return { success: false, error: 'File ID is required.' };\n        }\n        await deleteFileFromDrive(fileId);\n        return { success: true, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, error: 'File not found.' };\n        }\n        console.error(`[deleteDatFile] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, error: `Failed to delete file: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(formData: FormData, overwrite: boolean = false): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const schedule = formData.get('schedule') as string;\n    const profileString = formData.get('profile') as string;\n    const month = formData.get('month') as string;\n    const year = formData.get('year') as string;\n    const folderId = formData.get('folderId') as string;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const profile: TaxProfile = JSON.parse(profileString);\n\n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    const reportTypeShort = `SAWT_${schedule}`;\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                ...defaultErrorResult,\n                success: false,\n                fileExists: true,\n                fileName: datFileName,\n            };\n        }\n    }\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:validateAndProcessSAWT] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:validateAndProcessSAWT] Background upload failed for ${datFileName}:`, err);\n    });\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        datFile: null,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nconst PageTokenResultSchema = z.object({\n  success: z.boolean(),\n  token: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype PageTokenResult = z.infer<typeof PageTokenResultSchema>;\n\nexport async function getInitialPageToken(): Promise<PageTokenResult> {\n    try {\n        const token = await getInitialPageTokenForDrive();\n        return { success: true, token, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, token: null, error: `Failed to get initial page token: ${errorMessage}` };\n    }\n}\n\nconst ChangesResultSchema = z.object({\n  success: z.boolean(),\n  hasChanges: z.boolean(),\n  newToken: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype ChangesResult = z.infer<typeof ChangesResultSchema>;\n\nexport async function checkForDatFileChanges(allFolderIds: string[], pageToken: string): Promise<ChangesResult> {\n    if (!allFolderIds || allFolderIds.length === 0 || !pageToken) {\n        return { success: false, hasChanges: false, newToken: null, error: 'Folder IDs and page token are required.' };\n    }\n    try {\n        const { hasChanges, newPageToken } = await listChangesSincePageToken(allFolderIds, pageToken);\n        return { success: true, hasChanges, newToken: newPageToken, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, hasChanges: false, newToken: pageToken, error: `Failed to check for changes: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAkKsB,mBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 430, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAEA;AAEA;AACA;AASA;AACA;AAfA;;;;;;;AAiBA,MAAM,OAAO,8JAAA,CAAA,eAAY;AASzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,gBAAmB,AAAD,EACzC,CAAC;AAGH,MAAM,YAAY,CAGhB,EACA,GAAG,OACkC;IACrC,qBACE,8OAAC,iBAAiB,QAAQ;QAAC,OAAO;YAAE,MAAM,MAAM,IAAI;QAAC;kBACnD,cAAA,8OAAC,8JAAA,CAAA,aAAU;YAAE,GAAG,KAAK;;;;;;;;;;;AAG3B;AAEA,MAAM,eAAe;IACnB,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE;IACtC,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAAE;IACrC,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,iBAAc,AAAD;IAElD,MAAM,aAAa,cAAc,aAAa,IAAI,EAAE;IAEpD,IAAI,CAAC,cAAc;QACjB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,OAAO;QACL;QACA,MAAM,aAAa,IAAI;QACvB,YAAY,GAAG,GAAG,UAAU,CAAC;QAC7B,mBAAmB,GAAG,GAAG,sBAAsB,CAAC;QAChD,eAAe,GAAG,GAAG,kBAAkB,CAAC;QACxC,GAAG,UAAU;IACf;AACF;AAMA,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,gBAAmB,AAAD,EACxC,CAAC;AAGH,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,MAAM,KAAK,CAAA,GAAA,qMAAA,CAAA,QAAW,AAAD;IAErB,qBACE,8OAAC,gBAAgB,QAAQ;QAAC,OAAO;YAAE;QAAG;kBACpC,cAAA,8OAAC;YAAI,KAAK;YAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,aAAa;YAAa,GAAG,KAAK;;;;;;;;;;;AAGrE;AACA,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG;IAE9B,qBACE,8OAAC,iIAAA,CAAA,QAAK;QACJ,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,SAAS,oBAAoB;QAC3C,SAAS;QACR,GAAG,KAAK;;;;;;AAGf;AACA,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,GAAG,OAAO,EAAE;IACf,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,iBAAiB,EAAE,aAAa,EAAE,GAAG;IAEhE,qBACE,8OAAC,gKAAA,CAAA,OAAI;QACH,KAAK;QACL,IAAI;QACJ,oBACE,CAAC,QACG,GAAG,mBAAmB,GACtB,GAAG,kBAAkB,CAAC,EAAE,eAAe;QAE7C,gBAAc,CAAC,CAAC;QACf,GAAG,KAAK;;;;;;AAGf;AACA,YAAY,WAAW,GAAG;AAE1B,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,MAAM,EAAE,iBAAiB,EAAE,GAAG;IAE9B,qBACE,8OAAC;QACC,KAAK;QACL,IAAI;QACJ,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AACA,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE;IACpC,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG;IACjC,MAAM,OAAO,QAAQ,OAAO,OAAO,WAAW,MAAM;IAEpD,IAAI,CAAC,MAAM;QACT,OAAO;IACT;IAEA,qBACE,8OAAC;QACC,KAAK;QACL,IAAI;QACJ,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,wCAAwC;QACrD,GAAG,KAAK;kBAER;;;;;;AAGP;AACA,YAAY,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 583, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/schemas.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nconst alphanumericWithSpaces = (name: string, length: number, required = true) => {\n  const schema = z.string()\n   .max(length, `${name} must be ${length} characters or less.`)\n   .regex(/^[a-zA-Z0-9\\s]*$/, `${name} must only contain letters, numbers, and spaces.`);\n  \n  if (required) {\n    return schema.min(1, `${name} is required.`);\n  }\n  return schema.optional().or(z.literal(''));\n};\n\nexport const TaxProfileSchema = z.object({\n  tpTIN: z.string().regex(/^[0-9]{9}$/, 'TIN must be 9 digits.'),\n  branchCode: z.string().regex(/^[0-9]{4}$/, 'Branch code must be 4 digits.'),\n  rdoCode: z.string().min(1, 'RDO Code is required.'),\n  entityType: z.string(),\n  cycleType: z.string(),\n  monthSelect: z.string().min(1, 'Month is required.'),\n  companyName: alphanumericWithSpaces('Company Name', 50, false),\n  lastName: alphanumericWithSpaces('Last Name', 30, false),\n  firstName: alphanumericWithSpaces('First Name', 30, false),\n  middleName: alphanumericWithSpaces('Middle Name', 30, false),\n  tradeName: alphanumericWithSpaces('Trade Name', 50),\n  subStreet: z.string().max(30, 'Unit/Floor/Substreet must be 30 characters or less.').optional().or(z.literal('')),\n  street: z.string().max(30, 'Street must be 30 characters or less.').min(1, 'Street is required.'),\n  barangay: z.string().max(30, 'Barangay must be 30 characters or less.').min(1, 'Barangay is required.'),\n  cityMunicipality: z.string().max(30, 'City/Municipality must be 30 characters or less.').min(1, 'City/Municipality is required.'),\n  province: z.string().max(30, 'Province must be 30 characters or less.').min(1, 'Province is required.'),\n  zipCode: z.string().regex(/^[0-9]{4}$/, 'Zip code must be 4 digits.'),\n}).passthrough().refine(data => {\n    if (data.entityType === 'Individual') {\n        return !!data.lastName && !!data.firstName && !!data.middleName;\n    }\n    return true;\n}, {\n    message: \"First, Middle, and Last name are required for individuals.\",\n    path: [\"lastName\"], \n}).refine(data => {\n    if (data.entityType === 'Non-Individual') {\n        return !!data.companyName;\n    }\n    return true;\n}, {\n    message: \"Company name is required for non-individuals.\",\n    path: [\"companyName\"],\n});\n\n\nexport type TaxProfile = z.infer<typeof TaxProfileSchema>;\n\n\nexport const MutationResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    data: TaxProfileSchema.nullable(),\n});\n\nexport const DatFileSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  path: z.string(),\n  modifiedTime: z.string(),\n});\nexport type DatFile = z.infer<typeof DatFileSchema>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/radio-group.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC,0KAAA,CAAA,OAAwB;QACvB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;QAC3B,GAAG,KAAK;QACT,KAAK;;;;;;AAGX;AACA,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4OACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,YAA6B;YAAC,WAAU;sBACvC,cAAA,8OAAC,sMAAA,CAAA,SAAM;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI1B;AACA,eAAe,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 713, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 905, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,mKAAA,CAAA,OAAqB;AAErC,MAAM,iBAAiB,mKAAA,CAAA,UAAwB;AAE/C,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC,mKAAA,CAAA,SAAuB;kBACtB,cAAA,8OAAC,mKAAA,CAAA,UAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,mKAAA,CAAA,UAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 946, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/command.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1099, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/profile-form.tsx"],"sourcesContent":["\n'use client';\n\nimport { useTransition, useEffect, useState } from 'react';\nimport { useForm, type SubmitHandler } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { Check, ChevronsUpDown, Loader2 } from 'lucide-react';\nimport { addTaxProfile, updateTaxProfile } from '@/lib/actions';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport type { TaxProfile } from '@/lib/schemas';\nimport { TaxProfileSchema } from '@/lib/schemas';\nimport { RadioGroup, RadioGroupItem } from './ui/radio-group';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Popover, PopoverContent, PopoverTrigger } from './ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from './ui/command';\nimport { cn } from '@/lib/utils';\n\n\ninterface ProfileFormProps {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  profile: TaxProfile | null;\n  onSuccess: (profile: TaxProfile, isNew: boolean) => void;\n}\n\nconst months = [\n    { name: \"January\", value: \"01\" },\n    { name: \"February\", value: \"02\" },\n    { name: \"March\", value: \"03\" },\n    { name: \"April\", value: \"04\" },\n    { name: \"May\", value: \"05\" },\n    { name: \"June\", value: \"06\" },\n    { name: \"July\", value: \"07\" },\n    { name: \"August\", value: \"08\" },\n    { name: \"September\", value: \"09\" },\n    { name: \"October\", value: \"10\" },\n    { name: \"November\", value: \"11\" },\n    { name: \"December\", value: \"12\" }\n];\n\nconst rdoCodes = [\n    '001', '002', '003', '004', '005', '006', '007', '008', '009', '010',\n    '011', '012', '013', '014', '015', '016', '17A', '17B', '018', '019',\n    '020', '21A', '21B', '022', '23A', '23B', '024', '25A', '25B', '026',\n    '027', '028', '029', '030', '031', '032', '033', '034', '035', '036',\n    '037', '038', '039', '040', '041', '042', '043', '43A', '43B', '044',\n    '045', '046', '047', '048', '049', '050', '051', '052', '53A', '53B',\n    '54A', '54B', '055', '056', '057', '058', '059', '060', '061', '062',\n    '063', '064', '065', '066', '067', '068', '069', '070', '071', '072',\n    '073', '074', '075', '076', '077', '078', '079', '080', '081', '082',\n    '083', '084', '085', '086', '087', '088', '089', '090', '091', '092',\n    '93A', '93B', '094', '095', '096', '097', '098', '099', '100', '101',\n    '102', '103', '104', '105', '106', '107', '108', '109', '110', '111',\n    '112', '113', '114', '115', '116', '117', '118', '119', '120', '121',\n    '122', '123', '124', '125', '126', '127', '132'\n];\n\nconst defaultValues: TaxProfile = {\n    tpTIN: '',\n    branchCode: '0000',\n    rdoCode: '',\n    entityType: 'Individual',\n    cycleType: 'calendar',\n    monthSelect: '12',\n    companyName: '',\n    lastName: '',\n    firstName: '',\n    middleName: '',\n    tradeName: '',\n    subStreet: '',\n    street: '',\n    barangay: '',\n    cityMunicipality: '',\n    province: '',\n    zipCode: '',\n};\n\nexport function ProfileForm({ isOpen, setIsOpen, profile, onSuccess }: ProfileFormProps) {\n  const { toast } = useToast();\n  const [isPending, startTransition] = useTransition();\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  const form = useForm<TaxProfile>({\n    resolver: zodResolver(TaxProfileSchema),\n    defaultValues: profile || defaultValues,\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n        form.reset(profile || defaultValues);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [profile, isOpen]);\n\n  const entityType = form.watch('entityType');\n  const cycleType = form.watch('cycleType');\n\n  useEffect(() => {\n    if (cycleType === 'calendar') {\n        form.setValue('monthSelect', '12');\n    }\n  }, [cycleType, form]);\n\n  const onSubmit: SubmitHandler<TaxProfile> = (data) => {\n    startTransition(async () => {\n        const databaseId = localStorage.getItem('databaseId');\n        if (!databaseId) {\n            toast({ title: 'Error', description: 'User session not found. Please log in again.', variant: 'destructive' });\n            return;\n        }\n        \n        const isNew = !profile;\n        const result = isNew\n            ? await addTaxProfile(data, databaseId)\n            : await updateTaxProfile(data, databaseId);\n        \n        if (result.success && result.data) {\n            toast({\n                title: isNew ? 'Profile Created!' : 'Profile Updated!',\n                description: `Profile for ${data.entityType === 'Individual' ? `${data.firstName} ${data.lastName}` : data.companyName} has been saved.`,\n            });\n            onSuccess(result.data, isNew);\n            setIsOpen(false);\n        } else {\n            toast({\n                title: 'Operation Failed',\n                description: result.error,\n                variant: 'destructive',\n            });\n        }\n    });\n  };\n  \n  const inputStyles = \"bg-slate-100\";\n  const sanitizeAlphanumeric = (value: string) => value.replace(/[^a-zA-Z0-9\\s]/g, '');\n  const requiredMark = <span className=\"text-destructive\">*</span>;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogContent className=\"sm:max-w-[800px] bg-white text-black\">\n        <DialogHeader>\n          <DialogTitle className=\"text-black\">{profile ? 'Edit' : 'Create'} Tax Profile</DialogTitle>\n          <DialogDescription className=\"text-slate-600\">\n            Fill in the details below to {profile ? 'update the' : 'create a new'} tax profile. Click save when you're done.\n          </DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"max-h-[60vh] overflow-y-auto pr-4 pl-1 space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"entityType\"\n                render={({ field }) => (\n                  <FormItem className=\"space-y-3\">\n                    <FormLabel className=\"text-black\">Entity Type {requiredMark}</FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        className=\"flex space-x-4\"\n                      >\n                        <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                          <FormControl>\n                            <RadioGroupItem value=\"Individual\" id=\"individual\" />\n                          </FormControl>\n                          <FormLabel htmlFor=\"individual\" className=\"font-normal text-black\">Individual</FormLabel>\n                        </FormItem>\n                        <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                          <FormControl>\n                            <RadioGroupItem value=\"Non-Individual\" id=\"non-individual\"/>\n                          </FormControl>\n                          <FormLabel htmlFor=\"non-individual\" className=\"font-normal text-black\">Non-Individual</FormLabel>\n                        </FormItem>\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                 <FormField control={form.control} name=\"tpTIN\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">Taxpayer Identification Number {requiredMark}</FormLabel>\n                      <FormControl><Input placeholder=\"123456789\" {...field} className={inputStyles} readOnly={!!profile} /></FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n                 <FormField control={form.control} name=\"branchCode\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">Branch Code {requiredMark}</FormLabel>\n                      <FormControl><Input placeholder=\"0000\" {...field} className={inputStyles} /></FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n                 <FormField control={form.control} name=\"rdoCode\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">RDO Code {requiredMark}</FormLabel>\n                      <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>\n                        <PopoverTrigger asChild>\n                           <FormControl>\n                            <Button\n                              variant=\"outline\"\n                              role=\"combobox\"\n                              className={cn(\"w-full justify-between\", !field.value && \"text-muted-foreground\", inputStyles)}\n                            >\n                              {field.value\n                                ? rdoCodes.find(\n                                    (code) => code === field.value\n                                  )\n                                : \"Select an RDO code\"}\n                              <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                            </Button>\n                          </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-[200px] p-0\">\n                          <Command>\n                            <CommandInput placeholder=\"Search RDO code...\" />\n                            <CommandList>\n                              <CommandEmpty>No RDO code found.</CommandEmpty>\n                              <CommandGroup>\n                                {rdoCodes.map((code) => (\n                                  <CommandItem\n                                    value={code}\n                                    key={code}\n                                    onSelect={() => {\n                                      form.setValue(\"rdoCode\", code)\n                                      setPopoverOpen(false)\n                                    }}\n                                  >\n                                    <Check\n                                      className={cn(\n                                        \"mr-2 h-4 w-4\",\n                                        code === field.value\n                                          ? \"opacity-100\"\n                                          : \"opacity-0\"\n                                      )}\n                                    />\n                                    {code}\n                                  </CommandItem>\n                                ))}\n                              </CommandGroup>\n                            </CommandList>\n                          </Command>\n                        </PopoverContent>\n                      </Popover>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n              </div>\n\n              {entityType === 'Individual' ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField control={form.control} name=\"firstName\" render={({ field }) => (\n                    <FormItem><FormLabel className=\"text-black\">First Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                  )} />\n                  <FormField control={form.control} name=\"middleName\" render={({ field }) => (\n                    <FormItem><FormLabel className=\"text-black\">Middle Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                  )} />\n                  <FormField control={form.control} name=\"lastName\" render={({ field }) => (\n                    <FormItem><FormLabel className=\"text-black\">Last Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                  )} />\n                </div>\n              ) : (\n                <FormField control={form.control} name=\"companyName\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Company Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n              )}\n              \n              <FormField control={form.control} name=\"tradeName\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Trade Name {requiredMark}</FormLabel><FormControl><Input {...field} onChange={(e) => field.onChange(sanitizeAlphanumeric(e.target.value))} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n              )} />\n              \n              <h3 className=\"text-lg font-medium pt-4 text-black\">Registered Address</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField control={form.control} name=\"subStreet\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Unit/Floor/Substreet</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"street\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Street {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"barangay\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Barangay {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField control={form.control} name=\"cityMunicipality\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">City/Municipality {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"province\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Province {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"zipCode\" render={({ field }) => (\n                  <FormItem><FormLabel className=\"text-black\">Zip Code {requiredMark}</FormLabel><FormControl><Input {...field} className={inputStyles} /></FormControl><FormMessage /></FormItem>\n                )} />\n              </div>\n              \n              <h3 className=\"text-lg font-medium pt-4 text-black\">Taxpayer Type</h3>\n               <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField control={form.control} name=\"cycleType\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">Cycle Type {requiredMark}</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl><SelectTrigger className={inputStyles}><SelectValue placeholder=\"Select a cycle type\" /></SelectTrigger></FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"calendar\">Calendar</SelectItem>\n                            <SelectItem value=\"fiscal\">Fiscal</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n                  <FormField control={form.control} name=\"monthSelect\" render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-black\">Fiscal Year End Month {requiredMark}</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value} disabled={cycleType === 'calendar'}>\n                          <FormControl><SelectTrigger className={inputStyles}><SelectValue placeholder=\"Select a month\" /></SelectTrigger></FormControl>\n                          <SelectContent>\n                            {months.map(month => <SelectItem key={month.name} value={month.value}>{month.name}</SelectItem>)}\n                          </SelectContent>\n                        </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )} />\n              </div>\n\n            </div>\n            <DialogFooter className=\"pt-4\">\n              <DialogClose asChild>\n                <Button type=\"button\" variant=\"outline\">Cancel</Button>\n              </DialogClose>\n              <Button type=\"submit\" disabled={isPending}>\n                {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                {profile ? 'Save Changes' : 'Create Profile'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2616, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/tax-profiles-skeleton.tsx"],"sourcesContent":["\n'use client';\n\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nexport function TaxProfilesSkeleton() {\n  return (\n    <div className=\"space-y-2\">\n      <Skeleton className=\"h-10 w-full\" />\n      <Skeleton className=\"h-10 w-24\" />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAFA;;;AAKO,SAAS;IACd,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,oIAAA,CAAA,WAAQ;gBAAC,WAAU;;;;;;0BACpB,8OAAC,oIAAA,CAAA,WAAQ;gBAAC,WAAU;;;;;;;;;;;;AAG1B","debugId":null}},
    {"offset": {"line": 2655, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2782, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/delete-confirmation-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { Loader2 } from 'lucide-react';\n\ninterface DeleteConfirmationDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirm: () => void;\n  isDeleting: boolean;\n  itemName?: string | null;\n  itemType?: string;\n}\n\nexport function DeleteConfirmationDialog({\n  isOpen,\n  onOpenChange,\n  onConfirm,\n  isDeleting,\n  itemName,\n  itemType = 'item'\n}: DeleteConfirmationDialogProps) {\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete the {itemType}\n            {itemName && <> for <span className=\"font-semibold\">{itemName}</span></>}\n            .\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction asChild>\n            <Button\n              onClick={onConfirm}\n              disabled={isDeleting}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              {isDeleting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Delete\n            </Button>\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAUA;AACA;AAbA;;;;;AAwBO,SAAS,yBAAyB,EACvC,MAAM,EACN,YAAY,EACZ,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,MAAM,EACa;IAC9B,qBACE,8OAAC,2IAAA,CAAA,cAAW;QAAC,MAAM;QAAQ,cAAc;kBACvC,cAAA,8OAAC,2IAAA,CAAA,qBAAkB;;8BACjB,8OAAC,2IAAA,CAAA,oBAAiB;;sCAChB,8OAAC,2IAAA,CAAA,mBAAgB;sCAAC;;;;;;sCAClB,8OAAC,2IAAA,CAAA,yBAAsB;;gCAAC;gCAC0C;gCAC/D,0BAAY;;wCAAE;sDAAK,8OAAC;4CAAK,WAAU;sDAAiB;;;;;;;;gCAAoB;;;;;;;;;;;;;8BAI7E,8OAAC,2IAAA,CAAA,oBAAiB;;sCAChB,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,UAAU;sCAAY;;;;;;sCACzC,8OAAC,2IAAA,CAAA,oBAAiB;4BAAC,OAAO;sCACxB,cAAA,8OAAC,kIAAA,CAAA,SAAM;gCACL,SAAS;gCACT,UAAU;gCACV,WAAU;;oCAET,4BAAc,8OAAC,iNAAA,CAAA,UAAO;wCAAC,WAAU;;;;;;oCAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ/E","debugId":null}},
    {"offset": {"line": 2899, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { excelErrorDetection } from '@/ai/flows/excel-error-detection';\nimport type { ExcelErrorDetectionOutput } from '@/ai/schemas';\nimport { ExcelErrorDetectionOutputSchema } from '@/ai/schemas';\nimport { z } from 'zod';\nimport { appendUserToSheet, getAllUsers, getAllHeaderDataFromSheet, appendHeaderDataToSheet, updateHeaderDataInSheet, type SignupData, type LoginData, deleteHeaderDataRowInSheet, updateUserFolderId } from './googlesheets';\nimport type { TaxProfile, DatFile } from './schemas';\nimport { TaxProfileSchema, MutationResultSchema, DatFileSchema } from './schemas';\nimport * as xlsx from 'xlsx';\nimport { uploadFileToDrive, checkFileExists, createFolderInDrive, listDatFiles, downloadFileFromDrive, deleteFileFromDrive, getInitialPageTokenForDrive, listChangesSincePageToken } from './drive';\nimport { atcWE, atcExempt, atcWG } from './schedules';\n\nconst AnalyzeFileResultSchema = z.object({\n  success: z.boolean(),\n  data: ExcelErrorDetectionOutputSchema.nullable(),\n  error: z.string().nullable(),\n});\n\ntype AnalyzeFileResult = z.infer<typeof AnalyzeFileResultSchema>;\n\nexport async function analyzeExcelFile(\n  formData: FormData\n): Promise<AnalyzeFileResult> {\n  const file = formData.get('file') as File | null;\n\n  if (!file) {\n    return { success: false, data: null, error: 'No file uploaded.' };\n  }\n\n  // Check file type\n  if (file.type !== 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' && file.type !== 'application/vnd.ms-excel') {\n    return { success: false, data: null, error: 'Invalid file type. Please upload an Excel file.' };\n  }\n  \n  try {\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    const dataUri = `data:${file.type};base64,${buffer.toString('base64')}`;\n\n    const result = await excelErrorDetection({ excelDataUri: dataUri });\n\n    return { success: true, data: result, error: null };\n  } catch (e) {\n    console.error(e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to analyze file: ${errorMessage}` };\n  }\n}\n\nconst AuthResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n    user: z.object({\n        userName: z.string(),\n        databaseId: z.string().optional(),\n        folderId: z.string().optional(),\n    }).nullable(),\n});\n\ntype AuthResult = z.infer<typeof AuthResultSchema>;\n\nexport async function signUpUser(userData: SignupData): Promise<AuthResult> {\n  try {\n    const folderId = await createFolderInDrive(`DATGenie_${userData.userName}`);\n    await appendUserToSheet({ ...userData, folderId });\n    return { success: true, error: null, user: null };\n  } catch (e) {\n    console.error('Error signing up user:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to sign up: ${errorMessage}`, user: null };\n  }\n}\n\nexport async function loginUser(credentials: LoginData): Promise<AuthResult> {\n    try {\n        const users = await getAllUsers();\n        const user = users.find(u => u.userName === credentials.userName && u.pwd === credentials.password);\n\n        if (user) {\n            let folderId = user.folderId;\n            if (!folderId) {\n                console.log(`User ${user.userName} does not have a folderId. Creating one now.`);\n                folderId = await createFolderInDrive(`DATGenie_${user.userName}`);\n                await updateUserFolderId(user.userName, folderId);\n                console.log(`Successfully created and assigned folderId ${folderId} to user ${user.userName}.`);\n            }\n            return { success: true, error: null, user: { userName: user.userName, databaseId: user.databaseId, folderId: folderId } };\n        } else {\n            return { success: false, error: 'Invalid username or password.', user: null };\n        }\n    } catch (e) {\n        console.error('Error logging in user:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to login: ${errorMessage}`, user: null };\n    }\n}\n\nconst TaxProfileResultSchema = z.object({\n  success: z.boolean(),\n  data: z.array(TaxProfileSchema).nullable(),\n  error: z.string().nullable(),\n});\ntype TaxProfileResult = z.infer<typeof TaxProfileResultSchema>;\n\nexport async function getUserHeaderData(databaseId: string): Promise<TaxProfileResult> {\n  try {\n    if (!databaseId) {\n      return { success: false, data: null, error: 'Database ID is required.' };\n    }\n    const headerData = await getAllHeaderDataFromSheet(databaseId);\n    return { success: true, data: headerData, error: null };\n  } catch (error) {\n    console.error('Error fetching header data:', error);\n    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';\n    return { success: false, data: null, error: `Failed to fetch header data: ${errorMessage}` };\n  }\n}\n\n\ntype MutationResult = z.infer<typeof MutationResultSchema>;\n\nfunction transformToUppercase(data: TaxProfile): TaxProfile {\n  const uppercasedData: { [key: string]: any } = {};\n  for (const key in data) {\n    const value = data[key as keyof TaxProfile];\n    if (typeof value === 'string' && key !== 'entityType' && key !== 'cycleType' && key !== 'monthSelect' && key !== 'rdoCode') {\n      uppercasedData[key] = value.toUpperCase();\n    } else {\n      uppercasedData[key] = value;\n    }\n  }\n  return uppercasedData as TaxProfile;\n}\n\nexport async function addTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n\n    const existingProfiles = await getAllHeaderDataFromSheet(databaseId);\n    const tinExists = existingProfiles.some(p => p.tpTIN === validatedData.tpTIN);\n\n    if (tinExists) {\n        return { \n            success: false, \n            error: 'This TIN already has a profile. Please check your data or refresh the page.', \n            data: null \n        };\n    }\n\n    const uppercasedData = transformToUppercase(validatedData);\n    await appendHeaderDataToSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error adding tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to add profile: ${errorMessage}`, data: null };\n  }\n}\n\n\nexport async function updateTaxProfile(profileData: TaxProfile, databaseId: string): Promise<MutationResult> {\n  try {\n    const validatedData = TaxProfileSchema.parse(profileData);\n    const uppercasedData = transformToUppercase(validatedData);\n    await updateHeaderDataInSheet(uppercasedData, databaseId);\n    return { success: true, error: null, data: uppercasedData };\n  } catch (e) {\n    console.error('Error updating tax profile:', e);\n    const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n    return { success: false, error: `Failed to update profile: ${errorMessage}`, data: null };\n  }\n}\n\nconst SimpleResultSchema = z.object({\n    success: z.boolean(),\n    error: z.string().nullable(),\n});\ntype SimpleResult = z.infer<typeof SimpleResultSchema>;\n\nexport async function deleteTaxProfile(tpTIN: string, databaseId: string): Promise<SimpleResult> {\n    try {\n        await deleteHeaderDataRowInSheet(tpTIN, databaseId);\n        return { success: true, error: null };\n    } catch (e) {\n        console.error('Error deleting tax profile:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, error: `Failed to delete profile: ${errorMessage}` };\n    }\n}\n\nconst DatFileResultSchema = z.object({\n    success: z.boolean(),\n    datContent: z.string().nullable(),\n    fileName: z.string().nullable(),\n    error: z.string().nullable(),\n    errors: z.array(z.string()).nullable(),\n    fileExists: z.boolean().optional(),\n    datFile: DatFileSchema.nullable(),\n    // Sales Totals\n    totalExempt: z.number().nullable(),\n    totalZeroRated: z.number().nullable(),\n    totalTaxableSales: z.number().nullable(),\n    totalOutputTax: z.number().nullable(),\n    // Purchase Totals\n    totalServices: z.number().nullable(),\n    totalCapitalGoods: z.number().nullable(),\n    totalOtherGoods: z.number().nullable(),\n    totalInputTax: z.number().nullable(),\n    // 1601-EQ and SAWT Totals\n    totalTaxableIncomePayment: z.number().nullable(),\n    totalExemptIncomePayment: z.number().nullable(),\n    totalWithholdingTax: z.number().nullable(),\n    processedData: z.any().nullable(),\n});\ntype DatFileResult = z.infer<typeof DatFileResultSchema>;\n\n\nfunction sanitizeAndValidateString(input: any, fieldName: string, maxLength: number, rowNumber: number, isRequired: boolean = false): { value: string, error: string | null } {\n    let value = (input === null || input === undefined) ? '' : String(input).trim();\n    \n    if (!value) {\n        if (isRequired) {\n            return { value: '', error: `Row ${rowNumber}: ${fieldName} is missing.` };\n        }\n        return { value: '', error: null };\n    }\n\n    let processedString = value\n        .toUpperCase()\n        .replace(/&/g, 'AND')\n        .replace(/Ñ/g, 'N')\n        .replace(/\\s\\s+/g, ' ')\n        .trim()\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s\\s+/g, ' ')\n        .trim();\n\n    if (processedString.length > maxLength) {\n        return { value: processedString, error: `Row ${rowNumber}: ${fieldName} must be ${maxLength} characters or less.` };\n    }\n\n    return { value: processedString, error: null };\n}\n\nfunction sanitizeAndValidateNumber(input: any, fieldName: string, rowNumber: number): { value: string, error: string | null } {\n    if (input === null || input === undefined || String(input).trim() === '') {\n        return { value: '0', error: null };\n    }\n    \n    const valueAsString = String(input).replace(/,/g, '');\n    const num = parseFloat(valueAsString);\n\n    if (isNaN(num)) {\n        return { value: String(input), error: `Row ${rowNumber}: ${fieldName} contains an invalid number.` };\n    }\n    \n    const roundedNum = Math.round(num * 100) / 100;\n    \n    if (roundedNum === 0) {\n        return { value: '0', error: null };\n    }\n\n    return { value: roundedNum.toFixed(2), error: null };\n}\n\nfunction getFormattedLastDay(year: number, month: number): string {\n    // Get the last day of the month. This correctly handles leap years.\n    const day = new Date(year, month, 0).getDate();\n    \n    const date = new Date(year, month - 1, day);\n    const mm = String(date.getMonth() + 1).padStart(2, '0');\n    const dd = String(date.getDate()).padStart(2, '0');\n    const yyyy = date.getFullYear();\n\n    return `${mm}/${dd}/${yyyy}`;\n}\n\nconst quoteIfNotEmpty = (value: string | undefined | null) => {\n  const str = String(value || '').trim();\n  return str ? `\"${str}\"` : '';\n};\n\nasync function processExcelFile(file: File, sheetName: string): Promise<{ data: any[][], validationErrors: string[] }> {\n    const bytes = await file.arrayBuffer();\n    const workbook = xlsx.read(bytes, { type: 'array' });\n\n    if (!workbook.SheetNames.includes(sheetName)) {\n        return { data: [], validationErrors: [`Sheet \"${sheetName}\" not found in the uploaded file.`] };\n    }\n\n    const worksheet = workbook.Sheets[sheetName];\n    const data: any[][] = xlsx.utils.sheet_to_json(worksheet, {\n        header: 1,\n        defval: '',\n        raw: false,\n    });\n\n    if (data.length <= 1) {\n        return { data: [], validationErrors: [] };\n    }\n\n    return { data: data.slice(1), validationErrors: [] };\n}\n\n\nasync function generateSalesDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin } = profile;\n    \n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_sales\");\n    if (fileErrors.length > 0) {\n        return { \n            success: false, \n            errors: fileErrors, \n            datContent: null, fileName: null, error: null, datFile: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n        if (processedRow.length > 0 && String(processedRow[0]).trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot make a sale to itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n        \n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n        \n        const numericFields = [\n            { name: 'Exempt Sales', index: 7 }, { name: 'Zero-Rated Sales', index: 8 },\n            { name: 'Taxable Sales', index: 9 }, { name: 'Output Tax', index: 10 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one sales amount (Exempt, Zero-Rated, or Taxable) must be greater than zero.`);\n        }\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return {\n            success: false, errors: validationErrors, error: \"Validation failed.\", datFile: null,\n            datContent: null, fileName: null,\n            totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n            totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n            totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n            processedData: null\n        };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n    \n    const datFileName = `${tin}S${month}${year}.DAT`;\n    const reportTypeShort = \"Sales\";\n    const drivePath = [tin, reportTypeShort, year];\n\n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName, datFile: null,\n                datContent: null, error: null, errors: null,\n                totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n                totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n                totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n                processedData: null,\n            };\n        }\n    }\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'S', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalTaxableSales = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalOutputTax = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const headerRow = ['H', 'S', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalTaxableSales.toFixed(2), totalOutputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:generateSalesDatFile] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:generateSalesDatFile] Background upload failed for ${datFileName}:`, err);\n    });\n            \n    return { \n        success: true, datContent, fileName: datFileName, datFile: null, // Return null for datFile initially\n        totalExempt, totalZeroRated, totalTaxableSales, totalOutputTax,\n        error: null, errors: null, totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nasync function generate1601EQDatFile(file: File, profile: TaxProfile, month: string, year: string, folderId: string, overwrite: boolean = false): Promise<DatFileResult> {\n    const { tpTIN: tin, branchCode } = profile;\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const { data: sched1DataRows, validationErrors: sched1FileErrors } = await processExcelFile(file, \"1601EQ_sched1\");\n    if (sched1FileErrors.length > 0) return { ...defaultErrorResult, errors: sched1FileErrors };\n\n    const { data: sched2DataRows, validationErrors: sched2FileErrors } = await processExcelFile(file, \"1601EQ_sched2\");\n    if (sched2FileErrors.length > 0) return { ...defaultErrorResult, errors: sched2FileErrors };\n\n    const sched1HasData = sched1DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n    const sched2HasData = sched2DataRows.some(row => row.some(cell => String(cell).trim() !== ''));\n\n    if (!sched1HasData && !sched2HasData) {\n        return { ...defaultErrorResult, errors: [\"No data found in Schedule 1 or Schedule 2 sheets.\"] };\n    }\n\n    const validationErrors: string[] = [];\n\n    // Process Schedule 1 (Taxable)\n    const processedSched1Data = sched1DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched1 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched1 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], `Sched1 ${field.name}`, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = atcWE.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Sched1 Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 1.`);\n                }\n            } else validationErrors.push(`Sched1 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    // Process Schedule 2 (Exempt)\n    const processedSched2Data = sched2DataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n\n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Sched2 Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n\n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], `Sched2 ${field.name}`, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const result = sanitizeAndValidateNumber(processedRow[7], `Sched2 Income Payment`, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[7] = result.value;\n\n            if (atc) {\n                const atcData = atcExempt.find(item => item.atc === atc);\n                if (!atcData) validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code '${atc}' is not valid for Schedule 2.`);\n            } else validationErrors.push(`Sched2 Row ${originalRowNumber}: ATC code is missing.`);\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) return { ...defaultErrorResult, errors: validationErrors };\n    \n    // All validations passed, now check for existing file\n    const datFileName = `${tin}${branchCode}${month.padStart(2, '0')}${year}1601EQ.DAT`;\n    const reportTypeShort = \"1601EQ\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                ...defaultErrorResult,\n                success: false,\n                fileExists: true,\n                fileName: datFileName,\n            };\n        }\n    }\n\n    processedSched1Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    processedSched2Data.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n    let datContentParts: string[] = [];\n    \n    // Header Row\n    const taxpayerName = profile.entityType === 'Individual'\n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const mainHeader = ['HQAP', 'H1601EQ', profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), reportingPeriod, profile.rdoCode].join(',');\n    datContentParts.push(mainHeader);\n\n    let totalTaxableIncomePayment = 0;\n    let totalWithholdingTax = 0;\n    let totalExemptIncomePayment = 0;\n\n    // Schedule 1 Content\n    if (processedSched1Data.length > 0) {\n        const detailRows1 = processedSched1Data.map((row, index) => ['D1', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7], row[8], row[9]].join(',')).join('\\n');\n        totalTaxableIncomePayment = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n        totalWithholdingTax = processedSched1Data.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n        const footerRow1 = ['C1', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalTaxableIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n        datContentParts.push(detailRows1, footerRow1);\n    }\n\n    // Schedule 2 Content\n    if (processedSched2Data.length > 0) {\n        const detailRows2 = processedSched2Data.map((row, index) => ['D2', '1601EQ', index + 1, row[0], row[1], quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), reportingPeriod, row[6], row[7]].join(',')).join('\\n');\n        totalExemptIncomePayment = processedSched2Data.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n        const footerRow2 = ['C2', '1601EQ', profile.tpTIN, profile.branchCode, reportingPeriod, totalExemptIncomePayment.toFixed(2)].join(',');\n        datContentParts.push(detailRows2, footerRow2);\n    }\n\n    const datContent = datContentParts.join('\\n');\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:generate1601EQDatFile] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:generate1601EQDatFile] Background upload failed for ${datFileName}:`, err);\n    });\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent,\n        fileName: datFileName,\n        datFile: null,\n        totalTaxableIncomePayment,\n        totalExemptIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nexport async function convertExcelToDat(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!file || !reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for conversion.' };\n    }\n\n    try {\n        const profile: TaxProfile = JSON.parse(profileString);\n        if (reportType === \"Summary of Sales (SLS)\") {\n            return await generateSalesDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            return await validateExcelForPurchases(formData);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n            return await generate1601EQDatFile(file, profile, month, year, folderId, false);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!schedule) {\n                return { ...defaultErrorResult, error: 'SAWT schedule is missing.' };\n            }\n            const result = await validateAndProcessSAWT(formData, false);\n            if (result.success) {\n                 return { ...result };\n            }\n            return result;\n        }\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during conversion.';\n        console.error('[convertExcelToDat] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Conversion failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function overwriteDatFile(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File | null;\n    const reportType = formData.get('reportType') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n    const processedDataString = formData.get('processedData') as string | null;\n    const nonCreditableTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const schedule = formData.get('schedule') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null,\n    };\n\n    if (!reportType || !month || !year || !profileString || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for overwrite.' };\n    }\n     const profile: TaxProfile = JSON.parse(profileString);\n\n    try {\n        if (reportType === \"Summary of Sales (SLS)\") {\n            if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n            return await generateSalesDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary of Purchases (SLP)\") {\n            if (!processedDataString || nonCreditableTaxString === null) return { ...defaultErrorResult, error: 'Missing processed data for overwrite.' };\n            const processedData = JSON.parse(processedDataString);\n            const nonCreditableInputTax = parseFloat(nonCreditableTaxString);\n            return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, true);\n        }\n        if (reportType === \"1601-EQ (Schedule 1 and 2)\") {\n             if (!file) return { ...defaultErrorResult, error: 'Missing file for overwrite.' };\n             return await generate1601EQDatFile(file, profile, month, year, folderId, true);\n        }\n        if (reportType === \"Summary Alphalist of Withholding Tax (SAWT)\") {\n            if (!file || !schedule) return { ...defaultErrorResult, error: 'Missing file or schedule for SAWT overwrite.' };\n            return await validateAndProcessSAWT(formData, true);\n        }\n\n        return { ...defaultErrorResult, error: `Report type \"${reportType}\" is not yet supported for overwrite.` };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during overwrite.';\n        console.error('[overwriteDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Overwrite failed: ${errorMessage}` };\n    }\n}\n\n\nexport async function validateExcelForPurchases(formData: FormData): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const profileString = formData.get('profile') as string;\n    const profile: TaxProfile = JSON.parse(profileString);\n    const { tpTIN: tin } = profile;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, \"vat_purchases\");\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    const validationErrors: string[] = [];\n    const processedData = dataRows.map((row, index) => {\n        const originalRowNumber = index + 2;\n        const processedRow = [...row];\n\n        if (String(processedRow[0] || '').trim()) {\n            const originalTin = String(processedRow[0]);\n            const sanitizedTin = originalTin.replace(/[^0-9]/g, '');\n            if (sanitizedTin.substring(0, 9) === tin) validationErrors.push(`Row ${originalRowNumber}: The TIN matches the selected profile's TIN. A company cannot have a purchase from itself.`);\n            if (sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be at least 9 digits.`);\n            processedRow[0] = sanitizedTin.substring(0, 9);\n        } else {\n            validationErrors.push(`Row ${originalRowNumber}: TIN is missing.`);\n        }\n\n        const nameFieldsInfo = [\n            { name: 'Registered Name', index: 1, maxLength: 50, required: true },\n            { name: 'Last Name', index: 2, maxLength: 30, required: false },\n            { name: 'First Name', index: 3, maxLength: 30, required: false },\n            { name: 'Middle Name', index: 4, maxLength: 30, required: false },\n            { name: 'Address 1', index: 5, maxLength: 30, required: true },\n            { name: 'Address 2', index: 6, maxLength: 30, required: true },\n        ];\n        nameFieldsInfo.forEach(field => {\n            const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        const hasFirstName = String(processedRow[3]).trim().length > 0;\n        const hasLastName = String(processedRow[2]).trim().length > 0;\n        const hasMiddleName = String(processedRow[4]).trim().length > 0;\n        if ((hasFirstName && !hasLastName) || (!hasFirstName && hasLastName)) validationErrors.push(`Row ${originalRowNumber}: First Name and Last Name must be provided together.`);\n        if (hasMiddleName && (!hasFirstName || !hasLastName)) validationErrors.push(`Row ${originalRowNumber}: If Middle Name is provided, First Name and Last Name are also required.`);\n\n        const numericFields = [\n            { name: 'Exempt Purchases', index: 7 }, { name: 'Zero-Rated Purchases', index: 8 },\n            { name: 'Purchases of Services', index: 9 }, { name: 'Purchases of Capital Goods', index: 10 },\n            { name: 'Purchases of Other Goods', index: 11 }, { name: 'Input Tax', index: 12 },\n        ];\n        numericFields.forEach(field => {\n            const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n            if (result.error) validationErrors.push(result.error);\n            processedRow[field.index] = result.value;\n        });\n\n        if (parseFloat(processedRow[7]) === 0 && parseFloat(processedRow[8]) === 0 && parseFloat(processedRow[9]) === 0 && parseFloat(processedRow[10]) === 0 && parseFloat(processedRow[11]) === 0) {\n            validationErrors.push(`Row ${originalRowNumber}: At least one purchase amount must be greater than zero.`);\n        }\n\n        return processedRow;\n    });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n    \n    processedData.sort((a, b) => String(a[1]).localeCompare(String(b[1])));\n\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n\n    return { ...defaultErrorResult, success: true, totalInputTax, processedData };\n}\n\nasync function generatePurchasesDatFile(\n    processedData: any[][],\n    profile: TaxProfile,\n    month: string,\n    year: string,\n    nonCreditableInputTax: number,\n    folderId: string,\n    overwrite: boolean = false\n): Promise<DatFileResult> {\n     const { tpTIN: tin } = profile;\n    const datFileName = `${tin}P${month}${year}.DAT`;\n    const reportTypeShort = \"Purchases\";\n    const drivePath = [tin, reportTypeShort, year];\n    \n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                success: false, fileExists: true, fileName: datFileName, datFile: null,\n                datContent: null, error: null, errors: null, totalExempt: null, totalZeroRated: null,\n                totalTaxableSales: null, totalOutputTax: null, totalServices: null, totalCapitalGoods: null,\n                totalOtherGoods: null, totalInputTax: null,\n                totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n                processedData: null\n            };\n        }\n    }\n\n    const lastDayDate = getFormattedLastDay(parseInt(year), parseInt(month));\n    const address1 = [profile.subStreet, profile.street, profile.barangay].filter(Boolean).join(' ');\n    const address2 = [profile.cityMunicipality, profile.province, profile.zipCode].filter(Boolean).join(' ');\n\n    const detailRows = processedData.map(row => ['D', 'P', quoteIfNotEmpty(row[0]), quoteIfNotEmpty(row[1]), quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]), quoteIfNotEmpty(row[6]), row[7], row[8], row[9], row[10], row[11], row[12], tin, lastDayDate].join(',')).join('\\n');\n    const totalExempt = processedData.reduce((acc, row) => acc + parseFloat(row[7]), 0);\n    const totalZeroRated = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalServices = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    const totalCapitalGoods = processedData.reduce((acc, row) => acc + parseFloat(row[10]), 0);\n    const totalOtherGoods = processedData.reduce((acc, row) => acc + parseFloat(row[11]), 0);\n    const totalInputTax = processedData.reduce((acc, row) => acc + parseFloat(row[12]), 0);\n    const creditableInputTax = totalInputTax - nonCreditableInputTax;\n\n    const headerRow = ['H', 'P', quoteIfNotEmpty(tin), quoteIfNotEmpty(profile.companyName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.middleName), quoteIfNotEmpty(profile.tradeName), quoteIfNotEmpty(address1), quoteIfNotEmpty(address2), totalExempt.toFixed(2), totalZeroRated.toFixed(2), totalServices.toFixed(2), totalCapitalGoods.toFixed(2), totalOtherGoods.toFixed(2), totalInputTax.toFixed(2), creditableInputTax.toFixed(2), nonCreditableInputTax.toFixed(2), profile.rdoCode, lastDayDate, profile.monthSelect].join(',');\n    const datContent = `${headerRow}\\n${detailRows}`;\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:generatePurchasesDatFile] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:generatePurchasesDatFile] Background upload failed for ${datFileName}:`, err);\n    });\n\n    return { \n        success: true, datContent, fileName: datFileName, datFile: null,\n        totalExempt, totalZeroRated,\n        totalServices, totalCapitalGoods, totalOtherGoods, totalInputTax,\n        error: null, errors: null, totalTaxableSales: null, totalOutputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n}\n\n\nexport async function createPurchasesDatFile(formData: FormData): Promise<DatFileResult> {\n    const processedDataString = formData.get('processedData') as string | null;\n    const profileString = formData.get('profile') as string | null;\n    const month = formData.get('month') as string | null;\n    const year = formData.get('year') as string | null;\n    const nonCreditableInputTaxString = formData.get('nonCreditableInputTax') as string | null;\n    const folderId = formData.get('folderId') as string | null;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    if (!processedDataString || !profileString || !month || !year || nonCreditableInputTaxString === null || !folderId) {\n        return { ...defaultErrorResult, error: 'Missing required parameters for purchase file creation.' };\n    }\n    \n    try {\n        const processedData = JSON.parse(processedDataString);\n        const profile: TaxProfile = JSON.parse(profileString);\n        const nonCreditableInputTax = parseFloat(nonCreditableInputTaxString);\n\n        return await generatePurchasesDatFile(processedData, profile, month, year, nonCreditableInputTax, folderId, false);\n\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred during DAT file creation.';\n        console.error('[createPurchasesDatFile] CRITICAL ERROR:', e);\n        return { ...defaultErrorResult, error: `Creation failed: ${errorMessage}` };\n    }\n}\n\n\nconst DatFileListingResultSchema = z.object({\n  success: z.boolean(),\n  files: z.array(DatFileSchema).nullable(),\n  folderIds: z.array(z.string()).nullable(),\n  error: z.string().nullable(),\n});\ntype DatFileListingResult = z.infer<typeof DatFileListingResultSchema>;\n\nexport async function getDatFiles(folderId: string): Promise<DatFileListingResult> {\n    if (!folderId) {\n        return { success: false, files: null, folderIds: null, error: 'User folder ID is missing.' };\n    }\n    try {\n        const { files, folderIds } = await listDatFiles(folderId);\n        return { success: true, files, folderIds, error: null };\n    } catch (e) {\n        console.error('[getDatFiles] CRITICAL ERROR:', e);\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, files: null, folderIds: null, error: `Failed to retrieve DAT files: ${errorMessage}` };\n    }\n}\n\nconst DatFileContentResultSchema = z.object({\n    success: z.boolean(),\n    content: z.string().nullable(),\n    error: z.string().nullable(),\n});\ntype DatFileContentResult = z.infer<typeof DatFileContentResultSchema>;\n\nexport async function getDatFileContent(fileId: string): Promise<DatFileContentResult> {\n    try {\n        if (!fileId) {\n            return { success: false, content: null, error: 'File ID is required.' };\n        }\n        const content = await downloadFileFromDrive(fileId);\n        return { success: true, content: content, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, content: null, error: 'File not found.' };\n        }\n        console.error(`[getDatFileContent] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, content: null, error: `Failed to retrieve file content: ${errorMessage}` };\n    }\n}\n\nexport async function deleteDatFile(fileId: string): Promise<SimpleResult> {\n    try {\n        if (!fileId) {\n            return { success: false, error: 'File ID is required.' };\n        }\n        await deleteFileFromDrive(fileId);\n        return { success: true, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        if (errorMessage.includes('File not found')) {\n            return { success: false, error: 'File not found.' };\n        }\n        console.error(`[deleteDatFile] CRITICAL ERROR for fileId ${fileId}:`, e);\n        return { success: false, error: `Failed to delete file: ${errorMessage}` };\n    }\n}\n\nexport async function validateAndProcessSAWT(formData: FormData, overwrite: boolean = false): Promise<DatFileResult> {\n    const file = formData.get('file') as File;\n    const schedule = formData.get('schedule') as string;\n    const profileString = formData.get('profile') as string;\n    const month = formData.get('month') as string;\n    const year = formData.get('year') as string;\n    const folderId = formData.get('folderId') as string;\n\n    const defaultErrorResult = {\n        success: false, datContent: null, fileName: null, errors: null, error: null, datFile: null,\n        totalExempt: null, totalZeroRated: null, totalTaxableSales: null, totalOutputTax: null,\n        totalServices: null, totalCapitalGoods: null, totalOtherGoods: null, totalInputTax: null,\n        totalTaxableIncomePayment: null, totalExemptIncomePayment: null, totalWithholdingTax: null,\n        processedData: null\n    };\n    \n    const profile: TaxProfile = JSON.parse(profileString);\n\n    const sheetName = `sawt_${schedule}`;\n    const { data: dataRows, validationErrors: fileErrors } = await processExcelFile(file, sheetName);\n    if (fileErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: fileErrors };\n    }\n\n    if (dataRows.length === 0) {\n        return { ...defaultErrorResult, success: false, errors: [`No data found in sheet \"${sheetName}\".`] };\n    }\n\n    const validationErrors: string[] = [];\n    const combinedATC = [...atcWE, ...atcWG];\n\n    const processedData = dataRows\n        .filter(row => row.some(cell => String(cell).trim() !== ''))\n        .map((row, index) => {\n            const originalRowNumber = index + 2;\n            const processedRow = [...row];\n            \n            if (String(processedRow[0] || '').trim()) {\n                const originalTin = String(processedRow[0]);\n                const sanitizedTin = originalTin.replace(/[^0-9]/g, '').substring(0, 9);\n                if (sanitizedTin.length > 0 && sanitizedTin.length < 9) validationErrors.push(`Row ${originalRowNumber}: TIN '${originalTin}' is too short. It must be 9 digits if provided.`);\n                processedRow[0] = sanitizedTin;\n            } else {\n                 processedRow[0] = '';\n            }\n            \n            let branchCode = String(processedRow[1] || '').replace(/[^0-9]/g, '');\n            processedRow[1] = branchCode ? branchCode.slice(-4).padStart(4, '0') : \"0000\";\n            \n            const nameFieldsInfo = [\n                { name: 'Registered Name', index: 2, maxLength: 50, required: true },\n                { name: 'Last Name', index: 3, maxLength: 30, required: false },\n                { name: 'First Name', index: 4, maxLength: 30, required: false },\n                { name: 'Middle Name', index: 5, maxLength: 30, required: false },\n            ];\n            nameFieldsInfo.forEach(field => {\n                const result = sanitizeAndValidateString(processedRow[field.index], field.name, field.maxLength, originalRowNumber, field.required);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            const atc = String(processedRow[6] || '').toUpperCase().replace(/[^A-Z0-9]/g, '');\n            processedRow[6] = atc;\n            \n            const numericFields = [{ name: 'Rate', index: 7 }, { name: 'Income Payment', index: 8 }, { name: 'Withholding Tax', index: 9 }];\n            numericFields.forEach(field => {\n                const result = sanitizeAndValidateNumber(processedRow[field.index], field.name, originalRowNumber);\n                if (result.error) validationErrors.push(result.error);\n                processedRow[field.index] = result.value;\n            });\n\n            if (atc) {\n                const atcData = combinedATC.find(item => item.atc === atc);\n                if (atcData) {\n                    if (parseFloat(processedRow[7]) !== atcData.rate) {\n                        validationErrors.push(`Row ${originalRowNumber}: Invalid rate for ATC ${atc}. Expected ${atcData.rate}%, but got ${parseFloat(processedRow[7])}%.`);\n                    }\n                } else {\n                    validationErrors.push(`Row ${originalRowNumber}: ATC code '${atc}' is not valid for SAWT.`);\n                }\n            } else {\n                validationErrors.push(`Row ${originalRowNumber}: ATC code is missing.`);\n            }\n            \n            return processedRow;\n        });\n\n    if (validationErrors.length > 0) {\n        return { ...defaultErrorResult, success: false, errors: validationErrors };\n    }\n\n    processedData.sort((a, b) => String(a[2]).localeCompare(String(b[2])));\n    \n    const datFileName = `${profile.tpTIN}${profile.branchCode}${month.padStart(2, '0')}${year}${schedule}.DAT`;\n    const reportTypeShort = `SAWT_${schedule}`;\n    const drivePath = [profile.tpTIN, reportTypeShort, year];\n\n    if (!overwrite) {\n        const fileExists = await checkFileExists(datFileName, folderId, drivePath);\n        if (fileExists) {\n            return {\n                ...defaultErrorResult,\n                success: false,\n                fileExists: true,\n                fileName: datFileName,\n            };\n        }\n    }\n\n    const reportingPeriod = `${month.padStart(2, '0')}/${year}`;\n\n    const taxpayerName = profile.entityType === 'Individual' \n        ? `${profile.lastName} ${profile.firstName} ${profile.middleName}`\n        : profile.companyName;\n\n    const header = ['HSAWT', `H${schedule}`, profile.tpTIN, profile.branchCode, quoteIfNotEmpty(taxpayerName), quoteIfNotEmpty(profile.firstName), quoteIfNotEmpty(profile.lastName), quoteIfNotEmpty(profile.middleName), reportingPeriod, profile.rdoCode].join(',');\n\n    const detailRows = processedData.map((row, index) => {\n        return [\n            'DSAWT', `D${schedule}`, index + 1, row[0], row[1],\n            quoteIfNotEmpty(row[2]), quoteIfNotEmpty(row[3]), quoteIfNotEmpty(row[4]), quoteIfNotEmpty(row[5]),\n            reportingPeriod, '', row[6], row[7], row[8], row[9]\n        ].join(',');\n    }).join('\\n');\n\n    const totalIncomePayment = processedData.reduce((acc, row) => acc + parseFloat(row[8]), 0);\n    const totalWithholdingTax = processedData.reduce((acc, row) => acc + parseFloat(row[9]), 0);\n    \n    const footer = ['CSAWT', `C${schedule}`, profile.tpTIN, profile.branchCode, reportingPeriod, totalIncomePayment.toFixed(2), totalWithholdingTax.toFixed(2)].join(',');\n\n    const datContent = [header, detailRows, footer].join('\\n');\n    \n    // Fire and forget\n    uploadFileToDrive(datFileName, datContent, folderId, drivePath, overwrite).then(uploadedFile => {\n        console.log(`[Action:validateAndProcessSAWT] Background upload finished for ${uploadedFile.name}`);\n    }).catch(err => {\n        console.error(`[Action:validateAndProcessSAWT] Background upload failed for ${datFileName}:`, err);\n    });\n\n    return {\n        ...defaultErrorResult,\n        success: true,\n        datContent: datContent,\n        fileName: datFileName,\n        datFile: null,\n        totalTaxableIncomePayment: totalIncomePayment,\n        totalWithholdingTax,\n    };\n}\n\n\nconst PageTokenResultSchema = z.object({\n  success: z.boolean(),\n  token: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype PageTokenResult = z.infer<typeof PageTokenResultSchema>;\n\nexport async function getInitialPageToken(): Promise<PageTokenResult> {\n    try {\n        const token = await getInitialPageTokenForDrive();\n        return { success: true, token, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, token: null, error: `Failed to get initial page token: ${errorMessage}` };\n    }\n}\n\nconst ChangesResultSchema = z.object({\n  success: z.boolean(),\n  hasChanges: z.boolean(),\n  newToken: z.string().nullable(),\n  error: z.string().nullable(),\n});\ntype ChangesResult = z.infer<typeof ChangesResultSchema>;\n\nexport async function checkForDatFileChanges(allFolderIds: string[], pageToken: string): Promise<ChangesResult> {\n    if (!allFolderIds || allFolderIds.length === 0 || !pageToken) {\n        return { success: false, hasChanges: false, newToken: null, error: 'Folder IDs and page token are required.' };\n    }\n    try {\n        const { hasChanges, newPageToken } = await listChangesSincePageToken(allFolderIds, pageToken);\n        return { success: true, hasChanges, newToken: newPageToken, error: null };\n    } catch (e) {\n        const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred.';\n        return { success: false, hasChanges: false, newToken: pageToken, error: `Failed to check for changes: ${errorMessage}` };\n    }\n}\n"],"names":[],"mappings":";;;;;;IAqLsB,mBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 2912, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/tax-profiles-content.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useTransition, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport type { TaxProfile } from '@/lib/schemas';\nimport { PlusCircle, Search, Trash, FilePenLine, Loader2, SearchX } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { ProfileForm } from './profile-form';\nimport { TaxProfilesSkeleton } from './tax-profiles-skeleton';\nimport { DeleteConfirmationDialog } from './delete-confirmation-dialog';\nimport { deleteTaxProfile } from '@/lib/actions';\nimport { useTaxProfiles } from '@/hooks/use-tax-profiles';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface TaxProfilesContentProps {\n  headerProfiles: TaxProfile[];\n  onSuccess: (profile: TaxProfile, isNew: boolean) => void;\n  isPending: boolean;\n  initialFetchComplete: boolean;\n}\n\nexport function TaxProfilesContent({ \n  headerProfiles,\n  onSuccess,\n  isPending,\n  initialFetchComplete\n}: TaxProfilesContentProps) {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingProfile, setEditingProfile] = useState<TaxProfile | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [profileToDelete, setProfileToDelete] = useState<TaxProfile | null>(null);\n  const [isDeleting, startDeleteTransition] = useTransition();\n\n  const { removeProfile } = useTaxProfiles();\n  const { toast } = useToast();\n  const ITEMS_PER_PAGE = 10;\n\n  const getDisplayName = (profile: TaxProfile) => {\n    if (profile.entityType === 'Individual') {\n      return profile.tradeName;\n    }\n    return profile.companyName;\n  }\n\n  const handleAddNew = () => {\n    setEditingProfile(null);\n    setIsFormOpen(true);\n  };\n\n  const handleEdit = (profile: TaxProfile) => {\n    setEditingProfile(profile);\n    setIsFormOpen(true);\n  };\n  \n  const handleDeleteClick = (profile: TaxProfile) => {\n    setProfileToDelete(profile);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const handleConfirmDelete = () => {\n    if (!profileToDelete) return;\n\n    startDeleteTransition(async () => {\n      const databaseId = localStorage.getItem('databaseId');\n      if (!databaseId) {\n        toast({ title: 'Error', description: 'User session not found.', variant: 'destructive' });\n        return;\n      }\n\n      const result = await deleteTaxProfile(profileToDelete.tpTIN, databaseId);\n      if (result.success) {\n        toast({ title: 'Profile Deleted', description: `The profile for ${getDisplayName(profileToDelete)} has been deleted.` });\n        removeProfile(profileToDelete.tpTIN);\n      } else {\n        toast({ title: 'Deletion Failed', description: result.error, variant: 'destructive' });\n      }\n      setIsDeleteDialogOpen(false);\n      setProfileToDelete(null);\n    });\n  };\n  \n  useEffect(() => {\n    setCurrentPage(1);\n  }, [searchQuery]);\n\n  const filteredProfiles = headerProfiles\n    .filter(profile => {\n      const displayName = getDisplayName(profile)?.toLowerCase() || '';\n      const query = searchQuery.toLowerCase();\n      return displayName.includes(query) || profile.tpTIN.includes(query);\n    })\n    .sort((a, b) => {\n      const nameA = getDisplayName(a)?.toLowerCase() || '';\n      const nameB = getDisplayName(b)?.toLowerCase() || '';\n      if (nameA < nameB) return -1;\n      if (nameA > nameB) return 1;\n      return 0;\n    });\n\n  const totalPages = Math.ceil(filteredProfiles.length / ITEMS_PER_PAGE);\n  const paginatedProfiles = filteredProfiles.slice(\n    (currentPage - 1) * ITEMS_PER_PAGE,\n    currentPage * ITEMS_PER_PAGE\n  );\n\n  const handlePreviousPage = () => {\n    setCurrentPage((prev) => Math.max(prev - 1, 1));\n  };\n\n  const handleNextPage = () => {\n    setCurrentPage((prev) => Math.min(prev + 1, totalPages));\n  };\n\n  const showLoading = isPending || !initialFetchComplete;\n  \n  const noResults = !showLoading && paginatedProfiles.length === 0;\n\n  return (\n    <>\n      <div className=\"p-4 md:p-6 space-y-6\">\n        <h1 className=\"text-3xl font-bold\">Tax Profiles</h1>\n        <p className=\"text-muted-foreground\">Manage tax profiles in your account.</p>\n        <Card>\n            <CardHeader>\n                <div className=\"flex items-center gap-4 pt-2\">\n                    <div className=\"relative flex-1\">\n                        <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                        <Input \n                          placeholder=\"Search by TIN or name...\" \n                          className=\"pl-8\" \n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                        />\n                    </div>\n                    <Button onClick={handleAddNew}>\n                        <PlusCircle className=\"mr-2\" />\n                        New Profile\n                    </Button>\n                </div>\n            </CardHeader>\n            <CardContent>\n              {showLoading ? (\n                 <TaxProfilesSkeleton />\n              ) : (\n                <>\n                    {/* Desktop Table View */}\n                    <div className=\"border rounded-md hidden md:block\">\n                        <Table>\n                            <TableHeader>\n                                <TableRow>\n                                    <TableHead className=\"w-[15%]\">TIN</TableHead>\n                                    <TableHead className=\"w-[50%]\">Name</TableHead>\n                                    <TableHead className=\"w-[20%]\">Classification</TableHead>\n                                    <TableHead className=\"w-[15%]\">Actions</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {paginatedProfiles.length > 0 ? (\n                                    paginatedProfiles.map((profile) => (\n                                        <TableRow key={profile.tpTIN}>\n                                            <TableCell className=\"font-mono\">{profile.tpTIN}</TableCell>\n                                            <TableCell className=\"font-medium\">{getDisplayName(profile)}</TableCell>\n                                            <TableCell>\n                                                <Badge variant={profile.entityType === 'Individual' ? 'secondary' : 'default'}>\n                                                    {profile.entityType}\n                                                </Badge>\n                                            </TableCell>\n                                            <TableCell>\n                                                <div className=\"flex items-center gap-2\">\n                                                    <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEdit(profile)} disabled={isDeleting && profileToDelete?.tpTIN === profile.tpTIN}>\n                                                        <FilePenLine className=\"h-4 w-4\" />\n                                                        <span className=\"sr-only\">Edit</span>\n                                                    </Button>\n                                                    <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive hover:text-destructive\" onClick={() => handleDeleteClick(profile)} disabled={isDeleting}>\n                                                        {isDeleting && profileToDelete?.tpTIN === profile.tpTIN ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Trash className=\"h-4 w-4\" />}\n                                                        <span className=\"sr-only\">Delete</span>\n                                                    </Button>\n                                                </div>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))\n                                ) : (\n                                    <TableRow>\n                                        <TableCell colSpan={4} className=\"h-48 text-center\">\n                                            <div className=\"flex flex-col items-center justify-center gap-4\">\n                                                <SearchX className=\"h-12 w-12 text-muted-foreground\" />\n                                                <h3 className=\"text-xl font-semibold\">No Profiles Found</h3>\n                                                <p className=\"text-muted-foreground\">\n                                                No tax profiles matched your search. <br />\n                                                Try a different search term.\n                                                </p>\n                                            </div>\n                                        </TableCell>\n                                    </TableRow>\n                                )}\n                            </TableBody>\n                        </Table>\n                    </div>\n\n                    {/* Mobile Card View */}\n                    <div className=\"block md:hidden space-y-4\">\n                      {paginatedProfiles.length > 0 ? (\n                        paginatedProfiles.map((profile) => (\n                           <Card key={profile.tpTIN} className=\"p-4\">\n                                <div className=\"flex justify-between items-start gap-4\">\n                                    <div className=\"flex-grow overflow-hidden\">\n                                        <p className=\"font-semibold\">{getDisplayName(profile)}</p>\n                                        <p className=\"text-sm text-muted-foreground font-mono\">{profile.tpTIN}</p>\n                                    </div>\n                                    <div className=\"flex items-center gap-1 flex-shrink-0\">\n                                      <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEdit(profile)} disabled={isDeleting && profileToDelete?.tpTIN === profile.tpTIN}>\n                                        <FilePenLine className=\"h-4 w-4\" />\n                                        <span className=\"sr-only\">Edit</span>\n                                      </Button>\n                                      <Button variant=\"ghost\" size=\"icon\" className=\"text-destructive hover:text-destructive\" onClick={() => handleDeleteClick(profile)} disabled={isDeleting}>\n                                        {isDeleting && profileToDelete?.tpTIN === profile.tpTIN ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Trash className=\"h-4 w-4\" />}\n                                        <span className=\"sr-only\">Delete</span>\n                                      </Button>\n                                    </div>\n                                </div>\n                                <div className=\"mt-4\">\n                                   <Badge variant={profile.entityType === 'Individual' ? 'secondary' : 'default'}>\n                                        {profile.entityType}\n                                    </Badge>\n                                </div>\n                            </Card>\n                        ))\n                      ) : (\n                         <div className=\"h-48 text-center flex flex-col items-center justify-center gap-4\">\n                            <SearchX className=\"h-12 w-12 text-muted-foreground\" />\n                            <h3 className=\"text-xl font-semibold\">No Profiles Found</h3>\n                            <p className=\"text-muted-foreground text-sm px-4\">\n                                No tax profiles matched your search. Try a different term.\n                            </p>\n                         </div>\n                      )}\n                    </div>\n                    \n                    {/* Pagination */}\n                    {!noResults && (\n                      <div className=\"flex items-center justify-end space-x-2 py-4 px-0 md:px-4\">\n                          <span className=\"text-sm text-muted-foreground\">\n                              Page {totalPages > 0 ? currentPage : 0} of {totalPages}\n                          </span>\n                          <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={handlePreviousPage}\n                              disabled={currentPage <= 1}\n                          >\n                              Previous\n                          </Button>\n                          <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={handleNextPage}\n                              disabled={currentPage >= totalPages}\n                          >\n                              Next\n                          </Button>\n                      </div>\n                    )}\n                </>\n              )}\n            </CardContent>\n          </Card>\n      </div>\n      \n      <ProfileForm \n        isOpen={isFormOpen} \n        setIsOpen={setIsFormOpen} \n        profile={editingProfile}\n        onSuccess={onSuccess}\n      />\n\n      <DeleteConfirmationDialog\n        isOpen={isDeleteDialogOpen}\n        onOpenChange={setIsDeleteDialogOpen}\n        onConfirm={handleConfirmDelete}\n        isDeleting={isDeleting}\n        itemName={profileToDelete ? getDisplayName(profileToDelete) : ''}\n        itemType=\"tax profile\"\n      />\n    </>\n  );\n}\n\n    \n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3616, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/tax-profiles/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useCallback } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport type { TaxProfile } from '@/lib/schemas';\nimport { TaxProfilesContent } from '@/components/tax-profiles-content';\nimport { useRefresh } from '@/hooks/use-refresh';\nimport { useTaxProfiles } from '@/hooks/use-tax-profiles';\n\nexport default function TaxProfilesPage() {\n  const { toast } = useToast();\n  const { \n    profiles, \n    isPending, \n    initialFetchComplete, \n    fetchProfiles, \n    addProfile, \n    updateProfile \n  } = useTaxProfiles();\n  const { setRefreshFunction } = useRefresh();\n\n  const handleFetch = useCallback((isManualRefresh = false) => {\n    fetchProfiles(isManualRefresh);\n  }, [fetchProfiles]);\n\n  useEffect(() => {\n    // Set the refresh function for the header button to allow manual refresh\n    setRefreshFunction(() => () => handleFetch(true));\n  }, [handleFetch, setRefreshFunction]);\n\n\n  const handleProfileSuccess = (updatedProfile: TaxProfile, isNew: boolean) => {\n    if (isNew) {\n      addProfile(updatedProfile);\n    } else {\n      updateProfile(updatedProfile);\n    }\n  };\n\n  return (\n    <TaxProfilesContent\n      headerProfiles={profiles}\n      onSuccess={handleProfileSuccess}\n      isPending={isPending}\n      initialFetchComplete={initialFetchComplete}\n    />\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AAEA;AACA;AACA;AAPA;;;;;;;AASe,SAAS;IACtB,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,EACJ,QAAQ,EACR,SAAS,EACT,oBAAoB,EACpB,aAAa,EACb,UAAU,EACV,aAAa,EACd,GAAG,CAAA,GAAA,uIAAA,CAAA,iBAAc,AAAD;IACjB,MAAM,EAAE,kBAAkB,EAAE,GAAG,CAAA,GAAA,+HAAA,CAAA,aAAU,AAAD;IAExC,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC,kBAAkB,KAAK;QACtD,cAAc;IAChB,GAAG;QAAC;KAAc;IAElB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,yEAAyE;QACzE,mBAAmB,IAAM,IAAM,YAAY;IAC7C,GAAG;QAAC;QAAa;KAAmB;IAGpC,MAAM,uBAAuB,CAAC,gBAA4B;QACxD,IAAI,OAAO;YACT,WAAW;QACb,OAAO;YACL,cAAc;QAChB;IACF;IAEA,qBACE,8OAAC,gJAAA,CAAA,qBAAkB;QACjB,gBAAgB;QAChB,WAAW;QACX,WAAW;QACX,sBAAsB;;;;;;AAG5B","debugId":null}}]
}